
=== File: src/app/app-routing.module.ts [MODULE] ===
----------------------------------------
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { DashboardComponent } from './dashboard/dashboard.component';
import { MailComponent } from './dashboard/modules/mail/mail.component';
import { TranslateComponent } from './dashboard/modules/translate/translate.component';
import { CopyrightComponent } from './dashboard/modules/copyright/copyright.component';
import { ScriptComponent } from './dashboard/modules/script/script.component';
import { DescriptionComponent } from './dashboard/modules/description/description.component';
import { ProfileComponent } from './dashboard/user/profile/profile.component';
import { SignUpComponent } from './auth/sign-up/sign-up.component';
import { SignInComponent } from './auth/sign-in/sign-in.component';
import { ErrorComponent } from './shared/components/error/error.component';
import { authGuard } from './guard/auth.guard';
import { userGuard } from './guard/user.guard';
import { BalanceComponent } from './dashboard/user/balance/balance.component';
import { LawyerComponent } from './dashboard/chats/lawyer/lawyer.component';
import { HistoryComponent } from './dashboard/user/history/history.component';
import { MainComponent } from './home/main/main.component';
import { HomeComponent } from './home/home.component';
import { BlogComponent } from './home/blog/blog.component';
import { confirmExitGuard } from './guard/confirm-exit.guard';
import { PrivacyPolicyComponent } from './home/privacy-policy/privacy-policy.component';
import { TermsComponent } from './home/terms/terms.component';

const routes: Routes = [
  {
    path: '',
    redirectTo: 'services/translate',
    pathMatch: 'full'
  },
  {
    path: 'services',
    component: DashboardComponent,
    children: [
      { path: '', redirectTo: 'translate', pathMatch: 'full' },
      {
        path: 'translate',
        component: TranslateComponent,
      },
      {
        path: 'mail',
        component: MailComponent
      },
      {
        path: 'copyright',
        component: CopyrightComponent,
      },
      {
        path: 'script',
        component: ScriptComponent
      },
      {
        path: 'description',
        component: DescriptionComponent
      },
      {
        path: 'lawyer',
        component: LawyerComponent
      },
      {
        path: 'profile',
        component: ProfileComponent,
        canActivate: [userGuard]
      },
      {
        path: 'balance',
        component: BalanceComponent,
        canActivate: [userGuard]
      },
      {
        path: 'history',
        component: HistoryComponent,
        canActivate: [userGuard]
      }
    ]
  },
  {
    path: 'sign-up',
    component: SignUpComponent,
    canActivate: [authGuard]
  },
  {
    path: 'sign-in',
    component: SignInComponent,
    canActivate: [authGuard]
  },
  {
    path: 'home',
    component: HomeComponent,
    children: [
      {
        path: '',
        component: MainComponent
      },
      {
        path: 'main',
        component: MainComponent,
      },
      {
        path: 'blog',
        component: BlogComponent,
      },
      {
        path: 'privacy',
        component: PrivacyPolicyComponent
      },
      {
        path: 'terms',
        component: TermsComponent
      }
    ]
  },
  { path: '**', component: ErrorComponent },

];

@NgModule({
  imports: [RouterModule.forRoot(routes, {
    scrollPositionRestoration: 'top',
  })],
  exports: [RouterModule]
})
export class AppRoutingModule { }

----------------------------------------


=== File: src/app/app.component.html [HTML] ===
----------------------------------------

<router-outlet></router-outlet>

----------------------------------------


=== File: src/app/app.component.scss [STYLE] ===
----------------------------------------

----------------------------------------


=== File: src/app/app.component.spec.ts [TEST] ===
----------------------------------------
import { TestBed } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule
      ],
      declarations: [
        AppComponent
      ],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have as title 'slk-24'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('slk-24');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, slk-24');
  });
});

----------------------------------------


=== File: src/app/app.component.ts [COMPONENT] ===
----------------------------------------
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { Component, Inject, OnInit, PLATFORM_ID } from '@angular/core';
import { TranslocoService } from '@ngneat/transloco';
import Hotjar from '@hotjar/browser';
import { PixelService } from 'ngx-multi-pixel';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrl: './app.component.scss',
})
export class AppComponent implements OnInit {
  title = 'slk-24';
  activeLang!: string;
  selectedLanguage: any;
  savedLanguage: any;

  isBrowser: any;

  siteID = 5128056;
  hotjarV = 6;

  constructor(
    private _translate: TranslocoService,
    private pixel: PixelService
  ) {}

  ngOnInit() {
    this.initHotjar();
    this.initPixel();
    this.savedLanguage = localStorage.getItem('selectedLanguage');
    if (this.savedLanguage) {
      this.selectedLanguage = { path: '', key: this.savedLanguage };
      this._translate.setActiveLang(this.savedLanguage);
      this.activeLang = this.savedLanguage;
    } else {
      this.selectedLanguage = {
        path: '',
        key: this._translate.getDefaultLang(),
      };
      this.activeLang = this._translate.getDefaultLang();
    }
  }

  initHotjar() {
    Hotjar.init(this.siteID, this.hotjarV);
  }

  initPixel() {
    this.pixel.initialize();
  }
}

----------------------------------------


=== File: src/app/app.module.server.ts [TS] ===
----------------------------------------
import { NgModule } from '@angular/core';
import { ServerModule } from '@angular/platform-server';

import { AppModule } from './app.module';
import { AppComponent } from './app.component';

@NgModule({
  imports: [
    AppModule,
    ServerModule,
  ],
  bootstrap: [AppComponent],
})
export class AppServerModule {}

----------------------------------------


=== File: src/app/app.module.ts [MODULE] ===
----------------------------------------
import { NgModule } from '@angular/core';
import { BrowserModule, provideClientHydration } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { SignInComponent } from './auth/sign-in/sign-in.component';
import { SignUpComponent } from './auth/sign-up/sign-up.component';
import { HTTP_INTERCEPTORS, HttpClientModule, provideHttpClient, withFetch, withInterceptors } from '@angular/common/http';
import { provideAnimationsAsync } from '@angular/platform-browser/animations/async';
import { ErrorComponent } from './shared/components/error/error.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { ToastrModule } from 'ngx-toastr';
import { CommonModule } from '@angular/common';
import { TranslocoRootModule } from './transloco-root.module';
import { AuthInterceptor } from './shared/services/auth-interceptor.interceptor';
import { PixelModule } from 'ngx-multi-pixel';
import { DashboardModule } from './dashboard/dashboard.module';
import { HomeModule } from './home/home.module';
import { PurchaseModalComponent } from './shared/components/purchase-modal/purchase-modal.component';
import { MatDialogModule } from '@angular/material/dialog';

@NgModule({
  declarations: [
    AppComponent,
    SignInComponent,
    SignUpComponent,
    ErrorComponent,
    PurchaseModalComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    CommonModule,
    FormsModule,
    HttpClientModule,
    ReactiveFormsModule,
    MatDialogModule,
    ToastrModule.forRoot(),
    PixelModule.forRoot({ enabled: true, pixelId: ["536291588920812"]}),
    TranslocoRootModule,
    DashboardModule,
    HomeModule,
  ],
  providers: [
    provideAnimationsAsync(),
    {provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true}
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }
----------------------------------------


=== File: src/app/auth/services/user.service.ts [SERVICE] ===
----------------------------------------
import { Injectable } from '@angular/core';
import { HttpService } from '../../shared/services/http.service';
import { url } from '../../shared/data/api';

@Injectable({
  providedIn: 'root'
})
export class UserService {
  constructor(private _apiService: HttpService) {}

  authorize(data: any) {
    return this._apiService.postAuth(url.login, data);
  }

  register(data: any) {
    return this._apiService.postAuth(url.register, data);
  }
}

----------------------------------------


=== File: src/app/auth/sign-in/sign-in.component.html [HTML] ===
----------------------------------------
<div class="auth-bg align-items-center overflow-x-hidden" >
  <div class="p-2 rounded position-absolute top-0 start-0 c-p" >
    <img src="../../../assets/images/SLK/logo_white.svg" width="120" alt="LOGO" (click)="navigateToServices()">
    <p class="text-white mt-3" (click)="goBack()">&#10094; {{ 'back' | transloco }}</p>
  </div>
  <div class="auth-container auth-sign-in" @fadeIn>
    <div class="text-center">
      <h3>{{ 'sign-in.h3' | transloco }}</h3>
      <p>{{ 'sign-in.p' | transloco }}</p>
    </div>
    <form [formGroup]="loginForm" (ngSubmit)="proceedLogin()">
      <ul class="list-inline text-center">
        <li class="list-inline-item">
          <i class="bi bi-facebook fs-3 c-p slk-color" (click)="loginWithFB()"></i>
        </li>
      </ul>
      <div class="input-field">
        <label for="email">{{ 'sign-in.email' | transloco }}</label>
        <input type="email" formControlName="username" placeholder="suliko@suliko.com" id="email" autocomplete="email"/>
      </div>
      <div class="input-field">
        <label for="password">{{ 'sign-in.password' | transloco }}</label>
        <input type="password" formControlName="password" placeholder="********" id="password"/>
      </div>
      <div class="mt-5 text-center">
        <button type="submit" class="gen-btn w-75 rounded py-2 border-0 text-white">
          <span *ngIf="!isLoading">{{ 'sign-in.sign-in-btn' | transloco }}</span>
          <span *ngIf="isLoading">{{ 'sign-in.sign-in-btn' | transloco }}...</span>
        </button>
      </div>
    </form>
    <p class="mt-4 text-center">{{ 'sign-in.account' | transloco }} <span class="slk-color" (click)="navigateToSignUp()">{{ 'sign-in.create-account' | transloco }}</span></p>
  </div>
</div>

----------------------------------------


=== File: src/app/auth/sign-in/sign-in.component.scss [STYLE] ===
----------------------------------------

----------------------------------------


=== File: src/app/auth/sign-in/sign-in.component.ts [COMPONENT] ===
----------------------------------------
import { Component, NgZone, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from '../../shared/services/auth.service';
import { ToastrService } from 'ngx-toastr';
import { UserService } from '../services/user.service';
import { animate, style, transition, trigger } from '@angular/animations';
import { Location } from '@angular/common';
import { url } from '../../shared/data/api';
import { HttpService } from '../../shared/services/http.service';

declare const FB: any;

@Component({
  selector: 'app-sign-in',
  templateUrl: './sign-in.component.html',
  animations: [
    trigger('fadeIn', [
      transition(':enter', [
        style({ opacity: 0 }),
        animate('0.2s ease-in', style({ opacity: 1 })),
      ]),
    ]),
  ],
  styleUrl: './sign-in.component.scss'
})
export class SignInComponent implements OnInit {
  loginForm!: FormGroup;
  isLoading: boolean = false;
  incorrect: boolean = false;

  constructor(
    private _router: Router,
    private _builder: FormBuilder,
    private authService: AuthService,
    private _http: HttpService,
    private userService: UserService,
    private toastr: ToastrService,
    private location: Location,
    private _ngZone: NgZone
  ) {}

  ngOnInit(): void {
    this.initForm();
  }

  initForm(): void {
    this.loginForm = this._builder.group({
      username: this._builder.control(``, Validators.required),
      password: this._builder.control(``, Validators.required),
    });
  }

  proceedLogin(){
    if (this.loginForm.valid) {
      this.isLoading = !this.isLoading;
      this.authService.signIn(this.loginForm.value.username, this.loginForm.value.password).subscribe(
        (res) => {
          this.isLoading = !this.isLoading;
          this._router.navigate(['/services']);
        },
        (err) => {
          this.loginForm.setErrors({ ...this.loginForm.errors, 'incorrect': true });
          this.isLoading = !this.isLoading;
          this.incorrect = !this.incorrect;
        }
      );
    } else {
      this.toastr.error('შეავსეთ ყველა ველი');
    }
  }

  async loginWithFB() {
    debugger;
    FB.login(async (result: any) => {
      debugger;
      if (result.authResponse) {
        // Correct way to access accessToken
        const accessToken = result.authResponse.accessToken;

        // Call your API to log in using the Facebook access token
        await this._http.loginWithFacebook(url.loginFB, accessToken).subscribe(
          (res: any) => {
            this._ngZone.run(() => {
              console.log(res);
              // this.authService.JWTtoSession(res);
              this._router.navigate(['/services']);
            });
          },
          (err: any) => {
            console.log(err);
          }
        );
      } else {
        console.log('User cancelled login or did not fully authorize.');
      }
    }, { scope: 'email' });
  }

  navigateToSignUp() {
    this._router.navigate(['/sign-up']);
  }

  navigateToServices() {
    this._router.navigate(['/services']);
  }

  goBack(): void {
    this.location.back();
  }
}

----------------------------------------


=== File: src/app/auth/sign-up/sign-up.component.html [HTML] ===
----------------------------------------
<div class="auth-bg align-items-start position-relative">
  <div class="p-2 rounded position-absolute top-0 start-0 c-p" >
    <img src="../../../assets/images/SLK/logo_white.svg" width="120" alt="logo" (click)="navigateToServices()">
    <p class="text-white mt-3" (click)="goBack()">&#10094; {{ 'back' | transloco }}</p>
  </div>
  <div class="auth-container auth-sign-up" @fadeIn>
    <div class="text-center mb-4">
      <h3>{{ 'sign-up.h3' | transloco }}</h3>
      <p>{{ 'sign-in.p' | transloco }}</p>
    </div>
    <form [formGroup]="registerForm" (ngSubmit)="proceedRegistration()">
      <div class="input-field">
        <label for="name">{{ 'sign-up.name' | transloco }}</label>
        <input type="text" formControlName="firstname" placeholder="Suliko" id="name" autocomplete="name"/>
      </div>
      <div class="input-field">
        <label for="surname">{{ 'sign-up.surname' | transloco }}</label>
        <input type="text" formControlName="lastname" placeholder="Tsereteli" id="surname"/>
      </div>
      <div class="input-field">
        <label for="email">{{ 'sign-up.mail' | transloco }}</label>
        <input type="email" formControlName="email" placeholder="suliko@suliko.com" id="email" autocomplete="email"/>
      </div>
      <div class="input-field">
        <label for="phone">{{ 'sign-up.phone' | transloco }}</label>
        <input
          type="text"
          formControlName="phone"
          placeholder="5XX 11 22 33"
          minlength="6"
          maxlength="9"
          id="phone"
          autocomplete="tel"
        />
      </div>
      <div class="input-field">
        <label for="password">{{ 'sign-up.password' | transloco }}</label>
        <input type="password" formControlName="password" placeholder="********" id="password"/>
      </div>
      <div class="mt-5 text-center">
        <button class="gen-btn w-75 rounded py-2 border-0 text-white">
          <span *ngIf="!isLoading">{{ 'sign-up.sign-up-btn' | transloco }}</span>
          <span *ngIf="isLoading">{{ 'sign-up.sign-up-btn' | transloco }}...</span>
        </button>
      </div>
    </form>
    <p class="mt-4 text-center">
      {{ 'sign-up.account' | transloco }}
      <span class="slk-color" (click)="navigateToSignIn()">{{ 'sign-up.login' | transloco }}</span>
    </p>
  </div>
</div>

----------------------------------------


=== File: src/app/auth/sign-up/sign-up.component.scss [STYLE] ===
----------------------------------------

----------------------------------------


=== File: src/app/auth/sign-up/sign-up.component.ts [COMPONENT] ===
----------------------------------------
import { HttpErrorResponse } from '@angular/common/http';
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from '../../shared/services/auth.service';
import { UserService } from '../services/user.service';
import { ToastrService } from 'ngx-toastr';
import { animate, style, transition, trigger } from '@angular/animations';
import { Location } from '@angular/common';

@Component({
  selector: 'app-sign-up',
  templateUrl: './sign-up.component.html',
  animations: [
    trigger('fadeIn', [
      transition(':enter', [
        style({ opacity: 0 }),
        animate('0.2s ease-in', style({ opacity: 1 })),
      ]),
    ]),
  ],
  styleUrl: './sign-up.component.scss'
})
export class SignUpComponent implements OnInit {
  registerForm!: FormGroup;
  loginForm!: FormGroup;
  isLoading: boolean = false;
  incorrect: boolean = false;

  constructor(
    private _router: Router,
    private _builder: FormBuilder,
    private authService: AuthService,
    private userService: UserService,
    private toastr: ToastrService,
    private location: Location
  ) {}

  ngOnInit() {
    this.initForm();
    this.initLoginForm();
  }

  initForm() {
    this.registerForm = this._builder.group({
      firstname: this._builder.control(``, Validators.required),
      lastname: this._builder.control(``, Validators.required),
      email: this._builder.control(``, [Validators.required, Validators.email]),
      phone: this._builder.control(``, Validators.required),
      password: this._builder.control(``, Validators.required),
    });
  }

  initLoginForm() {
    this.loginForm = this._builder.group({
      username: this._builder.control(``, Validators.required),
      password: this._builder.control(``, Validators.required),
    });
  }

  proceedRegistration() {
    if (this.registerForm.valid) {
      this.isLoading = !this.isLoading;
      const data = {
        firstName: this.registerForm.value.firstname,
        lastName: this.registerForm.value.lastname,
        email: this.registerForm.value.email,
        phoneNUmber: this.registerForm.value.phone,
        password: this.registerForm.value.password,
      };
      this.userService.register(data).subscribe(
        (res) => {
          this.isLoading = !this.isLoading;
          const loginData = {
            username: data.email,
            password: data.password,
          }
          this.userService.authorize(loginData).subscribe(
            (res) => {
              // this.authService.JWTtoSession(res);
              this.isLoading = !this.isLoading;
              this._router.navigate(['/services']);
            },
            (err) => {
              console.log(err);
              this.loginForm.setErrors({ ...this.loginForm.errors, 'incorrect': true });
              this.isLoading = !this.isLoading;
              this.incorrect = !this.incorrect;
            }
          );
        },
        (err: HttpErrorResponse) => {
          console.log(err);
          this.toastr.error(`${err.error.split('\r\n')[0]}`);
          this.isLoading = !this.isLoading;
        }
      )
    } else {
      this.toastr.error('შეავსეთ ყველა ველი');
    }
  }

  navigateToSignIn() {
    this._router.navigate(['/sign-in']);
  }

  navigateToServices() {
    this._router.navigate(['/services']);
  }

  goBack(): void {
    this.location.back();
  }
}

----------------------------------------


=== File: src/app/dashboard/chats/finance/finance.component.html [HTML] ===
----------------------------------------
<p>finance works!</p>

----------------------------------------


=== File: src/app/dashboard/chats/finance/finance.component.scss [STYLE] ===
----------------------------------------

----------------------------------------


=== File: src/app/dashboard/chats/finance/finance.component.spec.ts [TEST] ===
----------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { FinanceComponent } from './finance.component';

describe('FinanceComponent', () => {
  let component: FinanceComponent;
  let fixture: ComponentFixture<FinanceComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [FinanceComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(FinanceComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------


=== File: src/app/dashboard/chats/finance/finance.component.ts [COMPONENT] ===
----------------------------------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-finance',
  templateUrl: './finance.component.html',
  styleUrl: './finance.component.scss'
})
export class FinanceComponent {

}

----------------------------------------


=== File: src/app/dashboard/chats/lawyer/lawyer.component.html [HTML] ===
----------------------------------------
<div class="content-component">
  <div class="chatting-container">
    <div class="header px-3 pt-2 pb-1">
      <h4>{{ "lawyer.title" | transloco }}</h4>
    </div>
    <div class="chat-container">
      <div class="text-center text-muted pt-3 pb-5">
        <img
          src="../../../../assets/images/SLK/Logo.svg"
          width="40"
          alt="SULIKO"
        />
        <p class="pt-2">{{ "lawyer.des" | transloco }}</p>
      </div>
      <div class="chat-content" *ngFor="let chat of chats; let i = index">
        <div class="question-div" *ngIf="chat.isUser">
          <p id="question" class="question m-0">
            {{ chat.text }}
          </p>
        </div>
        <div class="answer-div" *ngIf="!chat.isUser">
          <div class="answer-chat-logo">
            <svg
              width="30"
              height="30"
              viewBox="0 0 91 74"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M74.2 7.10001L74.1 7L66.7 3.5L54.2 3L50.2 0.800003L42.1 3.3L33 1.8L20.5 4.89999L12.7 16.8L2.5 23.3L0.5 46.5L9 54.3L10.9 61.5L20.4 66.6H28.3L31.8 73.3L41.5 71L48.1 59.5L50.8 60.1L56.2 61.8L71.8 55.8L75.1 48L88.7 45L90.9 24.4L74.2 7.10001ZM70.1 33.9L69.4 33.6L66.9 26.6L69.1 25.1L81.9 26.5L83.6 29L78.9 33.1L70.1 33.9ZM70.9 44.7C64.4 42.6 58 40.6 51.5 38.5C51.6 37.9 51.8 37.3 51.9 36.6C57.2 36.5 62.5 36.4 67.8 36.3L70.9 44.7ZM83 20.5C81.9 22.2 81.3 23 81.1 23.5L69.2 22.2L68 18.8L73.7 10.8L83 20.5ZM54.9 6.7L55.2 6L65.9 6.39999L71.4 9L63.5 20.1L53.2 11.7L54.9 6.7ZM53.2 15.5L62.5 23.1L62.7 23.4L66.3 33.5L52.6 33.9L46.8 33.5L46.7 31.9L52.8 27.1L53.2 15.5ZM33.1 4.8L41 6.10001L50.3 13.6L50 20.1L46.7 21.3L45.2 20.3L29.3 10L28.4 6L33.1 4.8ZM46.4 28.3L38.2 34.7L35 44.7L30.3 42.4L29.5 27.1L31.3 24.3L45.3 25.3L46.4 28.3ZM27.4 12.2L40.2 20.5L40.1 22.1L29.4 21.4L27.4 20.1L25.8 14L27.4 12.2ZM27.3 42L11.1 42.8L10 40.7L24.1 27.9L26.6 28.9L27.3 42ZM7 39.4L4.2 38.7L5.4 25L14.8 19L19.7 11.6L22.5 12.4L25.3 22.9L7 39.4ZM7 48.4L10.7 45.8L24.9 45.1L19.9 53.2L11.4 52.4L7 48.4ZM21.2 63.6L13.5 59.4L12.5 55.4L20.4 56.1L26.9 63.5H21.2V63.6ZM22.6 54.4L28.3 45H28.5L34.3 47.8L28.4 60.9L22.6 54.4ZM39.7 68.3L33.5 69.8L30.3 63.8L36.4 50.4L45.7 57.8L39.7 68.3ZM47.3 55.5L37.4 47.6L37.5 46.5L39.1 41.6L42 41.3L49.9 53.4L47.3 55.5ZM69.6 53.5L56.8 58.4L56.1 57.4L44.9 40.4L45.8 39.7L71.3 48L69.6 53.5ZM86 42.6L74.2 45.2L71.1 36.8L80.3 36L84.4 32.4L87.1 33.2L86 42.6Z"
                fill="#0040FF"
              />
            </svg>
          </div>
          <div class="answer-chat-text">
            <p
              id="answer"
              class="answer m-0"
              #generatedResponse
              [innerHTML]="chat.text"
            ></p>
            <div class="bi-content">
              <i
                class="bi bi-copy"
                title="Copy to clipboard"
                (click)="copyToClipboard(i)"
              ></i>
            </div>
          </div>
        </div>
      </div>
      <div class="if-loading d-flex gap-2 answer-div" *ngIf="isLoading">
        <div class="answer-title">
          <svg
            width="30"
            height="30"
            viewBox="0 0 91 74"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M74.2 7.10001L74.1 7L66.7 3.5L54.2 3L50.2 0.800003L42.1 3.3L33 1.8L20.5 4.89999L12.7 16.8L2.5 23.3L0.5 46.5L9 54.3L10.9 61.5L20.4 66.6H28.3L31.8 73.3L41.5 71L48.1 59.5L50.8 60.1L56.2 61.8L71.8 55.8L75.1 48L88.7 45L90.9 24.4L74.2 7.10001ZM70.1 33.9L69.4 33.6L66.9 26.6L69.1 25.1L81.9 26.5L83.6 29L78.9 33.1L70.1 33.9ZM70.9 44.7C64.4 42.6 58 40.6 51.5 38.5C51.6 37.9 51.8 37.3 51.9 36.6C57.2 36.5 62.5 36.4 67.8 36.3L70.9 44.7ZM83 20.5C81.9 22.2 81.3 23 81.1 23.5L69.2 22.2L68 18.8L73.7 10.8L83 20.5ZM54.9 6.7L55.2 6L65.9 6.39999L71.4 9L63.5 20.1L53.2 11.7L54.9 6.7ZM53.2 15.5L62.5 23.1L62.7 23.4L66.3 33.5L52.6 33.9L46.8 33.5L46.7 31.9L52.8 27.1L53.2 15.5ZM33.1 4.8L41 6.10001L50.3 13.6L50 20.1L46.7 21.3L45.2 20.3L29.3 10L28.4 6L33.1 4.8ZM46.4 28.3L38.2 34.7L35 44.7L30.3 42.4L29.5 27.1L31.3 24.3L45.3 25.3L46.4 28.3ZM27.4 12.2L40.2 20.5L40.1 22.1L29.4 21.4L27.4 20.1L25.8 14L27.4 12.2ZM27.3 42L11.1 42.8L10 40.7L24.1 27.9L26.6 28.9L27.3 42ZM7 39.4L4.2 38.7L5.4 25L14.8 19L19.7 11.6L22.5 12.4L25.3 22.9L7 39.4ZM7 48.4L10.7 45.8L24.9 45.1L19.9 53.2L11.4 52.4L7 48.4ZM21.2 63.6L13.5 59.4L12.5 55.4L20.4 56.1L26.9 63.5H21.2V63.6ZM22.6 54.4L28.3 45H28.5L34.3 47.8L28.4 60.9L22.6 54.4ZM39.7 68.3L33.5 69.8L30.3 63.8L36.4 50.4L45.7 57.8L39.7 68.3ZM47.3 55.5L37.4 47.6L37.5 46.5L39.1 41.6L42 41.3L49.9 53.4L47.3 55.5ZM69.6 53.5L56.8 58.4L56.1 57.4L44.9 40.4L45.8 39.7L71.3 48L69.6 53.5ZM86 42.6L74.2 45.2L71.1 36.8L80.3 36L84.4 32.4L87.1 33.2L86 42.6Z"
              fill="#0040FF"
            />
          </svg>
        </div>
        <div class="d-flex align-items-center">
          <div class="loader-dots"></div>
        </div>
      </div>
    </div>
    <div class="input-footer">
      <form [formGroup]="chatForm" (ngSubmit)="sendText()">
        <div class="input-container">
          <textarea
            #textareaElement
            (keydown)="onEnterPressed($event)"
            [placeholder]="'lawyer.prod-name' | transloco"
            formControlName="text"
            (ngModelChange)="adjustTextareaHeight()"
          ></textarea>
        </div>
        <div class="btn-container">
          <button type="submit" class="content-btn px-4">
            <span>{{ "send" | transloco }}</span>
            <svg
              class="ms-2"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 512 512"
            >
              <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
              <path
                d="M498.1 5.6c10.1 7 15.4 19.1 13.5 31.2l-64 416c-1.5 9.7-7.4 18.2-16 23s-18.9 5.4-28 1.6L284 427.7l-68.5 74.1c-8.9 9.7-22.9 12.9-35.2 8.1S160 493.2 160 480l0-83.6c0-4 1.5-7.8 4.2-10.8L331.8 202.8c5.8-6.3 5.6-16-.4-22s-15.7-6.4-22-.7L106 360.8 17.7 316.6C7.1 311.3 .3 300.7 0 288.9s5.9-22.8 16.1-28.7l448-256c10.7-6.1 23.9-5.5 34 1.4z"
              />
            </svg>
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

----------------------------------------


=== File: src/app/dashboard/chats/lawyer/lawyer.component.scss [STYLE] ===
----------------------------------------
*::-webkit-scrollbar {
  height: 50%;
  width: 0.2rem !important;
  background-color: #eeeeee !important; /* or add it to the track */
  border-radius: 1rem;
}

*::-webkit-scrollbar-thumb {
  border-radius: 1rem;
  background: #8f8f8f !important;
}

.content-component {
  overflow: hidden;
}

.chatting-container {
  display: flex;
  flex-direction: column;
  height: calc(100vh - 5rem);
  .header {
    flex-shrink: 0;
  }
  .chat-container {
    padding: 0 1rem 3rem 1rem;
    flex-grow: 1;
    overflow-y: auto;
    .chat-content {
      .question-div {
        background-color: #0d64d6;
        width: fit-content;
        padding: 1rem 1rem 1.5rem 1rem;
        border-radius: 1rem 1rem 0 1rem;
        margin: 2rem 0 2rem auto;
        color: white;
      }
      .answer-div {
        display: flex;
        justify-content: start;
        align-items: end;
        gap: 10px;
        .answer-chat-text {
          background-color: rgb(245, 245, 245);
          width: fit-content;
          padding: 1rem;
          border-radius: 1rem 1rem 1rem 0;
        }
        .bi-content {
          margin-top: 0.5rem;
          text-align: end;
          .bi {
            cursor: pointer;
          }
        }
      }
    }
  }
  .input-footer {
    height: fit-content;
    padding: 5px 15px 0 15px;
    border-top: 1px solid rgb(209, 209, 209);
    flex-shrink: 0;
    form {
      display: flex;
      justify-content: space-between;
      align-items: center;
      .btn-container {
        flex-shrink: 0;
      }
      .input-container {
        height: fit-content;
        flex-grow: 1;
        padding-right: 10px;
        textarea {
          margin-top: 10px;
          border: none;
          width: 100%;
          height: 28px;
          max-height: 6rem;
          outline: none;
          resize: none;
        }
      }
    }
  }
}

.loader-dots {
  width: 30px;
  aspect-ratio: 4;
  --_g: no-repeat radial-gradient(circle closest-side, #0238e7 90%, #0000);
  background: var(--_g) 0% 50%, var(--_g) 50% 50%, var(--_g) 100% 50%;
  background-size: calc(100% / 3) 100%;
  animation: l7 1s infinite linear;
}
@keyframes l7 {
  33% {
    background-size: calc(100% / 3) 0%, calc(100% / 3) 100%, calc(100% / 3) 100%;
  }
  50% {
    background-size: calc(100% / 3) 100%, calc(100% / 3) 0%, calc(100% / 3) 100%;
  }
  66% {
    background-size: calc(100% / 3) 100%, calc(100% / 3) 100%, calc(100% / 3) 0%;
  }
}

----------------------------------------


=== File: src/app/dashboard/chats/lawyer/lawyer.component.spec.ts [TEST] ===
----------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LawyerComponent } from './lawyer.component';

describe('LawyerComponent', () => {
  let component: LawyerComponent;
  let fixture: ComponentFixture<LawyerComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [LawyerComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(LawyerComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------


=== File: src/app/dashboard/chats/lawyer/lawyer.component.ts [COMPONENT] ===
----------------------------------------
import {
  Component,
  ElementRef,
  HostListener,
  OnInit,
  Renderer2,
  ViewChild,
} from '@angular/core';
import {
  FormBuilder,
  FormControl,
  FormGroup,
  Validators,
} from '@angular/forms';
import { DomSanitizer, SafeUrl } from '@angular/platform-browser';
import { HttpService } from '../../../shared/services/http.service';
import { ContentModel } from '../../../shared/models/content.model';
import { ChatModel } from '../../../shared/models/chat.model';
import { url } from '../../../shared/data/api';
import { ProductCategoryService } from '../../../shared/services/product-category.service';
import { Category } from '../../../shared/interfaces/category.interface';
import { BehaviorSubject, map, Observable, of, startWith } from 'rxjs';
import { ToastrService } from 'ngx-toastr';
import { AuthService } from '../../../shared/services/auth.service';
import { MatDialog } from '@angular/material/dialog';
import { BalanceService } from '../../../shared/services/balance.service';
import { MatSelectChange } from '@angular/material/select';
import { ChatWithPhotoModel } from '../../../shared/models/chat-with-photo.model';
import { Router } from '@angular/router';

@Component({
  selector: 'app-lawyer',
  templateUrl: './lawyer.component.html',
  styleUrl: './lawyer.component.scss',
})
export class LawyerComponent implements OnInit {
  @ViewChild('textareaElement', { static: false }) textareaElement!: ElementRef;

  userInfoUpdate: any;
  userID: string = '';
  isLoggedIn: boolean = false;
  balance: any;

  isLoading: boolean = false;
  chats: ChatModel[] = [];

  constructor(
    private router: Router,
    private apiService: HttpService,
    private builder: FormBuilder,
    private toastr: ToastrService,
    private authService: AuthService,
    private balanceService: BalanceService
  ) {}

  ngOnInit() {
    var user = this.authService.userInfo();
    this.balanceService
      .getBalance()
      .subscribe((value) => (this.balance = value));
    if (this.isLoggedIn) {
      this.userID = user.UserId;
      this.apiService.get(url.user, this.userID).subscribe(
        (res) => {
          this.userInfoUpdate = JSON.parse(res);
        },
        (err) => {
          console.log(err);
        }
      );
    }
  }

  chatForm: FormGroup = this.builder.group({
    text: this.builder.control(``, Validators.required),
  });

  sendText() {
    if (!this.chatForm.valid) {
      this.toastr.error(
        'გთხოვთ შეავსეთ ყველა ველი, პროდუქტის სახელი და კატეგორია.'
      );
      return;
    }
    if (
      this.apiService.hasExceededFreeRequests() && !this.authService.isAuthenticated()
    ) {
      this.toastr.error('აუცილებელია რეგისტრაცია');
      this.router.navigate(['/sign-up']);
      return;
    }
    if (this.balance <= 0) {
      this.toastr.error('შეავსეთ ბალანსი, ვეღარ ისარგებლებთ სერვისებით!');
      return;
    }

    this.isLoading = true;

    const userMessageText = this.chatForm.value.text ?? '';

    const data = {
      prompt: userMessageText,
    };

    const userMessage: ChatModel = new ChatModel(true, userMessageText, false);
    this.chats.push(userMessage);
    this.chatForm.get('text')?.reset();

    this.apiService.postLawyer(url.lawyer, data).subscribe(
      (response: any) => {
        var chatMessage = new ChatModel(false, response.response, false);
        this.chats.push(chatMessage);
        this.isLoading = false;

        var user = this.authService.userInfo();
        if (this.isLoggedIn) {
          this.userID = user.UserId;
          this.apiService.get(url.user, this.userID).subscribe(
            (res) => {
              this.userInfoUpdate = JSON.parse(res);
              this.balanceService.setBalance(this.userInfoUpdate.balance);
              this.apiService
                .updateUserInfo('/api/User', this.userInfoUpdate)
                .subscribe();
            },
            (err) => {
              console.log(err);
            }
          );
        }
      },
      (error) => {
        console.error('Error:', error);
        const errorText =
          error.error.errorText || 'An unexpected error occurred';
        var chatMessage = new ChatModel(false, errorText, false);
        this.chats.push(chatMessage);
        this.isLoading = false;
      }
    );
  }

  copyToClipboard(index: any) {
    const chat = this.chats[index];

    const tempElement = document.createElement('div');
    tempElement.innerHTML = chat.text;
    const textToCopy = tempElement.innerText;

    const textarea = document.createElement('textarea');
    textarea.value = textToCopy;
    document.body.appendChild(textarea);

    textarea.select();
    document.execCommand('copy');

    document.body.removeChild(textarea);

    this.chats.forEach((c, i) => (c.copied = i === index));

    setTimeout(() => {
      this.chats[index].copied = false;
    }, 2000);
  }

  adjustTextareaHeight() {
    if (this.textareaElement && this.textareaElement.nativeElement) {
      const textarea = this.textareaElement
        .nativeElement as HTMLTextAreaElement;
      textarea.style.height = '28px';
      let scHeight = textarea.scrollHeight;
      textarea.style.height = scHeight > 28 ? `${scHeight}px` : '28px';
    }
  }

  onEnterPressed(event: KeyboardEvent): void {
    if (event.key === 'Enter') {
      event.preventDefault();
      this.sendText();
    }
  }
}

----------------------------------------


=== File: src/app/dashboard/components/header/header.component.html [HTML] ===
----------------------------------------
<div
  class="bg-white d-flex align-items-center justify-content-between px-2 py-2"
>
  <div class="ms-3 c-p">
    <svg
      (click)="onToggleSidebar()"
      fill="#4d4d4d"
      width="20"
      height="20"
      viewBox="0 0 52 52"
      data-name="Layer 1"
      id="Layer_1"
      xmlns="http://www.w3.org/2000/svg"
      stroke="#4d4d4d"
    >
      <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
      <g
        id="SVGRepo_tracerCarrier"
        stroke-linecap="round"
        stroke-linejoin="round"
      ></g>
      <g id="SVGRepo_iconCarrier">
        <path d="M50,12.5H2a2,2,0,0,1,0-4H50a2,2,0,0,1,0,4Z"></path>
        <path d="M50,28H2a2,2,0,0,1,0-4H50a2,2,0,0,1,0,4Z"></path>
        <path d="M50,43.5H2a2,2,0,0,1,0-4H50a2,2,0,0,1,0,4Z"></path>
      </g>
    </svg>
    <img
      [src]="
        !isSmallScreen
          ? '../../../../assets/images/SLK/FullLogo.svg'
          : '../../../../assets/images/SLK/Logo.svg'
      "
      [width]="!isSmallScreen ? 120 : 41"
      class="ms-4 ps-1"
      routerLink="/home"
      alt="SULIKO"
    />
  </div>

  <h6 class="m-0 p-0 text-muted">
    {{
      isSmallScreen ? ("test-title2" | transloco) : ("test-title1" | transloco)
    }}
  </h6>
  <div class="d-flex align-items-center justify-content-between">
    <div class="sound" *ngIf="!this._auth.isAuthenticated()">
      <div class="main" (click)="dropdownOpen()">
        <img [src]="selectedLanguage.path" alt="language" />
      </div>
      <div class="content pt-2" *ngIf="contentDropdown">
        <ul>
          <li
            class="mb-2"
            *ngFor="let icon of filteredIcons()"
            (click)="changeLanguage(icon)"
          >
            <img [src]="icon.path" alt="Language" />
          </li>
        </ul>
      </div>
    </div>
    <div class="dropdown-user">
      <div
        class="user-div ms-2"
        (click)="
          this._auth.isAuthenticated()
            ? toggleUserDropdown()
            : navigateToLogin()
        "
      >
        <svg
          *ngIf="this._auth.isAuthenticated()"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 448 512"
        >
          <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
          <path
            d="M224 256A128 128 0 1 0 224 0a128 128 0 1 0 0 256zm-45.7 48C79.8 304 0 383.8 0 482.3C0 498.7 13.3 512 29.7 512l388.6 0c16.4 0 29.7-13.3 29.7-29.7C448 383.8 368.2 304 269.7 304l-91.4 0z"
          />
        </svg>
        <span class="text-white px-2" *ngIf="!this._auth.isAuthenticated()">{{
          "header.signin" | transloco
        }}</span>
      </div>
      <div
        @fadeIn
        class="dropdown-menu"
        *ngIf="isDropdownVisible"
        (mouseleave)="hideDropdown()"
      >
        <div class="d-flex align-items-center justify-content-start gap-3 p-2">
          <img
            src="../../../../assets/images/sidebar_icons/profile_photo.svg"
            width="40"
            alt="USER"
          />
          <div class="d-flex flex-column">
            <h6 class="m-0 text-capitalize">{{ username }}</h6>
            <small>
              {{
                role == "USER"
                  ? ("header.user" | transloco)
                  : ("header.admin" | transloco)
              }}</small
            >
          </div>
        </div>
        <hr />
        <ul class="m-0 px-2">
          <li>
            <p
              routerLink="profile"
              routerLinkActive="loggedin-link-active"
              class="p-0 m-0 pb-2"
            >
              {{ "sidebar.profile" | transloco }}
            </p>
          </li>
          <li
            class="d-flex justify-content-between align-items-center pb-2"
            routerLink="balance"
            routerLinkActive="loggedin-link-active"
          >
            <p class="p-0 m-0">
              <span>{{ "sidebar.balance" | transloco }}</span>
            </p>
            <span>₾ {{ balance }}</span>
          </li>
          <li>
            <p
              routerLink="history"
              routerLinkActive="loggedin-link-active"
              class="p-0 m-0"
            >
              <span>{{ "sidebar.history" | transloco }}</span>
            </p>
          </li>
        </ul>
        <hr />
        <ul class="m-0 px-2">
          <li class="d-flex justify-content-between align-items-center pb-2">
            <p class="p-0 m-0">{{ "header.language" | transloco }}</p>
            <div class="lang-drop">
              <div class="sound">
                <div class="main" (click)="dropdownOpen()">
                  <img
                    [src]="selectedLanguage.path"
                    width="20"
                    alt="language"
                  />
                </div>
                <div class="content" *ngIf="contentDropdown">
                  <ul>
                    <li
                      class="mb-2"
                      *ngFor="let icon of filteredIcons()"
                      (click)="changeLanguage(icon)"
                    >
                      <img [src]="icon.path" alt="Language" />
                    </li>
                  </ul>
                </div>
              </div>
            </div>
          </li>
          <li>
            <p (click)="logout()" class="p-0 m-0">
              <span>{{ "sidebar.logout" | transloco }}</span>
            </p>
          </li>
        </ul>
      </div>
    </div>
  </div>
</div>

----------------------------------------


=== File: src/app/dashboard/components/header/header.component.scss [STYLE] ===
----------------------------------------
.main {
  img {
    cursor: pointer;
    width: 40px;
  }
}

ul {
  padding: 0;
  li {
    list-style: none;
    cursor: pointer;
    img {
      width: 40px;
    }
  }
}

.content {
  position: absolute;
}

.dropdown-user {
  position: relative;
  svg {
    width: 16px;
    height: 16px;
    fill: white;
  }
  .user-div {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 7px 12px;
    background-color: #3b59f3;
    margin-left: 5px;
    border-radius: 7px;
    cursor: pointer;
    &:hover {
      background-color: #0e33ed;
    }
    i {
      color: white;
    }
  }
  .dropdown-menu {
    position: absolute;
    top: 100%;
    right: 0;
    display: block;
    background-color: white;
    border: 1px solid #ddd;
    padding: 15px;
    margin: 0;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    user-select: none;
    min-width: 250px;
  }
}

.lang-drop {
  position: relative;
  img {
    height: 25px !important;
    width: 25px !important;
    object-fit: contain;
  }
  .content {
    right: calc(100% + 10px);
    top: 0;
  }
}

----------------------------------------


=== File: src/app/dashboard/components/header/header.component.ts [COMPONENT] ===
----------------------------------------
import {
  Component,
  EventEmitter,
  HostListener,
  Inject,
  OnInit,
  Output,
  PLATFORM_ID,
} from '@angular/core';
import { AuthService } from '../../../shared/services/auth.service';
import { Router } from '@angular/router';
import { TranslocoService } from '@ngneat/transloco';
import { language } from '../../../shared/data/language';
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { BalanceService } from '../../../shared/services/balance.service';
import { HttpService } from '../../../shared/services/http.service';
import { url } from '../../../shared/data/api';
import { animate, style, transition, trigger } from '@angular/animations';

@Component({
  selector: 'app-header',
  templateUrl: './header.component.html',
  animations: [
    trigger('fadeIn', [
      transition(':enter', [
        style({ opacity: 0 }),
        animate('0.2s ease-in', style({ opacity: 1 })),
      ]),
    ]),
  ],
  styleUrl: './header.component.scss',
})
export class HeaderComponent implements OnInit {
  @Output() sidebarToggle = new EventEmitter<void>();
  isLoggedIn: boolean = false;
  availableLangs!: string[] | { id: string; label: string }[];
  activeLang!: string;

  isSmallScreen: boolean = false;

  balance: any;
  userInfo: any;
  username!: string;
  role!: string;
  isDropdownVisible: boolean = false;

  constructor(
    private _router: Router,
    public _auth: AuthService,
    private _translate: TranslocoService,
    private _balance: BalanceService,
    private _api: HttpService
  ) {}

  ngOnInit() {
    this.activeLang = this._translate.getActiveLang();
    this.availableLangs = this._translate.getAvailableLangs();
    if (this._auth.isAuthenticated()) {
      this.userInfo = this._auth.userInfo();
      this.username = this.userInfo.email;
      const usernameSplit = this.username.split('@')[0];
      // const usernameInitial = this.username.charAt(0);
      this.username = `${usernameSplit}`;
      this.role = this.userInfo.role;
      this._api.get(url.user, this.userInfo.UserId).subscribe(
        (res) => {
          this.userInfo = JSON.parse(res);
          this._balance.setBalance(this.userInfo.balance);
          this._balance
            .getBalance()
            .subscribe((value) => (this.balance = value));
        },
        (err) => {
          console.log(err);
        }
      );
    }
    if (localStorage.getItem('selectedLanguage') == 'en') {
      this.selectedLanguage = this.languages[1];
    }
    this.checkScreenWidth();
  }

  languages: { path: string; key: string }[] = language;
  selectedLanguage: { path: string; key: string } = this.languages[0];
  contentDropdown: boolean = false;

  dropdownOpen() {
    this.contentDropdown = !this.contentDropdown;
  }

  filteredIcons() {
    return this.languages.filter(
      (icon) => icon.key !== this.selectedLanguage.key
    );
  }

  changeLanguage(icon: { path: string; key: string }) {
    this.selectedLanguage = icon;
    this._translate.setActiveLang(this.selectedLanguage.key);
    this.contentDropdown = !this.contentDropdown;
    this.activeLang = this.selectedLanguage.key;
    localStorage.setItem('selectedLanguage', this.selectedLanguage.key);
  }

  navigateToLogin() {
    this._router.navigate(['/sign-in']);
  }

  onToggleSidebar() {
    this.sidebarToggle.emit();
  }

  toggleUserDropdown() {
    this.isDropdownVisible = !this.isDropdownVisible;
  }

  showDropdown() {
    this.isDropdownVisible = true;
  }

  hideDropdown() {
    this.isDropdownVisible = false;
  }

  navigateToHome() {
    this._router.navigate(['/home']);
  }

  @HostListener('window:resize', ['$event'])
  onResize(event: Event): void {
    this.checkScreenWidth();
  }

  private checkScreenWidth(): void {
    this.isSmallScreen = window.innerWidth < 778;
  }

  logout() {
    this._auth.logOut();
  }
}

----------------------------------------


=== File: src/app/dashboard/components/sidebar/sidebar.component.html [HTML] ===
----------------------------------------
<div
  class="d-flex flex-column flex-shrink-0 p-2 bg-white overflow-y-auto"
  style="height: calc(100vh - 56px); overflow-x: hidden"
>
  <div>
    <ul class="nav nav-pills flex-column mb-auto">
      <li class="nav-item">
        <p routerLink="translate" routerLinkActive="active" class="nav-link">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
            <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
            <path
              d="M51.7 295.1l31.7 6.3c7.9 1.6 16-.9 21.7-6.6l15.4-15.4c11.6-11.6 31.1-8.4 38.4 6.2l9.3 18.5c4.8 9.6 14.6 15.7 25.4 15.7c15.2 0 26.1-14.6 21.7-29.2l-6-19.9c-4.6-15.4 6.9-30.9 23-30.9l2.3 0c13.4 0 25.9-6.7 33.3-17.8l10.7-16.1c5.6-8.5 5.3-19.6-.8-27.7l-16.1-21.5c-10.3-13.7-3.3-33.5 13.4-37.7l17-4.3c7.5-1.9 13.6-7.2 16.5-14.4l16.4-40.9C303.4 52.1 280.2 48 256 48C141.1 48 48 141.1 48 256c0 13.4 1.3 26.5 3.7 39.1zm407.7 4.6c-3-.3-6-.1-9 .8l-15.8 4.4c-6.7 1.9-13.8-.9-17.5-6.7l-2-3.1c-6-9.4-16.4-15.1-27.6-15.1s-21.6 5.7-27.6 15.1l-6.1 9.5c-1.4 2.2-3.4 4.1-5.7 5.3L312 330.1c-18.1 10.1-25.5 32.4-17 51.3l5.5 12.4c8.6 19.2 30.7 28.5 50.5 21.1l2.6-1c10-3.7 21.3-2.2 29.9 4.1l1.5 1.1c37.2-29.5 64.1-71.4 74.4-119.5zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zm144.5 92.1c-2.1 8.6 3.1 17.3 11.6 19.4l32 8c8.6 2.1 17.3-3.1 19.4-11.6s-3.1-17.3-11.6-19.4l-32-8c-8.6-2.1-17.3 3.1-19.4 11.6zm92-20c-2.1 8.6 3.1 17.3 11.6 19.4s17.3-3.1 19.4-11.6l8-32c2.1-8.6-3.1-17.3-11.6-19.4s-17.3 3.1-19.4 11.6l-8 32zM343.2 113.7c-7.9-4-17.5-.7-21.5 7.2l-16 32c-4 7.9-.7 17.5 7.2 21.5s17.5 .7 21.5-7.2l16-32c4-7.9 .7-17.5-7.2-21.5z"
            />
          </svg>
          <span *ngIf="!sideNavCollapsed() || isSmallScreen" class="ms-2">{{
            "sidebar.translate" | transloco
          }}</span>
        </p>
      </li>
      <li>
        <p routerLink="description" routerLinkActive="active" class="nav-link">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
            <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
            <path
              d="M168 80c-13.3 0-24 10.7-24 24l0 304c0 8.4-1.4 16.5-4.1 24L440 432c13.3 0 24-10.7 24-24l0-304c0-13.3-10.7-24-24-24L168 80zM72 480c-39.8 0-72-32.2-72-72L0 112C0 98.7 10.7 88 24 88s24 10.7 24 24l0 296c0 13.3 10.7 24 24 24s24-10.7 24-24l0-304c0-39.8 32.2-72 72-72l272 0c39.8 0 72 32.2 72 72l0 304c0 39.8-32.2 72-72 72L72 480zM176 136c0-13.3 10.7-24 24-24l96 0c13.3 0 24 10.7 24 24l0 80c0 13.3-10.7 24-24 24l-96 0c-13.3 0-24-10.7-24-24l0-80zm200-24l32 0c13.3 0 24 10.7 24 24s-10.7 24-24 24l-32 0c-13.3 0-24-10.7-24-24s10.7-24 24-24zm0 80l32 0c13.3 0 24 10.7 24 24s-10.7 24-24 24l-32 0c-13.3 0-24-10.7-24-24s10.7-24 24-24zM200 272l208 0c13.3 0 24 10.7 24 24s-10.7 24-24 24l-208 0c-13.3 0-24-10.7-24-24s10.7-24 24-24zm0 80l208 0c13.3 0 24 10.7 24 24s-10.7 24-24 24l-208 0c-13.3 0-24-10.7-24-24s10.7-24 24-24z"
            />
          </svg>
          <span *ngIf="!sideNavCollapsed() || isSmallScreen" class="ms-2">{{
            "sidebar.description" | transloco
          }}</span>
        </p>
      </li>
      <li>
        <p routerLink="copyright" routerLinkActive="active" class="nav-link">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512">
            <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
            <path
              d="M64 64l0 288 512 0 0-288L64 64zM0 64C0 28.7 28.7 0 64 0L576 0c35.3 0 64 28.7 64 64l0 288c0 35.3-28.7 64-64 64L64 416c-35.3 0-64-28.7-64-64L0 64zM128 448l384 0c17.7 0 32 14.3 32 32s-14.3 32-32 32l-384 0c-17.7 0-32-14.3-32-32s14.3-32 32-32z"
            />
          </svg>
          <span *ngIf="!sideNavCollapsed() || isSmallScreen" class="ms-2">{{
            "sidebar.copyright" | transloco
          }}</span>
        </p>
      </li>
      <li>
        <p routerLink="script" routerLinkActive="active" class="nav-link">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
            <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
            <path
              d="M0 96C0 60.7 28.7 32 64 32l384 0c35.3 0 64 28.7 64 64l0 320c0 35.3-28.7 64-64 64L64 480c-35.3 0-64-28.7-64-64L0 96zM48 368l0 32c0 8.8 7.2 16 16 16l32 0c8.8 0 16-7.2 16-16l0-32c0-8.8-7.2-16-16-16l-32 0c-8.8 0-16 7.2-16 16zm368-16c-8.8 0-16 7.2-16 16l0 32c0 8.8 7.2 16 16 16l32 0c8.8 0 16-7.2 16-16l0-32c0-8.8-7.2-16-16-16l-32 0zM48 240l0 32c0 8.8 7.2 16 16 16l32 0c8.8 0 16-7.2 16-16l0-32c0-8.8-7.2-16-16-16l-32 0c-8.8 0-16 7.2-16 16zm368-16c-8.8 0-16 7.2-16 16l0 32c0 8.8 7.2 16 16 16l32 0c8.8 0 16-7.2 16-16l0-32c0-8.8-7.2-16-16-16l-32 0zM48 112l0 32c0 8.8 7.2 16 16 16l32 0c8.8 0 16-7.2 16-16l0-32c0-8.8-7.2-16-16-16L64 96c-8.8 0-16 7.2-16 16zM416 96c-8.8 0-16 7.2-16 16l0 32c0 8.8 7.2 16 16 16l32 0c8.8 0 16-7.2 16-16l0-32c0-8.8-7.2-16-16-16l-32 0zM160 128l0 64c0 17.7 14.3 32 32 32l128 0c17.7 0 32-14.3 32-32l0-64c0-17.7-14.3-32-32-32L192 96c-17.7 0-32 14.3-32 32zm32 160c-17.7 0-32 14.3-32 32l0 64c0 17.7 14.3 32 32 32l128 0c17.7 0 32-14.3 32-32l0-64c0-17.7-14.3-32-32-32l-128 0z"
            />
          </svg>
          <span *ngIf="!sideNavCollapsed() || isSmallScreen" class="ms-2">{{
            "sidebar.script" | transloco
          }}</span>
        </p>
      </li>
      <li>
        <p routerLink="mail" routerLinkActive="active" class="nav-link">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
            <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
            <path
              d="M64 112c-8.8 0-16 7.2-16 16l0 22.1L220.5 291.7c20.7 17 50.4 17 71.1 0L464 150.1l0-22.1c0-8.8-7.2-16-16-16L64 112zM48 212.2L48 384c0 8.8 7.2 16 16 16l384 0c8.8 0 16-7.2 16-16l0-171.8L322 328.8c-38.4 31.5-93.7 31.5-132 0L48 212.2zM0 128C0 92.7 28.7 64 64 64l384 0c35.3 0 64 28.7 64 64l0 256c0 35.3-28.7 64-64 64L64 448c-35.3 0-64-28.7-64-64L0 128z"
            />
          </svg>
          <span *ngIf="!sideNavCollapsed() || isSmallScreen" class="ms-2">{{
            "sidebar.mail" | transloco
          }}</span>
        </p>
      </li>
    </ul>
    <div>
      <hr />
      <ul class="nav nav-pills flex-column mb-auto">
        <li class="nav-item">
          <p routerLink="lawyer" routerLinkActive="active" class="nav-link">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
              <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
              <path
                d="M240.1 4.2c9.8-5.6 21.9-5.6 31.8 0l171.8 98.1L448 104l0 .9 47.9 27.4c12.6 7.2 18.8 22 15.1 36s-16.4 23.8-30.9 23.8L32 192c-14.5 0-27.2-9.8-30.9-23.8s2.5-28.8 15.1-36L64 104.9l0-.9 4.4-1.6L240.1 4.2zM64 224l64 0 0 192 40 0 0-192 64 0 0 192 48 0 0-192 64 0 0 192 40 0 0-192 64 0 0 196.3c.6 .3 1.2 .7 1.8 1.1l48 32c11.7 7.8 17 22.4 12.9 35.9S494.1 512 480 512L32 512c-14.1 0-26.5-9.2-30.6-22.7s1.1-28.1 12.9-35.9l48-32c.6-.4 1.2-.7 1.8-1.1L64 224z"
              />
            </svg>
            <span *ngIf="!sideNavCollapsed() || isSmallScreen" class="ms-2">{{
              "sidebar.chats.lawyer" | transloco
            }}</span>
          </p>
        </li>
        <li>
          <p (click)="onFinance()" class="nav-link">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
              <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
              <path
                d="M160 80c0-26.5 21.5-48 48-48l32 0c26.5 0 48 21.5 48 48l0 352c0 26.5-21.5 48-48 48l-32 0c-26.5 0-48-21.5-48-48l0-352zM0 272c0-26.5 21.5-48 48-48l32 0c26.5 0 48 21.5 48 48l0 160c0 26.5-21.5 48-48 48l-32 0c-26.5 0-48-21.5-48-48L0 272zM368 96l32 0c26.5 0 48 21.5 48 48l0 288c0 26.5-21.5 48-48 48l-32 0c-26.5 0-48-21.5-48-48l0-288c0-26.5 21.5-48 48-48z"
              />
            </svg>
            <span *ngIf="!sideNavCollapsed() || isSmallScreen" class="ms-2">{{
              "sidebar.chats.finance" | transloco
            }}</span>
          </p>
        </li>
      </ul>
    </div>
  </div>

  <div *ngIf="this._auth.isAuthenticated()" class="mt-auto">
    <hr />
    <ul class="nav nav-pills flex-column mb-auto">
      <li class="nav-item">
        <p
          routerLink="balance"
          routerLinkActive="loggedin-link-active"
          class="nav-link loggedin-link"
        >
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
            <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
            <path
              d="M320 96L192 96 144.6 24.9C137.5 14.2 145.1 0 157.9 0L354.1 0c12.8 0 20.4 14.2 13.3 24.9L320 96zM192 128l128 0c3.8 2.5 8.1 5.3 13 8.4C389.7 172.7 512 250.9 512 416c0 53-43 96-96 96L96 512c-53 0-96-43-96-96C0 250.9 122.3 172.7 179 136.4c0 0 0 0 0 0s0 0 0 0c4.8-3.1 9.2-5.9 13-8.4zm84 88c0-11-9-20-20-20s-20 9-20 20l0 14c-7.6 1.7-15.2 4.4-22.2 8.5c-13.9 8.3-25.9 22.8-25.8 43.9c.1 20.3 12 33.1 24.7 40.7c11 6.6 24.7 10.8 35.6 14l1.7 .5c12.6 3.8 21.8 6.8 28 10.7c5.1 3.2 5.8 5.4 5.9 8.2c.1 5-1.8 8-5.9 10.5c-5 3.1-12.9 5-21.4 4.7c-11.1-.4-21.5-3.9-35.1-8.5c-2.3-.8-4.7-1.6-7.2-2.4c-10.5-3.5-21.8 2.2-25.3 12.6s2.2 21.8 12.6 25.3c1.9 .6 4 1.3 6.1 2.1c0 0 0 0 0 0s0 0 0 0c8.3 2.9 17.9 6.2 28.2 8.4l0 14.6c0 11 9 20 20 20s20-9 20-20l0-13.8c8-1.7 16-4.5 23.2-9c14.3-8.9 25.1-24.1 24.8-45c-.3-20.3-11.7-33.4-24.6-41.6c-11.5-7.2-25.9-11.6-37.1-15c0 0 0 0 0 0l-.7-.2c-12.8-3.9-21.9-6.7-28.3-10.5c-5.2-3.1-5.3-4.9-5.3-6.7c0-3.7 1.4-6.5 6.2-9.3c5.4-3.2 13.6-5.1 21.5-5c9.6 .1 20.2 2.2 31.2 5.2c10.7 2.8 21.6-3.5 24.5-14.2s-3.5-21.6-14.2-24.5c-6.5-1.7-13.7-3.4-21.1-4.7l0-13.9z"
            />
          </svg>
          <span *ngIf="!sideNavCollapsed() || isSmallScreen" class="ms-2"
            >{{ "sidebar.balance" | transloco }}: ₾ {{ balance }}</span
          >
        </p>
      </li>
      <li>
        <p
          routerLink="history"
          routerLinkActive="loggedin-link-active"
          class="nav-link loggedin-link"
        >
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
            <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
            <path
              d="M121 32C91.6 32 66 52 58.9 80.5L1.9 308.4C.6 313.5 0 318.7 0 323.9L0 416c0 35.3 28.7 64 64 64l384 0c35.3 0 64-28.7 64-64l0-92.1c0-5.2-.6-10.4-1.9-15.5l-57-227.9C446 52 420.4 32 391 32L121 32zm0 64l270 0 48 192-51.2 0c-12.1 0-23.2 6.8-28.6 17.7l-14.3 28.6c-5.4 10.8-16.5 17.7-28.6 17.7l-120.4 0c-12.1 0-23.2-6.8-28.6-17.7l-14.3-28.6c-5.4-10.8-16.5-17.7-28.6-17.7L73 288 121 96z"
            />
          </svg>
          <span *ngIf="!sideNavCollapsed() || isSmallScreen" class="ms-2">{{
            "sidebar.history" | transloco
          }}</span>
        </p>
      </li>
      <li>
        <p
          routerLink="profile"
          routerLinkActive="loggedin-link-active"
          class="nav-link loggedin-link"
        >
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
            <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
            <path
              d="M495.9 166.6c3.2 8.7 .5 18.4-6.4 24.6l-43.3 39.4c1.1 8.3 1.7 16.8 1.7 25.4s-.6 17.1-1.7 25.4l43.3 39.4c6.9 6.2 9.6 15.9 6.4 24.6c-4.4 11.9-9.7 23.3-15.8 34.3l-4.7 8.1c-6.6 11-14 21.4-22.1 31.2c-5.9 7.2-15.7 9.6-24.5 6.8l-55.7-17.7c-13.4 10.3-28.2 18.9-44 25.4l-12.5 57.1c-2 9.1-9 16.3-18.2 17.8c-13.8 2.3-28 3.5-42.5 3.5s-28.7-1.2-42.5-3.5c-9.2-1.5-16.2-8.7-18.2-17.8l-12.5-57.1c-15.8-6.5-30.6-15.1-44-25.4L83.1 425.9c-8.8 2.8-18.6 .3-24.5-6.8c-8.1-9.8-15.5-20.2-22.1-31.2l-4.7-8.1c-6.1-11-11.4-22.4-15.8-34.3c-3.2-8.7-.5-18.4 6.4-24.6l43.3-39.4C64.6 273.1 64 264.6 64 256s.6-17.1 1.7-25.4L22.4 191.2c-6.9-6.2-9.6-15.9-6.4-24.6c4.4-11.9 9.7-23.3 15.8-34.3l4.7-8.1c6.6-11 14-21.4 22.1-31.2c5.9-7.2 15.7-9.6 24.5-6.8l55.7 17.7c13.4-10.3 28.2-18.9 44-25.4l12.5-57.1c2-9.1 9-16.3 18.2-17.8C227.3 1.2 241.5 0 256 0s28.7 1.2 42.5 3.5c9.2 1.5 16.2 8.7 18.2 17.8l12.5 57.1c15.8 6.5 30.6 15.1 44 25.4l55.7-17.7c8.8-2.8 18.6-.3 24.5 6.8c8.1 9.8 15.5 20.2 22.1 31.2l4.7 8.1c6.1 11 11.4 22.4 15.8 34.3zM256 336a80 80 0 1 0 0-160 80 80 0 1 0 0 160z"
            />
          </svg>
          <span *ngIf="!sideNavCollapsed() || isSmallScreen" class="ms-2">{{
            "sidebar.profile" | transloco
          }}</span>
        </p>
      </li>
      <li>
        <p (click)="logout()" class="nav-link loggedin-link">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
            <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
            <path
              d="M377.9 105.9L500.7 228.7c7.2 7.2 11.3 17.1 11.3 27.3s-4.1 20.1-11.3 27.3L377.9 406.1c-6.4 6.4-15 9.9-24 9.9c-18.7 0-33.9-15.2-33.9-33.9l0-62.1-128 0c-17.7 0-32-14.3-32-32l0-64c0-17.7 14.3-32 32-32l128 0 0-62.1c0-18.7 15.2-33.9 33.9-33.9c9 0 17.6 3.6 24 9.9zM160 96L96 96c-17.7 0-32 14.3-32 32l0 256c0 17.7 14.3 32 32 32l64 0c17.7 0 32 14.3 32 32s-14.3 32-32 32l-64 0c-53 0-96-43-96-96L0 128C0 75 43 32 96 32l64 0c17.7 0 32 14.3 32 32s-14.3 32-32 32z"
            />
          </svg>
          <span *ngIf="!sideNavCollapsed() || isSmallScreen" class="ms-2">{{
            "sidebar.logout" | transloco
          }}</span>
        </p>
      </li>
    </ul>
  </div>
</div>

----------------------------------------


=== File: src/app/dashboard/components/sidebar/sidebar.component.scss [STYLE] ===
----------------------------------------
.loggedin-link:hover,
.loggedin-link-active {
  background-color: #3b5af328 !important;
  fill: black !important;
}

*::-webkit-scrollbar {
  height: 50%;
  width: 0.2rem !important;
  background-color: #eeeeee !important;
  border-radius: 1rem;
}

*::-webkit-scrollbar-thumb {
  border-radius: 1rem;
  background: #b4b4b4 !important;
}

----------------------------------------


=== File: src/app/dashboard/components/sidebar/sidebar.component.ts [COMPONENT] ===
----------------------------------------
import {
  Component,
  EventEmitter,
  HostListener,
  Inject,
  Input,
  OnInit,
  Output,
  PLATFORM_ID,
  signal,
} from '@angular/core';
import { AuthService } from '../../../shared/services/auth.service';
import { BalanceService } from '../../../shared/services/balance.service';
import { HttpService } from '../../../shared/services/http.service';
import { url } from '../../../shared/data/api';
import { ToastrService } from 'ngx-toastr';
import { animate, style, transition, trigger } from '@angular/animations';
import { isPlatformBrowser } from '@angular/common';

@Component({
  selector: 'app-sidebar',
  templateUrl: './sidebar.component.html',
  styleUrl: './sidebar.component.scss',
})
export class SidebarComponent implements OnInit {
  @Output() sidebarToggle = new EventEmitter<void>();
  @Input() set collapsed(val: boolean) {
    this.sideNavCollapsed.set(val);
  }
  sideNavCollapsed = signal(false);
  isSmallScreen: boolean = false;

  public fakeToken: any;

  isLoggedIn: boolean = false;
  balance: any;
  userID: string = '';
  userInfo: any;

  constructor(
    public _auth: AuthService,
    private _api: HttpService,
    private _balance: BalanceService,
    private _toastr: ToastrService
  ) {}

  ngOnInit() {
    // this.isLoggedIn = this._auth.isAuthenticated();
    if (this._auth.isAuthenticated()) {
      const user = this._auth.userInfo();
      this.userID = user.UserId;
      this._api.get(url.user, this.userID).subscribe(
        (res) => {
          this.userInfo = JSON.parse(res);
          this._balance.setBalance(this.userInfo.balance);
          this._balance
            .getBalance()
            .subscribe((value) => (this.balance = value));
        },
        (err) => {
          console.log(err);
        }
      );
    }
    this.checkScreenWidth();
  }

  onFinance() {
    this._toastr.info('სერვისი მალე დაემატება', 'Coming Soon...');
  }

  onToggleSidebar() {
    this.sidebarToggle.emit();
  }

  logout() {
    this._auth.logOut();
  }

  @HostListener('window:resize', ['$event'])
  onResize(event: Event): void {
    this.checkScreenWidth();
  }

  private checkScreenWidth(): void {
    this.isSmallScreen = window.innerWidth < 778;
  }
}

----------------------------------------


=== File: src/app/dashboard/dashboard.component.html [HTML] ===
----------------------------------------
<div class="dahsboard-main-bg">
  <app-header (sidebarToggle)="!isSmallScreen ? collapsed.set(!collapsed()) : toggleSidebar()"></app-header>
  <div class="d-flex">
    <div class="sidenav-container position-relative" [style.width]="!isSmallScreen ? sidenavWidth() : ''" [ngClass]="{ hidden: !sidebarShown && isSmallScreen }">
      <app-sidebar [collapsed]="collapsed()"></app-sidebar>
    </div>
    <div class="w-100">
      <router-outlet></router-outlet>
    </div>
  </div>
</div>


----------------------------------------


=== File: src/app/dashboard/dashboard.component.scss [STYLE] ===
----------------------------------------

----------------------------------------


=== File: src/app/dashboard/dashboard.component.ts [COMPONENT] ===
----------------------------------------
import {
  ChangeDetectionStrategy,
  Component,
  computed,
  HostListener,
  Inject,
  OnInit,
  PLATFORM_ID,
  signal,
} from '@angular/core';
import { AuthService } from '../shared/services/auth.service';
import { HttpService } from '../shared/services/http.service';
import { url } from '../shared/data/api';
import { BalanceService } from '../shared/services/balance.service';
import { FreeServiceService } from '../shared/services/free-service.service';
import { isPlatformBrowser } from '@angular/common';
import { Subscription } from 'rxjs';
import { SidebarService } from '../shared/services/component/sidebar.service';
import { NavigationEnd, Router } from '@angular/router';
import { MatDialog } from '@angular/material/dialog';
import { AuthRequireComponent } from '../shared/components/auth-require/auth-require.component';

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrl: './dashboard.component.scss',
})
export class DashboardComponent implements OnInit {
  private dialogShownKey = 'dialogShown';

  isLoggedIn: boolean = false;
  isSmallScreen: boolean = false;
  sidebarShown: boolean = false;
  private subscription!: Subscription;
  public fakeToken: any;

  collapsed = signal(true);
  sidenavWidth = computed(() => (this.collapsed() ? '72px' : '250px'));

  constructor(
    private _auth: AuthService,
    private _api: HttpService,
    private router: Router,
    private _free: FreeServiceService,
    private _dialog: MatDialog
  ) {}

  ngOnInit(): void {
    // this.isLoggedIn = this._auth.isAuthenticated();
    if (!this._auth.isAuthenticated()) {
      const isDialogShown = sessionStorage.getItem(this.dialogShownKey);
      if (!isDialogShown) {
        this._dialog.open(AuthRequireComponent);
        sessionStorage.setItem(this.dialogShownKey, 'true');
      }
      const data = {
        username: 'free@gmail.com',
        password: '123',
      };
      this._api.postAuth(url.login, data).subscribe(
        (res: any) => {
          this._free.setToken(res.token);
          this._free.getToken().subscribe((value) => (this.fakeToken = value));
        },
        (err) => {
          console.log('Not Logged In');
        }
      );
    }
    this.checkScreenWidth();
    this.router.events.subscribe((event) => {
      if (event instanceof NavigationEnd) {
        this.hideSidebarOnRouteChange();
      }
    });
  }

  @HostListener('window:resize', ['$event'])
  onResize(event: Event): void {
    this.checkScreenWidth();
  }

  private checkScreenWidth(): void {
    this.isSmallScreen = window.innerWidth <= 777;
  }

  toggleSidebar(): void {
    this.sidebarShown = !this.sidebarShown;
  }

  private hideSidebarOnRouteChange(): void {
    if (this.isSmallScreen) {
      this.sidebarShown = false;
    }
  }
}

----------------------------------------


=== File: src/app/dashboard/dashboard.module.ts [MODULE] ===
----------------------------------------
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';
import {MatMenuModule} from '@angular/material/menu';
import {MatIconModule} from '@angular/material/icon';
import {MatButtonModule} from '@angular/material/button';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { DashboardComponent } from './dashboard.component';
import { SidebarComponent } from './components/sidebar/sidebar.component';
import { HeaderComponent } from './components/header/header.component';
import { CopyrightComponent } from './modules/copyright/copyright.component';
import { ScriptComponent } from './modules/script/script.component';
import { DescriptionComponent } from './modules/description/description.component';
import { ProfileComponent } from './user/profile/profile.component';
import { TranslocoRootModule } from '../transloco-root.module';
import { BalanceComponent } from './user/balance/balance.component';
import { TextComponent } from './modules/translate-options/text/text.component';
import { ImageComponent } from './modules/translate-options/image/image.component';
import { DocComponent } from './modules/translate-options/doc/doc.component';
import { MatSelectModule } from '@angular/material/select';
import { MatFormFieldModule } from '@angular/material/form-field';
import { NgxMatSelectSearchModule } from 'ngx-mat-select-search';
import { LawyerComponent } from './chats/lawyer/lawyer.component';
import { FinanceComponent } from './chats/finance/finance.component';
import { GreetingComponent } from '../shared/components/greeting/greeting.component';
import { MailComponent } from './modules/mail/mail.component';
import { TranslateComponent } from './modules/translate/translate.component';
import { HistoryComponent } from './user/history/history.component';
import { AuthRequireComponent } from '../shared/components/auth-require/auth-require.component';
import { AccountDeleteComponent } from './user/account-delete/account-delete.component';

@NgModule({
  declarations: [
    DashboardComponent,
    SidebarComponent,
    HeaderComponent,
    CopyrightComponent,
    ScriptComponent,
    DescriptionComponent,
    ProfileComponent,
    BalanceComponent,
    TextComponent,
    ImageComponent,
    DocComponent,
    LawyerComponent,
    MailComponent,
    FinanceComponent,
    TranslateComponent,
    GreetingComponent,
    HistoryComponent,
    AuthRequireComponent,
    AccountDeleteComponent
  ],
  imports: [
    ReactiveFormsModule,
    CommonModule,
    FormsModule,
    RouterModule,
    TranslocoRootModule,
    MatSelectModule,
    MatFormFieldModule,
    NgxMatSelectSearchModule,
    MatMenuModule,
    MatIconModule,
    MatButtonModule
  ],
})
export class DashboardModule {}

----------------------------------------


=== File: src/app/dashboard/modules/copyright/copyright.component.html [HTML] ===
----------------------------------------
<div class="content-component px-md-5 px-sm-1 pb-5">
  <app-greeting
    [title]="'sidebar.copyright' | transloco"
    [description1]="'advertiser.des1' | transloco"
    [description2]="'advertiser.des2' | transloco"
  ></app-greeting>
  <div class="container">
    <form [formGroup]="chatForm" (ngSubmit)="sendText()" class="mb-5">
      <div
        class="input-search-container d-flex align-items-center justify-content-center flex-wrap flex-lg-nowrap position-relative"
      >
        <div
          class="d-flex align-items-center justify-content-start flex-grow-1 copyright-input"
        >
          <div class="photo-upload">
            <label
              for="file-upload"
              class="custom-file-upload px-3"
              title="Add an image (Format: png, jpeg, webp, gif)"
            >
              <svg
                class="me-2"
                xmlns="http://www.w3.org/2000/svg"
                [ngClass]="{
                  'error-text':
                    chatForm.get('file')?.invalid &&
                    (chatForm.get('file')?.touched ||
                      chatForm.get('file')?.dirty ||
                      notUploadedFile)
                }"
                viewBox="0 0 384 512"
              >
                <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
                <path
                  d="M64 464c-8.8 0-16-7.2-16-16L48 64c0-8.8 7.2-16 16-16l160 0 0 80c0 17.7 14.3 32 32 32l80 0 0 288c0 8.8-7.2 16-16 16L64 464zM64 0C28.7 0 0 28.7 0 64L0 448c0 35.3 28.7 64 64 64l256 0c35.3 0 64-28.7 64-64l0-293.5c0-17-6.7-33.3-18.7-45.3L274.7 18.7C262.7 6.7 246.5 0 229.5 0L64 0zm96 256a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zm69.2 46.9c-3-4.3-7.9-6.9-13.2-6.9s-10.2 2.6-13.2 6.9l-41.3 59.7-11.9-19.1c-2.9-4.7-8.1-7.5-13.6-7.5s-10.6 2.8-13.6 7.5l-40 64c-3.1 4.9-3.2 11.1-.4 16.2s8.2 8.2 14 8.2l48 0 32 0 40 0 72 0c6 0 11.4-3.3 14.2-8.6s2.4-11.6-1-16.5l-72-104z"
                />
              </svg>

              <span
                class="attach-file-text"
                [ngClass]="{
                  'error-text':
                    chatForm.get('file')?.invalid &&
                    (chatForm.get('file')?.touched ||
                      chatForm.get('file')?.dirty ||
                      notUploadedFile)
                }"
                >{{ "attach-file" | transloco }}</span
              >
            </label>
            <input
              type="file"
              id="file-upload"
              formControlName="file"
              accept=".png, .jpeg, .webp, .gif"
              (change)="onFileSelected($event)"
            />
          </div>
          <input
            type="text"
            [placeholder]="'productname' | transloco"
            formControlName="text"
            class="flex-grow-1"
            [ngClass]="{
              'error-place':
                chatForm.get('text')?.invalid &&
                (chatForm.get('text')?.touched ||
                  chatForm.get('text')?.dirty ||
                  notUploadedFile)
            }"
          />
        </div>

        <div class="ms-sm-2 text-center btn-mt-div">
          <button
            type="submit"
            class="content-btn mx-auto d-flex gap-2 px-4"
            [title]="'send' | transloco"
          >
            <span>{{ "send" | transloco }}</span
            ><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
              <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
              <path
                d="M498.1 5.6c10.1 7 15.4 19.1 13.5 31.2l-64 416c-1.5 9.7-7.4 18.2-16 23s-18.9 5.4-28 1.6L284 427.7l-68.5 74.1c-8.9 9.7-22.9 12.9-35.2 8.1S160 493.2 160 480l0-83.6c0-4 1.5-7.8 4.2-10.8L331.8 202.8c5.8-6.3 5.6-16-.4-22s-15.7-6.4-22-.7L106 360.8 17.7 316.6C7.1 311.3 .3 300.7 0 288.9s5.9-22.8 16.1-28.7l448-256c10.7-6.1 23.9-5.5 34 1.4z"
              />
            </svg>
          </button>
        </div>
      </div>
    </form>
    <div class="response-container">
      <div *ngIf="displayUploadedImageTextArea" class="upload-photo-container">
        <img
          [src]="displayUploadedImageTextArea"
          alt="Uploaded Image"
          width="300"
        />
        <div class="dlt-div" (click)="onDeleteImage()">
          <i class="bi bi-x"></i>
        </div>
      </div>
      <div class="align-items-start gap-2 responsed-text" *ngIf="responseText">
        <div class="upload-photo-container mx-auto text-center mt-2">
          <img
            [src]="displayImageOnUserChat"
            alt="Uploaded Image"
            width="300"
          />
          <h5>{{ userMessageText }}</h5>
        </div>

        <div class="flex-grow-1 response-border-div">
          <div class="text-end">
            <i
              class="bi bi-copy"
              title="Copy to clipboard"
              (click)="copyToClipboard()"
            ></i>
          </div>
          <p #generatedResponse [innerHTML]="responseText"></p>
        </div>
      </div>
    </div>
    <div class="generator-loader-container text-center" *ngIf="isLoading">
      <div class="loader-generator mx-auto"></div>
    </div>
  </div>
</div>

----------------------------------------


=== File: src/app/dashboard/modules/copyright/copyright.component.scss [STYLE] ===
----------------------------------------
*::-webkit-scrollbar {
  height: 50%;
  width: 0.2rem !important;
  background-color: #eeeeee !important; /* or add it to the track */
  border-radius: 1rem;
}

*::-webkit-scrollbar-thumb {
  border-radius: 1rem;
  background: #b4b4b4 !important;
}

----------------------------------------


=== File: src/app/dashboard/modules/copyright/copyright.component.spec.ts [TEST] ===
----------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { CopyrightComponent } from './copyright.component';

describe('CopyrightComponent', () => {
  let component: CopyrightComponent;
  let fixture: ComponentFixture<CopyrightComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [CopyrightComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(CopyrightComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------


=== File: src/app/dashboard/modules/copyright/copyright.component.ts [COMPONENT] ===
----------------------------------------
import { Component, ElementRef, OnInit, Renderer2, ViewChild } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { HttpService } from '../../../shared/services/http.service';
import { ToastrService } from 'ngx-toastr';
import { AuthService } from '../../../shared/services/auth.service';
import { BalanceService } from '../../../shared/services/balance.service';
import { DomSanitizer, SafeUrl } from '@angular/platform-browser';
import { ChatWithPhotoModel } from '../../../shared/models/chat-with-photo.model';
import { url } from '../../../shared/data/api';
import { Router } from '@angular/router';
import { TranslocoService } from '@ngneat/transloco';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-copyright',
  templateUrl: './copyright.component.html',
  styleUrl: './copyright.component.scss',
})
export class CopyrightComponent implements OnInit {
  @ViewChild('generatedResponse', { static: false })
  generatedResponse!: ElementRef;

  userMessageText: string = '';
  responseText: any;
  isLoading: boolean = false;

  userInfoUpdate: any;
  balance: any;
  userID: string = '';
  isLoggedIn: boolean = false;

  displayUploadedImageTextArea: SafeUrl | null = null;
  displayImageOnUserChat: any = null;

  file: any;
  selectedLanguage = '1';
  chats: ChatWithPhotoModel[] = [];

  notProductName = false;
  notUploadedFile = false;

  constructor(
    private sanitizer: DomSanitizer,
    private renderer: Renderer2,
    private router: Router,
    private apiService: HttpService,
    private builder: FormBuilder,
    private toastr: ToastrService,
    private authService: AuthService,
    private balanceService: BalanceService,
    private _transloco: TranslocoService,
  ) {}

  ngOnInit() {

    this.balanceService
      .getBalance()
      .subscribe((value) => (this.balance = value));
  }

  chatForm: FormGroup = this.builder.group({
    text: this.builder.control(``, Validators.required),
    file: this.builder.control(``, Validators.required),
  });

  sendText() {
    this.notProductName = false;
    this.notUploadedFile = false;
    if (!this.chatForm.valid) {
      this.notProductName = true;
      this.notUploadedFile = true;
      return;
    }
    if (
      this.apiService.hasExceededFreeRequests() && !this.authService.isAuthenticated()
    ) {
      this.toastr.error(this._transloco.translate('error-toastr.registration'));
      this.router.navigate(['/sign-up']);
      return;
    }
    if (this.balance <= 0) {
      this.toastr.error(this._transloco.translate('error-toastr.balance'));
      this.router.navigate(['/services/balance']);
      return;
    }
    this.displayUploadedImageTextArea = null;
    this.isLoading = true;
    this.userMessageText = this.chatForm.value.text ?? '';

    var formData = new FormData();
    formData.append('productName', this.chatForm.value.text);
    formData.append('languageId', this.selectedLanguage);
    formData.append('file', this.file);

    this.chatForm.reset();

    if (this.authService.isAuthenticated()) {
      this.apiService.postWriter(url.copyright, formData).subscribe(
        (response: any) => {
          this.responseText = response.text;
          this.isLoading = false;

          var user = this.authService.userInfo();
          if (this.isLoggedIn) {
            this.userID = user.UserId;
            this.apiService.get(url.user, this.userID).subscribe(
              (res) => {
                this.userInfoUpdate = JSON.parse(res);
                this.balanceService.setBalance(this.userInfoUpdate.balance);
                this.apiService
                  .updateUserInfo('/api/User', this.userInfoUpdate)
                  .subscribe();
              },
              (err) => {
                console.log(err);
              }
            );
          }
        },
        (error) => {
          console.error('Error:', error);
          const errorText =
            error.error.errorText || 'An unexpected error occurred';
          this.responseText = errorText;
          this.isLoading = false;
        }
      );
    } else {
      this.apiService.postFreeWriter(url.copyright, formData).subscribe(
        (response: any) => {
          this.responseText = response.text;
          this.isLoading = false;
        },
        (error) => {
          console.error('Error:', error);
          const errorText =
            error.error.errorText || 'An unexpected error occurred';
          this.responseText = errorText;
          this.isLoading = false;
        }
      );
    }
  }

  onFileSelected(event: any) {
    this.responseText = '';
    const input = event.target as HTMLInputElement;
    if (input.files && input.files[0]) {
      const file = input.files[0];
      this.file = file;

      const reader = new FileReader();
      reader.onload = (e: any) => {
        this.displayUploadedImageTextArea =
          this.sanitizer.bypassSecurityTrustUrl(e.target.result);
        this.displayImageOnUserChat = this.sanitizer.bypassSecurityTrustUrl(
          e.target.result
        );
      };
      reader.readAsDataURL(file);

      input.value = '';
    }
  }

  onDeleteImage(): void {
    this.displayUploadedImageTextArea = null;
    this.file = null;
  }

  copyToClipboard() {
    var textToCopy = this.generatedResponse.nativeElement.innerText;
    const textarea = this.renderer.createElement('textarea');
    this.renderer.setProperty(textarea, 'value', textToCopy);
    this.renderer.appendChild(document.body, textarea);

    textarea.select();
    document.execCommand('copy');

    this.renderer.removeChild(document.body, textarea);
    this.toastr.success('Copied to clipboard');
  }

  canDeactivate(): boolean | Observable<boolean> {
    if (this.isLoading) {
      // Warn user only if waiting for the API response
      return confirm('The API is still processing. Are you sure you want to leave? Any unsaved progress will be lost.');
    }
    return true;  // Allow navigation if no API call is pending
  }
}

----------------------------------------


=== File: src/app/dashboard/modules/description/description.component.html [HTML] ===
----------------------------------------
<div class="content-component px-md-5 px-sm-1 pb-5">
  <app-greeting
    [title]="'sidebar.description' | transloco"
    [description1]="'description.des' | transloco"
  ></app-greeting>
  <div class="container">
    <form [formGroup]="chatForm" (ngSubmit)="sendText()" class="mb-5">
      <div
        class="input-search-container d-flex align-items-center justify-content-center flex-wrap flex-md-nowrap"
      >
        <div class="search-text-ctg d-flex align-items-center">
          <input
            type="text"
            [placeholder]="'productname' | transloco"
            formControlName="text"
            [ngClass]="{
              'error-place':
                chatForm.get('text')?.invalid &&
                (chatForm.get('text')?.touched ||
                  chatForm.get('text')?.dirty ||
                  notProductName)
            }"
            class="flex-grow-1"
          />
          <div
            class="px-2 h-100"
            [style]="!isSmallScreen ? 'width: 220px' : ''"
          >
            <mat-select
              [placeholder]="'description.category' | transloco"
              #singleSelect
              class="h-100"
              (selectionChange)="onCategorySelection($event)"
              [ngClass]="{ ctg: notSelectedCategory }"
            >
              <mat-option>
                <ngx-mat-select-search
                  [placeholderLabel]="'search' | transloco"
                  formControlName="category"
                ></ngx-mat-select-search>
              </mat-option>
              <mat-option
                *ngFor="let category of filterOptions | async"
                [value]="category.id"
                class="px-2"
              >
                {{
                  this._transloco.getActiveLang() == "ge"
                    ? category.name
                    : category.nameEng
                }}
              </mat-option>
            </mat-select>
          </div>
        </div>
        <div class="ms-md-2 ms-sm-0 mt-4 mt-md-0 text-center">
          <button
            type="submit"
            class="content-btn mx-auto d-flex gap-2 px-4"
            [title]="'send' | transloco"
          >
            <span>{{ "send" | transloco }}</span
            ><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
              <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
              <path
                d="M498.1 5.6c10.1 7 15.4 19.1 13.5 31.2l-64 416c-1.5 9.7-7.4 18.2-16 23s-18.9 5.4-28 1.6L284 427.7l-68.5 74.1c-8.9 9.7-22.9 12.9-35.2 8.1S160 493.2 160 480l0-83.6c0-4 1.5-7.8 4.2-10.8L331.8 202.8c5.8-6.3 5.6-16-.4-22s-15.7-6.4-22-.7L106 360.8 17.7 316.6C7.1 311.3 .3 300.7 0 288.9s5.9-22.8 16.1-28.7l448-256c10.7-6.1 23.9-5.5 34 1.4z"
              />
            </svg>
          </button>
        </div>
      </div>
    </form>
    <div class="response-container" *ngIf="responseText">
      <h5>{{ selectedCategoryName }}: {{ userMessageText }}</h5>
      <hr />
      <div class="text-end">
        <i
          class="bi bi-copy"
          title="Copy to clipboard"
          (click)="copyToClipboard()"
        ></i>
      </div>
      <p #generatedResponse [innerHTML]="responseText"></p>
    </div>
    <div class="generator-loader-container text-center" *ngIf="isLoading">
      <div class="loader-generator mx-auto"></div>
    </div>
  </div>
</div>

----------------------------------------


=== File: src/app/dashboard/modules/description/description.component.scss [STYLE] ===
----------------------------------------
*::-webkit-scrollbar {
  height: 50%;
  width: 0.2rem !important;
  background-color: #eeeeee !important; /* or add it to the track */
  border-radius: 1rem;
}

*::-webkit-scrollbar-thumb {
  border-radius: 1rem;
  background: #b4b4b4 !important;
}

----------------------------------------


=== File: src/app/dashboard/modules/description/description.component.spec.ts [TEST] ===
----------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DescriptionComponent } from './description.component';

describe('DescriptionComponent', () => {
  let component: DescriptionComponent;
  let fixture: ComponentFixture<DescriptionComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [DescriptionComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(DescriptionComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------


=== File: src/app/dashboard/modules/description/description.component.ts [COMPONENT] ===
----------------------------------------
import {
  Component,
  ElementRef,
  HostListener,
  Renderer2,
  ViewChild,
} from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { HttpService } from '../../../shared/services/http.service';
import { ContentModel } from '../../../shared/models/content.model';
import { url } from '../../../shared/data/api';
import { ProductCategoryService } from '../../../shared/services/product-category.service';
import { Category } from '../../../shared/interfaces/category.interface';
import { map, Observable, of, startWith } from 'rxjs';
import { ToastrService } from 'ngx-toastr';
import { AuthService } from '../../../shared/services/auth.service';
import { BalanceService } from '../../../shared/services/balance.service';
import { MatSelectChange } from '@angular/material/select';
import { Router } from '@angular/router';
import { TranslocoService } from '@ngneat/transloco';

@Component({
  selector: 'app-description',
  templateUrl: './description.component.html',
  styleUrl: './description.component.scss',
})
export class DescriptionComponent {
  @ViewChild('generatedResponse', { static: false })
  generatedResponse!: ElementRef;
  selectedCategoryName: string = '';
  userMessageText: string = '';
  responseText: any;

  userInfoUpdate: any;
  userID: string = '';
  balance: any;
  isLoggedIn: boolean = false;

  isLoading: boolean = false;
  isSmallScreen: boolean = false;
  sent: boolean = false;

  selectedLanguage = '1';

  filterString: string = '';
  selectedProductCategoryId: string = '';
  productCategoryList: Category[] = [];
  filterOptions: Observable<Category[]> = of([]);

  notSelectedCategory = false;
  notProductName = false;

  constructor(
    private authService: AuthService,
    private builder: FormBuilder,
    private apiService: HttpService,
    private productService: ProductCategoryService,
    private toastr: ToastrService,
    private router: Router,
    private balanceService: BalanceService,
    public _transloco: TranslocoService,
    private renderer: Renderer2
  ) {}

  chatForm = this.builder.group({
    text: this.builder.control(``, Validators.required),
    category: this.builder.control(``),
  });

  ngOnInit(): void {
    this.initializeFilterOptions();
    this.checkScreenWidth();
    this.balanceService
      .getBalance()
      .subscribe((value) => (this.balance = value));

    if (this.isLoggedIn) {
      var user = this.authService.userInfo();
      this.userID = user.UserId;
      this.apiService.get(url.user, this.userID).subscribe(
        (res) => {
          this.userInfoUpdate = JSON.parse(res);
        },
        (err) => {
          console.log(err);
        }
      );

      this.productService.getProductCategory(url.productCategory).subscribe(
        (response) => {
          this.productCategoryList = response;
          this.chatForm.get('category')?.updateValueAndValidity();
        },
        (error) => {
          console.error('Error fetching categories', error);
        }
      );
    } else {
      this.productService.getFreeProductCategory(url.productCategory).subscribe(
        (response) => {
          this.productCategoryList = response;
          this.chatForm.get('category')?.updateValueAndValidity();
        },
        (error) => {
          console.error('Error fetching categories', error);
        }
      );
    }
  }

  sendText() {
    if (!this.chatForm.valid && this.selectedProductCategoryId == '') {
      this.notProductName = true;
      this.notSelectedCategory = true;
      return;
    }
    if (this.selectedProductCategoryId == '') {
      this.notSelectedCategory = true;
      return;
    }
    if (!this.chatForm.valid) {
      this.notProductName = true;
      return;
    }
    if (
      this.apiService.hasExceededFreeRequests() &&
      !this.authService.isAuthenticated()
    ) {
      this.toastr.error(this._transloco.translate('error-toastr.registration'));
      this.router.navigate(['/sign-up']);
      return;
    }
    if (this.balance <= 0) {
      this.toastr.error(this._transloco.translate('error-toastr.balance'));
      this.router.navigate(['/services/balance']);
      return;
    }
    this.isLoading = !this.isLoading;
    this.responseText = '';

    this.userMessageText = this.chatForm.value.text ?? '';
    this.saveCategoryName();
    this.chatForm.get('text')?.reset();

    const model = new ContentModel(
      this.userMessageText,
      Number(this.selectedLanguage),
      this.selectedProductCategoryId,
      []
    );

    if (this.authService.isAuthenticated()) {
      this.apiService.postContent(url.content, model).subscribe(
        (response: any) => {
          this.sent = !this.sent;
          this.responseText = response.text.replace(/<br\s*\/?>/gi, '');
          this.isLoading = false;

          var user = this.authService.userInfo();
          if (this.isLoggedIn) {
            this.userID = user.UserId;
            this.apiService.get(url.user, this.userID).subscribe(
              (res) => {
                this.userInfoUpdate = JSON.parse(res);
                this.balanceService.setBalance(this.userInfoUpdate.balance);
                this.apiService
                  .updateUserInfo('/api/User', this.userInfoUpdate)
                  .subscribe();
              },
              (err) => {
                console.log(err);
              }
            );
          }
        },
        (error) => {
          console.error('Error:', error);
          this.isLoading = false;
        }
      );
    } else {
      this.apiService.postFreeContent(url.content, model).subscribe(
        (response: any) => {
          this.sent = !this.sent;
          this.responseText = response.text.replace(/<br\s*\/?>/gi, '');
          this.isLoading = false;
        },
        (error) => {
          console.error('Error:', error);
          this.isLoading = false;
        }
      );
    }
  }

  private initializeFilterOptions() {
    this.filterOptions = this.chatForm.get('category')!.valueChanges.pipe(
      startWith(''),
      map((value) => this._FILTER(value || ''))
    );
  }

  private _FILTER(value: string): Category[] {
    const searchValue = value.toLowerCase();
    const activeLang = this._transloco.getActiveLang();
    return this.productCategoryList.filter((category) => {
      if (activeLang === 'ge') {
        return category.name.toLowerCase().includes(searchValue);
      } else {
        return category.nameEng.toLowerCase().includes(searchValue);
      }
    });
  }

  onCategorySelection(event: MatSelectChange) {
    this.selectedProductCategoryId = event.value;
  }

  saveCategoryName() {
    const selectedCategory = this.productCategoryList.find(
      (category) => category.id === this.selectedProductCategoryId
    );
    if (selectedCategory) {
      this.selectedCategoryName = selectedCategory.name;
    }
  }

  copyToClipboard() {
    var textToCopy = this.generatedResponse.nativeElement.innerText;
    const textarea = this.renderer.createElement('textarea');
    this.renderer.setProperty(textarea, 'value', textToCopy);
    this.renderer.appendChild(document.body, textarea);

    textarea.select();
    document.execCommand('copy');

    this.renderer.removeChild(document.body, textarea);
    this.toastr.success('Copied to clipboard');
  }

  @HostListener('window:resize', ['$event'])
  onResize(event: Event): void {
    this.checkScreenWidth();
  }

  private checkScreenWidth(): void {
    this.isSmallScreen = window.innerWidth < 620;
  }
}

----------------------------------------


=== File: src/app/dashboard/modules/mail/mail.component.html [HTML] ===
----------------------------------------
<div class="content-component">
  <div class="container pt-5">
    <h3>{{ "sidebar.mail" | transloco }}</h3>
    <p>{{ "mailman.p" | transloco }}</p>
    <form [formGroup]="chatForm">
      <div class="translate-container row">
        <div class="col-12 col-lg-6">
          <select
            id="languageSourceSelect"
            style="max-width: 15rem"
            class="form-select product-selection c-p shadow-none mt-5 mb-4"
            aria-label="Large select example"
            [(ngModel)]="emailFormId"
            [ngModelOptions]="{ standalone: true }"
            required
          >
            <option value="1">{{ "mailman.f1" | transloco }}</option>
            <option value="2">{{ "mailman.f2" | transloco }}</option>
            <option value="3">{{ "mailman.f3" | transloco }}</option>
          </select>

          <div
            class="translate-content"
            [ngClass]="{
              'select-error':
                chatForm.get('text')?.invalid &&
                (chatForm.get('text')?.touched || chatForm.get('text')?.dirty)
            }"
          >
            <textarea
              #textareaElement
              class="form-control shadow-none"
              [placeholder]="'mailman.email' | transloco"
              [maxlength]="maxChars"
              formControlName="text"
              (input)="updateTextareaContent($event)"
              (input)="adjustTextareaHeight()"
              id="floatingTextarea2"
            ></textarea>
            <div class="text-end pe-3 pb-2">
              <small class="chars text-muted"
                >{{ textareaContent.length }}/{{ maxChars }}</small
              >
            </div>
          </div>
        </div>

        <div class="col-12 col-lg-6">
          <select
            id="languageSelect"
            class="form-select product-selection c-p shadow-none mt-5 mb-4 ms-auto mx-w-15"
            aria-label="Large select example"
            [(ngModel)]="selectedLanguage"
            [ngModelOptions]="{ standalone: true }"
            [ngClass]="{
              'error-text': notSelectedLanguage && selectedLanguage == 0
            }"
            required
          >
            <option selected value="0" disabled>
              {{ "mailman.language-options" | transloco }}
            </option>
            <option *ngFor="let language of languages" [value]="language.id">
              {{
                this._transloco.getActiveLang() == "ge"
                  ? language.nameGeo
                  : language.name
              }}
            </option>
          </select>
          <div class="translated-content p-2">
            <div class="translated-div">
              <div class="loader" *ngIf="isLoading"></div>
              <p
                *ngIf="!isLoading"
                [innerHTML]="translatedText"
                class="pe-3"
                #generatedResponse
              ></p>
            </div>
            <i
              *ngIf="copyBtn"
              class="bi bi-copy text-muted"
              (click)="copyToClipboard()"
            ></i>
          </div>
        </div>
      </div>
      <div class="text-center py-5">
        <button class="button content-btn" (click)="sendText()">
          <span class="button-content">{{
            "mailman.receiver" | transloco
          }}</span>
        </button>
      </div>
    </form>
  </div>
</div>

----------------------------------------


=== File: src/app/dashboard/modules/mail/mail.component.scss [STYLE] ===
----------------------------------------
*::-webkit-scrollbar {
  height: 50%;
  width: 0.2rem !important;
  background-color: #eeeeee !important; /* or add it to the track */
  border-radius: 1rem;
}

*::-webkit-scrollbar-thumb {
  border-radius: 1rem;
  background: #adadad !important;
}

.loader {
  width: fit-content;
  font-weight: 500;
  font-size: 16px;
  background: radial-gradient(circle closest-side, #3d3a4e 94%, #0000)
    right/calc(200% - 1em) 100%;
  animation: l24 1s infinite alternate linear;
}
.loader::before {
  content: "მეილი იწერება...";
  line-height: 1em;
  color: #0000;
  background: inherit;
  background-image: radial-gradient(circle closest-side, #fff 94%, #3b59f3);
  -webkit-background-clip: text;
  background-clip: text;
}

@keyframes l24 {
  100% {
    background-position: left;
  }
}

.translate-container.row {
  align-items: center;
}

----------------------------------------


=== File: src/app/dashboard/modules/mail/mail.component.ts [COMPONENT] ===
----------------------------------------
import {
  Component,
  ElementRef,
  OnInit,
  Renderer2,
  ViewChild,
} from '@angular/core';
import { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { MatDialog } from '@angular/material/dialog';
import { SafeUrl } from '@angular/platform-browser';
import { TextComponent } from '../translate-options/text/text.component';
import { Language } from '../../../shared/interfaces/language.interface';
import { HttpService } from '../../../shared/services/http.service';
import { AuthService } from '../../../shared/services/auth.service';
import { BalanceService } from '../../../shared/services/balance.service';
import { url } from '../../../shared/data/api';
import { form, language } from '../../../shared/data/language';
import { EmailModel } from '../../../shared/models/email.model';
import { ProductCategoryService } from '../../../shared/services/product-category.service';
import { CommonModule } from '@angular/common';
import { Router } from '@angular/router';
import { TranslocoService } from '@ngneat/transloco';

interface Email {
  value: number,
  viewValue: string
}

@Component({
  selector: 'app-mail',
  templateUrl: './mail.component.html',
  styleUrl: './mail.component.scss',
})
export class MailComponent implements OnInit {
  @ViewChild('textareaElement', { static: false }) textareaElement!: ElementRef;
  @ViewChild('generatedResponse', { static: false }) generatedResponse!: ElementRef;

  activeComponent: any = TextComponent;

  maxChars: number = 5000;

  isLoggedIn: boolean = false;
  userID: string = '';
  userInfo: any;
  userInfoUpdate: any;
  balance: any;

  copyBtn: boolean = false;
  textareaContent: string = '';
  imageUrl: SafeUrl | null = null;

  isLoading: boolean = false;
  selectedLanguage = 0;
  notSelectedLanguage = false;

  emailFormId = 1;
  translatedText: string = '';

  languages: Language[] = [];
  emailFormList: Email[] = form;

  constructor(
    private builder: FormBuilder,
    private apiService: HttpService,
    private authService: AuthService,
    private toastr: ToastrService,
    private renderer: Renderer2,
    private router: Router,
    private balanceService: BalanceService,
    public _transloco: TranslocoService,
    private languageService: ProductCategoryService
  ) {}

  ngOnInit() {

    this.balanceService
      .getBalance()
      .subscribe((value) => (this.balance = value));
    this.adjustTextareaHeight();
    if(this.isLoggedIn) {
      this.languageService.getLanguage(url.language).subscribe(
        (response: any) => {
          this.languages = response;
          this.deleteById(10);
        },
        (error) => {
          console.error('Error fetching languages', error);
        }
      );
    } else {
      this.languageService.getFreeLanguage(url.language).subscribe(
        (response: any) => {
          this.languages = response;
          this.deleteById(10);
        },
        (error) => {
          console.error('Error fetching languages', error);
        }
      );
    }
    this._transloco.langChanges$.subscribe((lang) => {
      this.setTranslatedText(lang);
    });
    this.setTranslatedText(this._transloco.getActiveLang());
  }

  chatForm: FormGroup = this.builder.group({
    text: this.builder.control(``, Validators.required),
  });

  sendText() {
    if(this.selectedLanguage === 0) {
      this.notSelectedLanguage = true;
      return;
    }
    if (!this.chatForm.valid) {
      this.toastr.error(this._transloco.translate('error-toastr.email-text'));
      return;
    };
    if (
      this.apiService.hasExceededFreeRequests() && !this.authService.isAuthenticated()
    ) {
      this.toastr.error(this._transloco.translate('error-toastr.registration'));
      this.router.navigate(['/sign-up']);
      return;
    }
    if (this.balance <= 0) {
      this.toastr.error(this._transloco.translate('error-toastr.balance'));
      this.router.navigate(['/services/balance']);
      return;
    }
    if (this.isLoading) return;
    this.isLoading = true;
    this.notSelectedLanguage = false;

    const userMessageText = this.chatForm.value.text ?? '';

    const model = new EmailModel(
      userMessageText,
      Number(this.selectedLanguage),
      Number(this.emailFormId)
    );

    if(!this.authService.isAuthenticated()) {
      this.apiService.postFreeEmail(url.email, model).subscribe(
        (response: any) => {
          this.translatedText = response.text;
          this.isLoading = false;
          this.copyBtn = !this.copyBtn;
        },
        (error) => {
          console.error('Error:', error);
          this.isLoading = false;
        }
      );
    } else {
      this.apiService.postEmail(url.email, model).subscribe(
        (response: any) => {
          this.translatedText = response.text;
          this.isLoading = false;
          this.copyBtn = !this.copyBtn;

          var user = this.authService.userInfo();
          if (this.isLoggedIn) {
            this.userID = user.UserId;
            this.apiService.get(url.user, this.userID).subscribe(
              (res) => {
                this.userInfoUpdate = JSON.parse(res);
                this.balanceService.setBalance(this.userInfoUpdate.balance);
                this.apiService
                  .updateUserInfo('/api/User', this.userInfoUpdate)
                  .subscribe();
              },
              (err) => {
                console.log(err);
              }
            );
          }
        },
        (error) => {
          console.error('Error:', error);
          this.isLoading = false;
        }
      );
    }
  }

  deleteById(id: any): void {
    this.languages = this.languages.filter((item: any) => item.id !== id);
  }

  setTranslatedText(lang: string) {
    if (lang === 'en') {
      this.translatedText = 'Our advice';
    } else {
      this.translatedText = 'ჩვენი რჩევა';
    }
  }

  copyToClipboard() {
    var textToCopy = this.generatedResponse.nativeElement.innerText;
    const textarea = this.renderer.createElement('textarea');
    this.renderer.setProperty(textarea, 'value', textToCopy);
    this.renderer.appendChild(document.body, textarea);

    textarea.select();
    document.execCommand('copy');

    this.renderer.removeChild(document.body, textarea);
    this.toastr.success('Copied to clipboard');
  }

  adjustTextareaHeight() {
    if (this.textareaElement && this.textareaElement.nativeElement) {
      const textarea = this.textareaElement
        .nativeElement as HTMLTextAreaElement;
      textarea.style.height = '50px';
      let scHeight = textarea.scrollHeight;
      textarea.style.height = scHeight > 10 ? `${scHeight}px` : '100px';
    }
  }

  updateTextareaContent(event: Event): void {
    const inputElement = event.target as HTMLTextAreaElement;
    this.textareaContent = inputElement.value;
  }
}

----------------------------------------


=== File: src/app/dashboard/modules/script/script.component.html [HTML] ===
----------------------------------------
<div class="content-component px-md-5 px-sm-1 pb-5">
  <app-greeting
    [title]="'sidebar.script' | transloco"
    [description1]="'screenwriter.des1' | transloco"
    [description2]="'screenwriter.des2' | transloco"
  ></app-greeting>
  <div class="container">
    <form [formGroup]="chatForm" (ngSubmit)="sendText()" class="mb-5">
      <div
        class="input-search-container d-flex align-items-center justify-content-center flex-wrap flex-lg-nowrap position-relative"
      >
        <div
          class="d-flex align-items-center justify-content-start flex-grow-1 copyright-input"
        >
          <div class="photo-upload">
            <label
              for="file-upload"
              class="custom-file-upload px-3"
              title="Add an image (Format: png, jpeg, webp, gif)"
            >
              <svg
                class="me-2"
                xmlns="http://www.w3.org/2000/svg"
                [ngClass]="{
                  'error-text':
                    chatForm.get('file')?.invalid &&
                    (chatForm.get('file')?.touched ||
                      chatForm.get('file')?.dirty ||
                      notUploadedFile)
                }"
                viewBox="0 0 384 512"
              >
                <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
                <path
                  d="M64 464c-8.8 0-16-7.2-16-16L48 64c0-8.8 7.2-16 16-16l160 0 0 80c0 17.7 14.3 32 32 32l80 0 0 288c0 8.8-7.2 16-16 16L64 464zM64 0C28.7 0 0 28.7 0 64L0 448c0 35.3 28.7 64 64 64l256 0c35.3 0 64-28.7 64-64l0-293.5c0-17-6.7-33.3-18.7-45.3L274.7 18.7C262.7 6.7 246.5 0 229.5 0L64 0zm96 256a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zm69.2 46.9c-3-4.3-7.9-6.9-13.2-6.9s-10.2 2.6-13.2 6.9l-41.3 59.7-11.9-19.1c-2.9-4.7-8.1-7.5-13.6-7.5s-10.6 2.8-13.6 7.5l-40 64c-3.1 4.9-3.2 11.1-.4 16.2s8.2 8.2 14 8.2l48 0 32 0 40 0 72 0c6 0 11.4-3.3 14.2-8.6s2.4-11.6-1-16.5l-72-104z"
                />
              </svg>
              <span
                class="attach-file-text"
                [ngClass]="{
                  'error-text':
                    chatForm.get('file')?.invalid &&
                    (chatForm.get('file')?.touched ||
                      chatForm.get('file')?.dirty ||
                      notUploadedFile)
                }"
                >{{ "attach-file" | transloco }}</span
              >
            </label>
            <input
              type="file"
              id="file-upload"
              formControlName="file"
              accept=".png, .jpeg, .webp, .gif"
              (change)="onFileSelected($event)"
            />
          </div>
          <input
            type="text"
            [placeholder]="'productname' | transloco"
            formControlName="text"
            class="flex-grow-1"
            [ngClass]="{
              'error-place':
                chatForm.get('text')?.invalid &&
                (chatForm.get('text')?.touched ||
                  chatForm.get('text')?.dirty ||
                  notProductName)
            }"
          />
        </div>
        <div class="ms-sm-2 text-center btn-mt-div">
          <button
            type="submit"
            class="content-btn mx-auto d-flex gap-2 px-4"
            [title]="'send' | transloco"
          >
            <span>{{ "send" | transloco }}</span
            ><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
              <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
              <path
                d="M498.1 5.6c10.1 7 15.4 19.1 13.5 31.2l-64 416c-1.5 9.7-7.4 18.2-16 23s-18.9 5.4-28 1.6L284 427.7l-68.5 74.1c-8.9 9.7-22.9 12.9-35.2 8.1S160 493.2 160 480l0-83.6c0-4 1.5-7.8 4.2-10.8L331.8 202.8c5.8-6.3 5.6-16-.4-22s-15.7-6.4-22-.7L106 360.8 17.7 316.6C7.1 311.3 .3 300.7 0 288.9s5.9-22.8 16.1-28.7l448-256c10.7-6.1 23.9-5.5 34 1.4z"
              />
            </svg>
          </button>
        </div>
      </div>
    </form>
    <div class="response-container">
      <div *ngIf="displayUploadedImageTextArea" class="upload-photo-container">
        <img
          [src]="displayUploadedImageTextArea"
          alt="Uploaded Image"
          width="300"
        />
        <div class="dlt-div" (click)="onDeleteImage()">
          <i class="bi bi-x"></i>
        </div>
      </div>
      <div class="align-items-start gap-2 responsed-text" *ngIf="responseText">
        <div class="upload-photo-container mx-auto text-center mt-2">
          <img
            [src]="displayImageOnUserChat"
            alt="Uploaded Image"
            width="300"
          />
          <h5>{{ userMessageText }}</h5>
        </div>

        <div class="flex-grow-1 response-border-div">
          <div class="text-end">
            <i
              class="bi bi-copy"
              title="Copy to clipboard"
              (click)="copyToClipboard()"
            ></i>
          </div>
          <p #generatedResponse [innerHTML]="responseText"></p>
        </div>
      </div>
    </div>
    <div class="generator-loader-container text-center" *ngIf="isLoading">
      <div class="loader-generator mx-auto"></div>
    </div>
  </div>
</div>

----------------------------------------


=== File: src/app/dashboard/modules/script/script.component.scss [STYLE] ===
----------------------------------------
*::-webkit-scrollbar {
  height: 50%;
  width: 0.2rem !important;
  background-color: #eeeeee !important; /* or add it to the track */
  border-radius: 1rem;
}

*::-webkit-scrollbar-thumb {
  border-radius: 1rem;
  background: #b4b4b4 !important;
}

----------------------------------------


=== File: src/app/dashboard/modules/script/script.component.spec.ts [TEST] ===
----------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ScriptComponent } from './script.component';

describe('ScriptComponent', () => {
  let component: ScriptComponent;
  let fixture: ComponentFixture<ScriptComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ScriptComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(ScriptComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------


=== File: src/app/dashboard/modules/script/script.component.ts [COMPONENT] ===
----------------------------------------
import {
  Component,
  ElementRef,
  OnInit,
  Renderer2,
  ViewChild,
} from '@angular/core';
import { DomSanitizer, SafeUrl } from '@angular/platform-browser';
import { ChatModel } from '../../../shared/models/chat.model';
import { HttpService } from '../../../shared/services/http.service';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { url } from '../../../shared/data/api';
import { ChatWithPhotoModel } from '../../../shared/models/chat-with-photo.model';
import { ToastrService } from 'ngx-toastr';
import { AuthService } from '../../../shared/services/auth.service';
import { MatDialog } from '@angular/material/dialog';
import { BalanceService } from '../../../shared/services/balance.service';
import { Router } from '@angular/router';
import { TranslocoService } from '@ngneat/transloco';

@Component({
  selector: 'app-script',
  templateUrl: './script.component.html',
  styleUrl: './script.component.scss',
})
export class ScriptComponent {
  @ViewChild('generatedResponse', { static: false })
  generatedResponse!: ElementRef;

  userMessageText: string = '';
  responseText: any;

  userInfoUpdate: any;
  balance: any;
  isLoggedIn: boolean = false;
  userID: string = '';

  displayUploadedImageTextArea: SafeUrl | null = null;
  displayImageOnUserChat: any = null;
  isLoading: boolean = false;

  file: any;
  selectedLanguage = '1';

  notProductName = false;
  notUploadedFile = false;

  constructor(
    private sanitizer: DomSanitizer,
    private renderer: Renderer2,
    private router: Router,
    private apiService: HttpService,
    private authService: AuthService,
    private builder: FormBuilder,
    private toastr: ToastrService,
    private balanceService: BalanceService,
    private _transloco: TranslocoService,
  ) {}

  chatForm: FormGroup = this.builder.group({
    text: this.builder.control(``, Validators.required),
    file: this.builder.control(``, Validators.required),
  });

  sendText() {
    this.notProductName = false;
    this.notUploadedFile = false;
    if (!this.chatForm.valid) {
      this.notProductName = true;
      this.notUploadedFile = true;
      return;
    }
    if (
      this.apiService.hasExceededFreeRequests() && !this.authService.isAuthenticated()
    ) {
      this.toastr.error(this._transloco.translate('error-toastr.registration'));
      this.router.navigate(['/sign-up']);
      return;
    }
    if (this.balance <= 0) {
      this.toastr.error(this._transloco.translate('error-toastr.balance'));
      this.router.navigate(['/services/balance']);
      return;
    }
    this.displayUploadedImageTextArea = null;
    this.isLoading = true;
    this.userMessageText = this.chatForm.value.text ?? '';

    var formData = new FormData();

    formData.append('productName', this.chatForm.value.text);
    formData.append('languageId', this.selectedLanguage);
    formData.append('file', this.file);

    this.chatForm.reset();
    if (this.authService.isAuthenticated()) {
      this.apiService.postWriter(url.videoScript, formData).subscribe(
        (response: any) => {
          this.responseText = response.text;
          this.isLoading = false;

          var user = this.authService.userInfo();
          if (this.isLoggedIn) {
            this.userID = user.UserId;
            this.apiService.get(url.user, this.userID).subscribe(
              (res) => {
                this.userInfoUpdate = JSON.parse(res);
                this.balanceService.setBalance(this.userInfoUpdate.balance);
                this.apiService
                  .updateUserInfo('/api/User', this.userInfoUpdate)
                  .subscribe();
              },
              (err) => {
                console.log(err);
              }
            );
          }
        },
        (error) => {
          console.error('Error:', error);
          const errorText =
            error.error.errorText || 'An unexpected error occurred';
          this.responseText = errorText;
          this.isLoading = false;
        }
      );
    } else {
      this.apiService.postFreeWriter(url.videoScript, formData).subscribe(
        (response: any) => {
          this.responseText = response.text;
          this.isLoading = false;
        },
        (error) => {
          console.error('Error:', error);
          const errorText =
            error.error.errorText || 'An unexpected error occurred';
          this.responseText = errorText;
          this.isLoading = false;
        }
      );
    }
  }

  onFileSelected(event: any) {
    this.responseText = '';
    const input = event.target as HTMLInputElement;
    if (input.files && input.files[0]) {
      const file = input.files[0];
      this.file = file;

      const reader = new FileReader();
      reader.onload = (e: any) => {
        this.displayUploadedImageTextArea =
          this.sanitizer.bypassSecurityTrustUrl(e.target.result);
        this.displayImageOnUserChat = this.sanitizer.bypassSecurityTrustUrl(
          e.target.result
        );
      };
      reader.readAsDataURL(file);

      input.value = '';
    }
  }

  onDeleteImage(): void {
    this.displayUploadedImageTextArea = null;
    this.file = null;
  }

  copyToClipboard() {
    var textToCopy = this.generatedResponse.nativeElement.innerText;
    const textarea = this.renderer.createElement('textarea');
    this.renderer.setProperty(textarea, 'value', textToCopy);
    this.renderer.appendChild(document.body, textarea);

    textarea.select();
    document.execCommand('copy');

    this.renderer.removeChild(document.body, textarea);
    this.toastr.success('Copied to clipboard');
  }
}

----------------------------------------


=== File: src/app/dashboard/modules/translate/translate.component.html [HTML] ===
----------------------------------------
<div class="content-component">
  <div class="container pt-5">
    <h3>{{ "sidebar.translate" | transloco }}</h3>
    <div class="translate-options d-flex overflow-x-scroll mb-5 mt-4">
      <button
        (click)="onText()"
        class="translate-item"
        [class.active-translate-item]="activeButton === 'text'"
      >
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512">
          <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
          <path
            d="M64 64C28.7 64 0 92.7 0 128L0 384c0 35.3 28.7 64 64 64l448 0c35.3 0 64-28.7 64-64l0-256c0-35.3-28.7-64-64-64L64 64zm16 64l32 0c8.8 0 16 7.2 16 16l0 32c0 8.8-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16l0-32c0-8.8 7.2-16 16-16zM64 240c0-8.8 7.2-16 16-16l32 0c8.8 0 16 7.2 16 16l0 32c0 8.8-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16l0-32zm16 80l32 0c8.8 0 16 7.2 16 16l0 32c0 8.8-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16l0-32c0-8.8 7.2-16 16-16zm80-176c0-8.8 7.2-16 16-16l32 0c8.8 0 16 7.2 16 16l0 32c0 8.8-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16l0-32zm16 80l32 0c8.8 0 16 7.2 16 16l0 32c0 8.8-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16l0-32c0-8.8 7.2-16 16-16zM160 336c0-8.8 7.2-16 16-16l224 0c8.8 0 16 7.2 16 16l0 32c0 8.8-7.2 16-16 16l-224 0c-8.8 0-16-7.2-16-16l0-32zM272 128l32 0c8.8 0 16 7.2 16 16l0 32c0 8.8-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16l0-32c0-8.8 7.2-16 16-16zM256 240c0-8.8 7.2-16 16-16l32 0c8.8 0 16 7.2 16 16l0 32c0 8.8-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16l0-32zM368 128l32 0c8.8 0 16 7.2 16 16l0 32c0 8.8-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16l0-32c0-8.8 7.2-16 16-16zM352 240c0-8.8 7.2-16 16-16l32 0c8.8 0 16 7.2 16 16l0 32c0 8.8-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16l0-32zM464 128l32 0c8.8 0 16 7.2 16 16l0 32c0 8.8-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16l0-32c0-8.8 7.2-16 16-16zM448 240c0-8.8 7.2-16 16-16l32 0c8.8 0 16 7.2 16 16l0 32c0 8.8-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16l0-32zm16 80l32 0c8.8 0 16 7.2 16 16l0 32c0 8.8-7.2 16-16 16l-32 0c-8.8 0-16-7.2-16-16l0-32c0-8.8 7.2-16 16-16z"
          />
        </svg>
        {{ "translate.text" | transloco }}
      </button>
      <button
        (click)="onImage()"
        class="translate-item"
        [class.active-translate-item]="activeButton === 'image'"
      >
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
          <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
          <path
            d="M448 80c8.8 0 16 7.2 16 16l0 319.8-5-6.5-136-176c-4.5-5.9-11.6-9.3-19-9.3s-14.4 3.4-19 9.3L202 340.7l-30.5-42.7C167 291.7 159.8 288 152 288s-15 3.7-19.5 10.1l-80 112L48 416.3l0-.3L48 96c0-8.8 7.2-16 16-16l384 0zM64 32C28.7 32 0 60.7 0 96L0 416c0 35.3 28.7 64 64 64l384 0c35.3 0 64-28.7 64-64l0-320c0-35.3-28.7-64-64-64L64 32zm80 192a48 48 0 1 0 0-96 48 48 0 1 0 0 96z"
          />
        </svg>
        {{ "translate.photo" | transloco }}
      </button>
      <button
        (click)="onDoc()"
        class="translate-item"
        [class.active-translate-item]="activeButton === 'doc'"
      >
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
          <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
          <path
            d="M64 464l48 0 0 48-48 0c-35.3 0-64-28.7-64-64L0 64C0 28.7 28.7 0 64 0L229.5 0c17 0 33.3 6.7 45.3 18.7l90.5 90.5c12 12 18.7 28.3 18.7 45.3L384 304l-48 0 0-144-80 0c-17.7 0-32-14.3-32-32l0-80L64 48c-8.8 0-16 7.2-16 16l0 384c0 8.8 7.2 16 16 16zM176 352l32 0c30.9 0 56 25.1 56 56s-25.1 56-56 56l-16 0 0 32c0 8.8-7.2 16-16 16s-16-7.2-16-16l0-48 0-80c0-8.8 7.2-16 16-16zm32 80c13.3 0 24-10.7 24-24s-10.7-24-24-24l-16 0 0 48 16 0zm96-80l32 0c26.5 0 48 21.5 48 48l0 64c0 26.5-21.5 48-48 48l-32 0c-8.8 0-16-7.2-16-16l0-128c0-8.8 7.2-16 16-16zm32 128c8.8 0 16-7.2 16-16l0-64c0-8.8-7.2-16-16-16l-16 0 0 96 16 0zm80-112c0-8.8 7.2-16 16-16l48 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-32 0 0 32 32 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-32 0 0 48c0 8.8-7.2 16-16 16s-16-7.2-16-16l0-64 0-64z"
          />
        </svg>
        {{ "translate.document" | transloco }}
      </button>
    </div>
    <div *ngIf="activeComponent" class="chat-container mt-3">
      <div class="ng-renderer" *ngComponentOutlet="activeComponent"></div>
    </div>
  </div>
</div>

----------------------------------------


=== File: src/app/dashboard/modules/translate/translate.component.scss [STYLE] ===
----------------------------------------
*::-webkit-scrollbar {
  height: 50%;
  width: 0.2rem !important;
  background-color: #eeeeee !important; /* or add it to the track */
  border-radius: 1rem;
}

*::-webkit-scrollbar-thumb {
  border-radius: 1rem;
  background: #adadad !important;
}

.translate-options {
  padding: 8px 4px;
  button {
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-size: 14px;
    // margin: 1rem 20px 0 0;
    background-color: white;
    border-radius: 7px;
    padding: 8px 12px;
    // border: 1px solid rgba(128, 128, 128, 0.5);
    border: none;
    color: #3c3d42;
    margin-right: 10px;
    svg {
      width: 16px;
      fill: #3c3d42;
      margin-right: 5px;
    }
    .bi {
      font-size: 16px;
    }
    &:hover {
      color: #0b29be !important;
    }
  }
}

.active-translate-item {
  // background-color: #3b59f3 !important;
  color: #3b59f3 !important;
  font-weight: 600;
  border: 1px solid #dadada !important;
  box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 6px -1px,
    rgba(0, 0, 0, 0.06) 0px 2px 4px -1px;
  svg {
    fill: #3b59f3 !important;
  }
}

----------------------------------------


=== File: src/app/dashboard/modules/translate/translate.component.ts [COMPONENT] ===
----------------------------------------
import { Component } from '@angular/core';
import { TextComponent } from '../translate-options/text/text.component';
import { ImageComponent } from '../translate-options/image/image.component';
import { DocComponent } from '../translate-options/doc/doc.component';
import { TranslateActiveService } from '../../../shared/services/translate-active.service';

@Component({
  selector: 'app-translate',
  templateUrl: './translate.component.html',
  styleUrl: './translate.component.scss',
})
export class TranslateComponent {
  activeComponent: any = TextComponent;
  activeButton: 'text' | 'image' | 'doc' | null = 'text';

  constructor(
    private _translateActive: TranslateActiveService
  ) {}

  ngOnInit() {
    this._translateActive.activeComponent$.subscribe((component) => {
      this.activeComponent = component;
    });
  }

  onText() {
    this.activeButton = 'text';
    this.activeComponent = TextComponent;
  }

  onImage() {
    this.activeButton = 'image';
    this.activeComponent = ImageComponent;
  }

  onDoc() {
    this.activeButton = 'doc';
    this.activeComponent = DocComponent;
  }
}

----------------------------------------


=== File: src/app/dashboard/modules/translate-options/doc/doc.component.html [HTML] ===
----------------------------------------
<form [formGroup]="docTranslateForm" @fadeIn>
  <!-- <h6 class="mb-5">{{ "translate.document" | transloco }}</h6> -->
  <div
    class="d-flex align-items-center justify-content-between flex-wrap gap-3"
  >
    <div class="language-tr-div">
      <p class="l-d auto-language">
        {{ "translate.language-detection" | transloco }}
      </p>
    </div>
    <div class="d-flex align-items-center justify-content-end">
      <!-- <div
        class="language-tr-div"
        (click)="chooseGe()"
        [ngClass]="selectedGEO ? 'selected-lanp-active' : ''"
      >
        <p>{{ "languages.ge" | transloco }}</p>
      </div>
      <div
        class="language-tr-div"
        (click)="chooseEn()"
        [ngClass]="selectedENG ? 'selected-lanp-active' : ''"
      >
        <p>{{ "languages.en" | transloco }}</p>
      </div>
      <select
        id="languageSelect"
        (change)="onInput($event)"
        class="form-select product-selection c-p shadow-none mx-w-15"
        aria-label="Large select example"
        [(ngModel)]="selectedLanguage"
        [ngModelOptions]="{ standalone: true }"
        required
        [ngClass]="{
          'error-text': languageNotSelected && selectedLanguage === '0',
          'selected-language-active':
            selectedLanguage && (selectedLanguage !== '0' && selectedLanguage !== '1' && selectedLanguage !== '2')
        }"
      >
        <option selected value="0" disabled>
          {{ "translate.language-options" | transloco }}
        </option>
        <option *ngFor="let language of languages" [value]="language.id">
          {{
            this._transloco.getActiveLang() == "ge"
              ? language.nameGeo
              : language.name
          }}
        </option>
      </select> -->
      <div
        class="language-tr-div"
        (click)="chooseGe()"
        [ngClass]="selectedGEO ? 'selected-lanp-active' : ''"
      >
        <p>{{ "languages.ge" | transloco }}</p>
      </div>
      <div
        class="language-tr-div"
        (click)="chooseEn()"
        [ngClass]="selectedENG ? 'selected-lanp-active' : ''"
      >
        <p>{{ "languages.en" | transloco }}</p>
      </div>
      <div
        @fadeIn
        *ngIf="selectedOther"
        class="language-tr-div"
        [ngClass]="selectedOther ? 'selected-lanp-active' : ''"
      >
        <p>{{
          this._transloco.getActiveLang() == "ge"
            ? this.selectedLanguage.nameGeo
            : this.selectedLanguage.name
        }}</p>
      </div>
      <button
        mat-icon-button
        [matMenuTriggerFor]="menu"
        aria-label="Example icon-button with a menu"
        class="position-relative"
      >
        <mat-icon class="mb-1">expand_more</mat-icon>
      </button>
      <mat-menu class="max-height-6" #menu="matMenu" xPosition="before">
        <button
          mat-menu-item
          *ngFor="let language of languages"
          [value]="language.id"
          (click)="selectLanguage(language)"
        >
          <span>{{
            this._transloco.getActiveLang() == "ge"
              ? language.nameGeo
              : language.name
          }}</span>
        </button>
      </mat-menu>
    </div>
  </div>
  <div class="image-container mb-5 d-flex">
    <div
      class="image-input"
      (dragover)="changeBack()"
      (dragleave)="changeBackLeave()"
      [ngClass]="[divStyle, isNotUpload ? 'error-text' : '']"
    >
      <div class="text-center drag-drop-container">
        <p class="p-0 m-0">
          <i class="bi bi-cloud-arrow-up-fill"></i><br /><span
            [innerHTML]="text"
          ></span>
        </p>
      </div>
      <input
        #myFileInput
        type="file"
        formControlName="files"
        class="translate-img"
        (change)="getImage($event)"
        accept=".pdf"
        multiple="true"
      />
    </div>
    <div
      class="image-preview with-m d-flex align-items-center justify-content-center flex-column"
      *ngIf="!translatedText && !isLoading"
    >
      <div
        *ngFor="let file of files; let index = index"
        class="file-div position-relative"
      >
        <p class="c-p file-name-text">
          <i class="bi bi-file-earmark-check-fill text-muted fs-5 me-2"></i
          >{{ file.name }}
        </p>
        <i
          class="bi bi-x-octagon position-absolute"
          (click)="deleteImage(index)"
        ></i>
      </div>

      <p *ngIf="!files" [ngClass]="isNotUpload ? 'error-text' : ''">
        {{ "translate.empty-file" | transloco }}
      </p>
      <small class="text-muted">{{ "translate.format-doc" | transloco }}</small>
    </div>
    <div
      class="image-preview d-flex align-items-center justify-content-center flex-column position-relative"
      *ngIf="translatedText"
      [ngClass]="translatedText ? 'w-100' : ''"
    >
      <i class="bi bi-copy text-muted" (click)="copyToClipboard()"></i>
      <i class="bi bi-download text-muted" (click)="downloadAsWord()"></i>
      <p
        class="px-2 pb-0 pt-2 m-0 w-100 overflow-y-scroll"
        #generatedResponse
        [innerHTML]="translatedText"
      ></p>
    </div>
    <div
      class="image-preview d-flex align-items-center justify-content-center flex-column"
      *ngIf="isLoading"
      [ngClass]="isLoading ? 'w-100' : ''"
    >
      <!-- <span class="loader-image-text"></span> -->
      <div class="pr-container my-1">
        <div class="progress-bar__container">
          <div class="progress-bar" #progressBar></div>
        </div>
      </div>
      <span class="progress-text mt-3 fw-bold slk-color"
        >{{ currentText }} {{ currentPercentage }}%</span
      >
    </div>
  </div>
  <!-- <span class="c-p slk-color" (click)="onText()">{{
    "tr-text-btn" | transloco
  }}</span> -->
  <!-- <div class="d-flex align-items-center justify-content-center gap-3"> -->
  <!-- <div class="text-center">
      <div class="btn-group dropup-center dropup">
        <button
          type="button"
          class="content-btn"
          data-bs-toggle="dropdown"
          aria-expanded="false"
        >
          <i class="bi bi-cloud-arrow-up"></i>
          {{ "attach-file" | transloco }}
        </button>
        <ul class="dropdown-menu">
          <li (click)="onImage()">
            <span class="dropdown-item c-p">{{
              "translate.photo" | transloco
            }}</span>
          </li>
          <li (click)="onDoc()">
            <span class="dropdown-item c-p">{{
              "translate.document" | transloco
            }}</span>
          </li>
        </ul>
      </div>
    </div> -->
  <div class="text-center">
    <button class="button content-btn" (click)="sendDocs()">
      <span class="button-content">{{
        "translate.translate" | transloco
      }}</span>
    </button>
  </div>
  <!-- </div> -->
</form>

----------------------------------------


=== File: src/app/dashboard/modules/translate-options/doc/doc.component.scss [STYLE] ===
----------------------------------------
@media screen and (max-width: 668px) {
  .image-container {
    flex-direction: column;
  }
  .image-input,
  .image-preview {
    width: 100%;
    min-height: 150px;
  }
  .image-preview {
    border-top: 0.25px solid rgba(128, 128, 128, 0.1);
  }
  .image-input {
    border-radius: 10px !important;
  }
}

@media screen and (min-width: 669px) {
  .image-input,
  .image-preview {
    width: 50%;
  }
}

.image-container {
  min-height: 18rem;
  max-height: 30rem;
  border: 1px solid rgba(128, 128, 128, 0.4);
  border-radius: 10px;
  .translate-img {
    opacity: 0;
    cursor: pointer;
    height: 250px;
    width: 100%;
  }
  .image-preview {
    border-left: 0.25px solid rgba(128, 128, 128, 0.1);
  }
  .image-preview.with-m {
    padding-top: 7rem;
    padding-bottom: 7rem;
  }
  .image-input {
    position: relative;
    transition: all 0.5s ease;
    border-top-left-radius: 10px;
    border-bottom-left-radius: 10px;
    cursor: pointer;
    .drag-drop-container {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      .bi {
        line-height: 5px;
        color: #3b5af358;
        font-size: 10rem;
        display: inline-block;
        height: 5px;
      }
    }
  }
}

/* HTML: <div class="loader"></div> */
/* HTML: <div class="loader"></div> */
.loader {
  width: fit-content;
  font-weight: 500;
  font-size: 16px;
  background: radial-gradient(circle closest-side, #3d3a4e 94%, #0000)
    right/calc(200% - 1em) 100%;
  animation: l24 1s infinite alternate linear;
}
.loader::before {
  content: "Loading...";
  line-height: 1em;
  color: #0000;
  background: inherit;
  background-image: radial-gradient(circle closest-side, #fff 94%, #3b59f3);
  -webkit-background-clip: text;
  background-clip: text;
}

@keyframes l24 {
  100% {
    background-position: left;
  }
}

.loader-image-text {
  width: 84px;
  height: 84px;
  position: relative;
}
.loader-image-text:before,
.loader-image-text:after {
  content: "";
  position: absolute;
  right: 0;
  top: 0;
  width: 84px;
  height: 84px;
  border-radius: 50%;
  background: #3b59f3;
  animation: push 1s infinite linear alternate;
}
.loader-image-text:after {
  top: auto;
  bottom: 0;
  left: 0;
  background: #000000;
  animation-direction: alternate-reverse;
}
@keyframes push {
  0% {
    width: 14px;
    height: 14px;
  }
  100% {
    width: 84px;
    height: 84px;
  }
}

*::-webkit-scrollbar {
  height: 50%;
  width: 0.2rem !important;
  background-color: #eeeeee !important; /* or add it to the track */
  border-radius: 1rem;
}

*::-webkit-scrollbar-thumb {
  border-radius: 1rem;
  background: #8f8f8f !important;
}

.bi-copy,
.bi-download {
  background-color: white;
  position: absolute;
  top: 2px;
  border-radius: 50%;
  cursor: pointer;
  padding: 6px 10px;
  &:hover {
    background-color: rgb(228, 228, 228);
  }
}

.bi-download {
  left: 6px;
}

.bi-copy {
  right: 6px;
}

----------------------------------------


=== File: src/app/dashboard/modules/translate-options/doc/doc.component.ts [COMPONENT] ===
----------------------------------------
import {
  Component,
  ElementRef,
  OnInit,
  Renderer2,
  ViewChild,
} from '@angular/core';
import { Language } from '../../../../shared/interfaces/language.interface';
import { ToastrService } from 'ngx-toastr';
import { FormBuilder, Validators } from '@angular/forms';
import { AuthService } from '../../../../shared/services/auth.service';
import { BalanceService } from '../../../../shared/services/balance.service';
import { HttpService } from '../../../../shared/services/http.service';
import { url } from '../../../../shared/data/api';
import gsap from 'gsap';
import { TextToWordService } from '../../../../shared/services/text-to-word.service';
import { ProductCategoryService } from '../../../../shared/services/product-category.service';
import { Router } from '@angular/router';
import { TranslocoService } from '@ngneat/transloco';
import { ImageComponent } from '../image/image.component';
import { TranslateActiveService } from '../../../../shared/services/translate-active.service';
import { TextComponent } from '../text/text.component';
import { animate, style, transition, trigger } from '@angular/animations';
import { LanguageSelectionService } from '../../../../shared/services/language-selection.service';

@Component({
  selector: 'app-doc',
  templateUrl: './doc.component.html',
  animations: [
    trigger('fadeIn', [
      transition(':enter', [
        style({ opacity: 0 }),
        animate('0.2s ease-in', style({ opacity: 1 })),
      ]),
    ]),
  ],
  styleUrl: './doc.component.scss',
})
export class DocComponent implements OnInit {
  @ViewChild('generatedResponse', { static: false })
  generatedResponse!: ElementRef;
  @ViewChild('myFileInput') myFileInput: any;
  @ViewChild('progressBar') progressBar!: ElementRef;

  progressBarStates: number[] = Array.from({ length: 34 }, (_, i) => i * 3);
  time = 0;
  endState = 100;
  timeouts: any[] = [];
  currentPercentage = 0;
  currentText = 'სულიკო იწყებს';

  texts = [
    'სულიკო იწყებს',
    'ვმუშაობთ თარგმანზე',
    'პროცესში ვართ',
    'სულ ცოტაც',
    'რამდენიმე წამიც',
    'ბოლო შტრიხებიც',
  ];

  divStyle = '';
  text = `Drag and drop or <span class="text-primary c-p">Browse</span>`;

  isLoggedIn: boolean = false;
  userID: string = '';
  userInfo: any;
  userInfoUpdate: any;
  balance: any;

  files: any;
  isLoading: boolean = false;
  selectedLanguage: any;
  selectedLanguageID = '0';
  selectedSourceLanguage = '-1';

  isPdf = 'true';
  description = '';

  copyBtn: boolean = false;
  translatedText!: string;

  languageNotSelected = false;
  selectedGEO = false;
  selectedENG = false;
  selectedOther = false;
  isNotUpload = false;

  languages: Language[] = [];

  constructor(
    private toastr: ToastrService,
    private builder: FormBuilder,
    private apiService: HttpService,
    private authService: AuthService,
    private router: Router,
    private balanceService: BalanceService,
    private renderer: Renderer2,
    private docxService: TextToWordService,
    private languageService: ProductCategoryService,
    public _transloco: TranslocoService,
    private _translateActive: TranslateActiveService,
    private languageSelectionService: LanguageSelectionService
  ) {}

  docTranslateForm = this.builder.group({
    files: this.builder.control(``, Validators.required),
  });

  ngOnInit() {
    this.balanceService
      .getBalance()
      .subscribe((value) => (this.balance = value));
    if (this.isLoggedIn) {
      this.languageService.getLanguage(url.language).subscribe(
        (response: any) => {
          this.languages = response;
          // Load saved language after languages are loaded
          const savedLangId = sessionStorage.getItem('docSelectedTargetLanguage');
          if (savedLangId) {
            const language = this.languages.find(l => l.id.toString() === savedLangId);
            if (language) {
              this.selectLanguage(language, false);
            }
          }
        },
        (error) => {
          console.error('Error fetching languages', error);
        }
      );
    } else {
      this.languageService.getFreeLanguage(url.language).subscribe(
        (response: any) => {
          this.languages = response;
          // Load saved language after languages are loaded
          const savedLangId = sessionStorage.getItem('docSelectedTargetLanguage');
          if (savedLangId) {
            const language = this.languages.find(l => l.id.toString() === savedLangId);
            if (language) {
              this.selectLanguage(language, false);
            }
          }
        },
        (error) => {
          console.error('Error fetching languages', error);
        }
      );
    }
    this._transloco.langChanges$.subscribe((lang) => {
      this.setDropText(lang);
    });
    this.setDropText(this._transloco.getActiveLang());
  }

  sendDocs() {
    if (this.selectedLanguageID === '0') {
      this.languageNotSelected = true;
      return;
    }
    if (!this.docTranslateForm.valid) {
      // this.toastr.error(this._transloco.translate('translate.upload-file'));
      this.isNotUpload = true;
      return;
    }
    if (
      this.apiService.hasExceededFreeRequests() && !this.authService.isAuthenticated()
    ) {
      this.toastr.error(this._transloco.translate('error-toastr.registration'));
      this.router.navigate(['/sign-up']);
      return;
    }
    if (this.balance <= 0) {
      this.toastr.error(this._transloco.translate('error-toastr.balance'));
      this.router.navigate(['/services/balance']);
      return;
    }
    if (this.isLoading) return;
    this.isLoading = true;
    this.animateProgressBar();
    this.divStyle = 'd-none';

    var formData = new FormData();
    formData.append('description', this.description);
    formData.append('languageId', this.selectedLanguageID);
    formData.append('sourceLanguageId', this.selectedSourceLanguage);
    [...this.files].forEach((file) => {
      formData.append('files', file, file.name);
    });
    formData.append('isPdf', this.isPdf);

    if (!this.authService.isAuthenticated()) {
      this.apiService.postFreeTranslate(url.fileTranslate, formData).subscribe(
        (response: any) => {
          this.translatedText = response.text;
          this.isLoading = !this.isLoading;
          this.stopProgressBarAnimation();
        },
        (error) => {
          this.toastr.error(`${error.error.errorText}`);
          this.isLoading = !this.isLoading;
          this.divStyle = '';
          console.log(error);
        }
      );
    } else {
      this.apiService.postTranslate(url.fileTranslate, formData).subscribe(
        (response: any) => {
          this.translatedText = response.text;
          this.isLoading = !this.isLoading;
          this.stopProgressBarAnimation();

          var user = this.authService.userInfo();
          if (this.isLoggedIn) {
            this.userID = user.UserId;
            this.apiService.get(url.user, this.userID).subscribe(
              (res) => {
                this.userInfoUpdate = JSON.parse(res);
                this.balanceService.setBalance(this.userInfoUpdate.balance);
                this.apiService
                  .updateUserInfo('/api/User', this.userInfoUpdate)
                  .subscribe();
              },
              (err) => {
                this.toastr.error(`${err.error.errorText}`);
                this.isLoading = !this.isLoading;
                this.stopProgressBarAnimation();
                console.log(err);
              }
            );
          }
        },
        (error) => {
          this.toastr.error(`${error.error.errorText}`);
          this.isLoading = !this.isLoading;
          this.divStyle = '';
          console.log(error);
        }
      );
    }
  }

  downloadAsWord() {
    var textToCopy = this.generatedResponse.nativeElement.innerText;
    this.docxService.createDocument(textToCopy);
  }

  getImage(event: any) {
    const fileInput = event.target as HTMLInputElement;
    const file: FileList = event.target.files;
    if (file) {
      this.files = Array.from(file);
      // this.changeBackLeave();
      this.isNotUpload = false;
    }
    // this.changeBackLeave();
    fileInput.value = '';
  }

  deleteImage(index: number) {
    if (index > -1 && index < this.files.length) {
      this.files.splice(index, 1);
    }
  }

  changeBack() {
    this.divStyle = 'dragover';
    this.text = `<span class="text-white">ჩააგდეთ</span><br><br>`;
  }

  changeBackLeave() {
    this.divStyle = '';
    this.text = `Drag and drop or <span class="text-primary c-p">Browse</span> file(s)`;
  }

  selectLanguage(lang: any, saveToStorage: boolean = true) {
    this.selectedLanguage = lang;
    this.selectedLanguageID = lang.id.toString();
    if (this.selectedLanguageID === '1') {
      this.selectedENG = false;
      this.selectedGEO = true;
      this.selectedOther = false;
    } else if (this.selectedLanguageID === '2') {
      this.selectedENG = true;
      this.selectedGEO = false;
      this.selectedOther = false;
    } else {
      this.selectedENG = false;
      this.selectedGEO = false;
      this.selectedOther = true;
    }
    if (saveToStorage) {
      this.languageSelectionService.setDocTargetLanguage(this.selectedLanguageID);
    }
  }

  chooseGe() {
    this.selectedENG = false;
    this.selectedLanguageID = '1';
    this.selectedGEO = true;
    this.selectedOther = false;
    this.languageSelectionService.setDocTargetLanguage(this.selectedLanguageID);
  }

  chooseEn() {
    this.selectedGEO = false;
    this.selectedLanguageID = '2';
    this.selectedENG = true;
    this.selectedOther = false;
    this.languageSelectionService.setDocTargetLanguage(this.selectedLanguageID);
  }

  setDropText(lang: string) {
    if (lang === 'en') {
      this.text =
        'Drag and drop or <span class="text-primary c-p">Browse</span> file(s)';
    } else {
      this.text =
        'ჩააგდეთ ან <span class="slk-color c-p">ატვირთეთ</span> ფაილი/ფაილები';
    }
  }

  onImage() {
    this._translateActive.setActiveComponent(ImageComponent);
  }

  onDoc() {
    this._translateActive.setActiveComponent(DocComponent);
  }

  onText() {
    this._translateActive.setActiveComponent(TextComponent);
  }

  copyToClipboard() {
    var textToCopy = this.generatedResponse.nativeElement.innerText;
    const textarea = this.renderer.createElement('textarea');
    this.renderer.setProperty(textarea, 'value', textToCopy);
    this.renderer.appendChild(document.body, textarea);

    textarea.select();
    document.execCommand('copy');

    this.renderer.removeChild(document.body, textarea);
    this.toastr.success('Copied to clipboard');
  }

  animateProgressBar() {
    if (this.isLoading) {
      this.progressBarStates.forEach((state) => {
        let randomTime = Math.floor(Math.random() * 2000);
        const timeoutId = setTimeout(() => {
          gsap.to(this.progressBar.nativeElement, {
            x: `${state}%`,
            duration: 4,
          });
          this.currentPercentage = state;
          this.currentText =
            this.texts[Math.floor((state / 100) * (this.texts.length - 1))];
        }, randomTime + this.time);
        this.timeouts.push(timeoutId);
        this.time += randomTime;
      });
    }
  }

  stopProgressBarAnimation() {
    this.timeouts.forEach((timeoutId) => clearTimeout(timeoutId));
    this.timeouts = [];
    this.time = 0;
  }
}

----------------------------------------


=== File: src/app/dashboard/modules/translate-options/image/image.component.html [HTML] ===
----------------------------------------
<form [formGroup]="imageTranslateForm" @fadeIn>
  <!-- <h6 class="mb-5">{{ "translate.photo" | transloco }}</h6> -->
  <div
    class="d-flex align-items-center justify-content-between flex-wrap gap-3"
  >
    <div class="d-flex align-items-center justify-content-start">
      <!-- <select
        id="languageSourceSelect"
        (change)="selectSourceLanguage()"
        class="form-select product-selection c-p shadow-none mx-w-15"
        aria-label="Large select example"
        [(ngModel)]="selectedSourceLanguage"
        [ngModelOptions]="{ standalone: true }"
        [ngClass]="{
          'error-text': sourceLanguageNotSelected && selectedSourceLanguage === '0',
          'selected-language-active':
            selectedSourceLanguage && (selectedSourceLanguage !== '0' && selectedSourceLanguage !== '1' && selectedSourceLanguage !== '2')
        }"
        required
      >
        <option selected value="0" disabled>
          {{ "translate.language-main" | transloco }}
        </option>
        <option *ngFor="let language of languages" [value]="language.id">
          {{
            this._transloco.getActiveLang() == "ge"
              ? language.nameGeo
              : language.name
          }}
        </option>
      </select> -->
      <button
        mat-icon-button
        [matMenuTriggerFor]="smenu"
        aria-label="Example icon-button with a menu"
        class="position-relative"
      >
        <mat-icon class="mb-1">expand_more</mat-icon>
      </button>
      <mat-menu class="max-height-6" #smenu="matMenu" xPosition="after">
        <button
          mat-menu-item
          *ngFor="let language of languages"
          [value]="language.id"
          (click)="selectSourceLanguage(language)"
        >
          <span>{{
            this._transloco.getActiveLang() == "ge"
              ? language.nameGeo
              : language.name
          }}</span>
        </button>
      </mat-menu>
      <div
        @fadeIn
        *ngIf="selectedSourceOther"
        class="language-tr-div"
        [ngClass]="{
          'selected-language-active':
            selectedSourceLanguageID && (selectedSourceLanguageID !== '0' && selectedSourceLanguageID !== '1' && selectedSourceLanguageID !== '2'),
          'selected-lanp-active': selectedSourceOther
        }"
      >
        <p>{{
          this._transloco.getActiveLang() == "ge"
            ? this.selectedSourceLanguage.nameGeo
            : this.selectedSourceLanguage.name
        }}</p>
      </div>
      <div
        class="language-tr-div"
        (click)="chooseSourceGe()"
        [ngClass]="[selectedSourceGEO ? 'selected-lanp-active' : '']"
      >
        <p>{{ "languages.ge" | transloco }}</p>
      </div>
      <div
        class="language-tr-div"
        (click)="chooseSourceEn()"
        [ngClass]="selectedSourceENG ? 'selected-lanp-active' : ''"
      >
        <p>{{ "languages.en" | transloco }}</p>
      </div>
    </div>

    <div class="d-flex align-items-center justify-content-end">
      <div
        class="language-tr-div"
        (click)="chooseGe()"
        [ngClass]="selectedGEO ? 'selected-lanp-active' : ''"
      >
        <p>{{ "languages.ge" | transloco }}</p>
      </div>
      <div
        class="language-tr-div"
        (click)="chooseEn()"
        [ngClass]="selectedENG ? 'selected-lanp-active' : ''"
      >
        <p>{{ "languages.en" | transloco }}</p>
      </div>
      <div
        @fadeIn
        *ngIf="selectedOther"
        class="language-tr-div"
        [ngClass]="selectedOther ? 'selected-lanp-active' : ''"
      >
        <p>{{
          this._transloco.getActiveLang() == "ge"
            ? this.selectedLanguage.nameGeo
            : this.selectedLanguage.name
        }}</p>
      </div>
      <button
        mat-icon-button
        [matMenuTriggerFor]="menu"
        aria-label="Example icon-button with a menu"
        class="position-relative"
      >
        <mat-icon class="mb-1">expand_more</mat-icon>
      </button>
      <mat-menu class="max-height-6" #menu="matMenu" xPosition="before">
        <button
          mat-menu-item
          *ngFor="let language of languages"
          [value]="language.id"
          (click)="selectLanguage(language)"
        >
          <span>{{
            this._transloco.getActiveLang() == "ge"
              ? language.nameGeo
              : language.name
          }}</span>
        </button>
      </mat-menu>
    </div>
  </div>
  <div class="image-container mb-5 d-flex">
    <div
      class="image-input"
      (dragover)="changeBack()"
      (dragleave)="changeBackLeave()"
      [ngClass]="[divStyle]"
    >
      <div class="text-center drag-drop-container">
        <p class="p-0 m-0">
          <i class="bi bi-cloud-arrow-up-fill"></i><br /><span
            [innerHTML]="text"
          ></span>
        </p>
      </div>
      <input
        type="file"
        formControlName="files"
        class="translate-img"
        (change)="getImage($event)"
        accept=".png, .jpeg, .webp, .gif"
        #myFileInput
        multiple
      />
    </div>
    <div
      class="image-preview with-m d-flex align-items-center flex-column overflow-y-auto"
      *ngIf="!translatedText && !isLoading"
    >
      <div
        *ngFor="let file of files; let index = index"
        class="file-div position-relative"
      >
        <p class="c-p file-name-text">
          <i class="bi bi-file-earmark-check-fill text-muted fs-5 me-2"></i
          >{{ file.name }}
        </p>
        <i
          class="bi bi-x-octagon position-absolute"
          (click)="deleteImage(index)"
        ></i>
      </div>

      <p *ngIf="!files">{{ "translate.empty-photo" | transloco }}</p>
      <small class="text-muted text-center">{{
        "translate.format-img" | transloco
      }}</small>
    </div>
    <div
      class="image-preview d-flex align-items-center justify-content-center flex-column position-relative"
      *ngIf="translatedText"
      [ngClass]="translatedText ? 'w-100' : ''"
    >
      <i class="bi bi-copy text-muted" (click)="copyToClipboard()"></i>
      <i class="bi bi-download text-muted" (click)="downloadAsWord()"></i>
      <p
        class="px-2 pb-0 pt-2 m-0 overflow-y-scroll"
        #generatedResponse
        [innerHTML]="translatedText"
      ></p>
    </div>
    <div
      class="image-preview d-flex align-items-center justify-content-center flex-column"
      *ngIf="isLoading"
      [ngClass]="isLoading ? 'w-100' : ''"
    >
      <!-- <span class="loader-image-text"></span> -->
      <div class="pr-container my-1">
        <div class="progress-bar__container">
          <div class="progress-bar" #progressBar></div>
        </div>
      </div>
      <span class="progress-text mt-3 fw-bold slk-color"
        >{{ currentText }} {{ currentPercentage }}%</span
      >
    </div>
  </div>
  <!-- <span class="c-p slk-color" (click)="onText()">{{
    "tr-text-btn" | transloco
  }}</span> -->
  <!-- <div class="d-flex align-items-center justify-content-center gap-3"> -->
  <!-- <div class="text-center">
      <div class="btn-group dropup-center dropup">
        <button
          type="button"
          class="content-btn"
          data-bs-toggle="dropdown"
          aria-expanded="false"
        >
          <i class="bi bi-cloud-arrow-up"></i>
          {{ "attach-file" | transloco }}
        </button>
        <ul class="dropdown-menu">
          <li (click)="onImage()">
            <span class="dropdown-item c-p">{{
              "translate.photo" | transloco
            }}</span>
          </li>
          <li (click)="onDoc()">
            <span class="dropdown-item c-p">{{
              "translate.document" | transloco
            }}</span>
          </li>
        </ul>
      </div>
    </div> -->
  <div class="text-center">
    <button class="button content-btn" (click)="sendImages()">
      <span class="button-content">{{
        "translate.translate" | transloco
      }}</span>
    </button>
  </div>
  <!-- </div> -->
</form>

----------------------------------------


=== File: src/app/dashboard/modules/translate-options/image/image.component.scss [STYLE] ===
----------------------------------------
@media screen and (max-width: 668px) {
  .image-container {
    flex-direction: column;
  }
  .image-input,
  .image-preview {
    width: 100%;
    min-height: 150px;
  }
  .image-preview {
    border-top: 0.25px solid rgba(128, 128, 128, 0.1);
  }
  .image-input {
    border-radius: 10px !important;
  }
}

@media screen and (min-width: 669px) {
  .image-input,
  .image-preview {
    width: 50%;
  }
}

#languageSelect,
#languageSourceSelect {
  max-width: 15rem;
}

.image-container {
  min-height: 18rem;
  max-height: 30rem;
  border: 1px solid rgba(128, 128, 128, 0.4);
  border-radius: 10px;
  .translate-img {
    opacity: 0;
    cursor: pointer;
    height: 250px;
    width: 100%;
  }
  .image-preview {
    border-left: 0.25px solid rgba(128, 128, 128, 0.1);
  }
  .image-preview.with-m {
    padding-top: 7rem;
    padding-bottom: 7rem;
  }
  .image-input {
    position: relative;
    transition: all 0.5s ease;
    border-top-left-radius: 10px;
    border-bottom-left-radius: 10px;
    cursor: pointer;
    .drag-drop-container {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      .bi {
        line-height: 5px;
        color: #3b5af358;
        font-size: 10rem;
        display: inline-block;
        height: 5px;
      }
    }
  }
}

/* HTML: <div class="loader"></div> */
/* HTML: <div class="loader"></div> */
.loader {
  width: fit-content;
  font-weight: 500;
  font-size: 16px;
  background: radial-gradient(circle closest-side, #3d3a4e 94%, #0000)
    right/calc(200% - 1em) 100%;
  animation: l24 1s infinite alternate linear;
}
.loader::before {
  content: "Loading...";
  line-height: 1em;
  color: #0000;
  background: inherit;
  background-image: radial-gradient(circle closest-side, #fff 94%, #3b59f3);
  -webkit-background-clip: text;
  background-clip: text;
}

@keyframes l24 {
  100% {
    background-position: left;
  }
}

.loader-image-text {
  width: 84px;
  height: 84px;
  position: relative;
}
.loader-image-text:before,
.loader-image-text:after {
  content: "";
  position: absolute;
  right: 0;
  top: 0;
  width: 84px;
  height: 84px;
  border-radius: 50%;
  background: #3b59f3;
  animation: push 1s infinite linear alternate;
}
.loader-image-text:after {
  top: auto;
  bottom: 0;
  left: 0;
  background: #000000;
  animation-direction: alternate-reverse;
}
@keyframes push {
  0% {
    width: 14px;
    height: 14px;
  }
  100% {
    width: 84px;
    height: 84px;
  }
}

*::-webkit-scrollbar {
  height: 50%;
  width: 0.2rem !important;
  background-color: #eeeeee !important; /* or add it to the track */
  border-radius: 1rem;
}

*::-webkit-scrollbar-thumb {
  border-radius: 1rem;
  background: #8f8f8f !important;
}

.bi-copy,
.bi-download {
  background-color: white;
  position: absolute;
  top: 2px;
  border-radius: 50%;
  cursor: pointer;
  padding: 6px 10px;
  &:hover {
    background-color: rgb(228, 228, 228);
  }
}

.bi-download {
  left: 6px;
}

.bi-copy {
  right: 6px;
}

----------------------------------------


=== File: src/app/dashboard/modules/translate-options/image/image.component.ts [COMPONENT] ===
----------------------------------------
import { Component, ElementRef, Renderer2, ViewChild } from '@angular/core';
import { Language } from '../../../../shared/interfaces/language.interface';
import { ToastrService } from 'ngx-toastr';
import { FormBuilder, Validators } from '@angular/forms';
import { HttpService } from '../../../../shared/services/http.service';
import { AuthService } from '../../../../shared/services/auth.service';
import { BalanceService } from '../../../../shared/services/balance.service';
import { url } from '../../../../shared/data/api';
import { TextToWordService } from '../../../../shared/services/text-to-word.service';
import gsap from 'gsap';
import { ProductCategoryService } from '../../../../shared/services/product-category.service';
import { Router } from '@angular/router';
import { TranslocoService } from '@ngneat/transloco';
import { DocComponent } from '../doc/doc.component';
import { TranslateActiveService } from '../../../../shared/services/translate-active.service';
import { TextComponent } from '../text/text.component';
import { animate, style, transition, trigger } from '@angular/animations';
import { LanguageSelectionService } from '../../../../shared/services/language-selection.service';

@Component({
  selector: 'app-image',
  templateUrl: './image.component.html',
  animations: [
    trigger('fadeIn', [
      transition(':enter', [
        style({ opacity: 0 }),
        animate('0.2s ease-in', style({ opacity: 1 })),
      ]),
    ]),
  ],
  styleUrl: './image.component.scss',
})
export class ImageComponent {
  @ViewChild('generatedResponse', { static: false })
  generatedResponse!: ElementRef;
  @ViewChild('myFileInput') myFileInput: any;
  @ViewChild('progressBar') progressBar!: ElementRef;

  progressBarStates: number[] = Array.from({ length: 34 }, (_, i) => i * 3);
  time = 0;
  endState = 100;
  timeouts: any[] = [];
  currentPercentage = 0;
  currentText = 'სულიკო იწყებს';

  texts = [
    'სულიკო იწყებს',
    'ვმუშაობთ თარგმანზე',
    'პროცესში ვართ',
    'სულ ცოტაც',
    'რამდენიმე წამიც',
    'ბოლო შტრიხებიც',
  ];

  divStyle = '';
  text = `Drag and drop or <span class="slk-color c-p">Browse</span>`;

  isLoggedIn: boolean = false;
  userID: string = '';
  userInfo: any;
  userInfoUpdate: any;
  balance: any;

  files: any;
  isLoading: boolean = false;

  selectedLanguage: any;
  selectedLanguageID: any = '0';

  selectedSourceLanguage: any;
  selectedSourceLanguageID: any = '0';

  uniqueKey = '00a48775-c474-49d4-9705-46c9c67e512a';

  isPdf = 'false';
  description = '';

  copyBtn: boolean = false;
  translatedText: any;

  languageNotSelected = false;
  sourceLanguageNotSelected = false;

  selectedGEO = false;
  selectedENG = false;
  selectedOther = false;

  selectedSourceGEO = false;
  selectedSourceENG = false;
  selectedSourceOther = false;

  languages: Language[] = [];

  constructor(
    private toastr: ToastrService,
    private builder: FormBuilder,
    private apiService: HttpService,
    private authService: AuthService,
    private router: Router,
    private balanceService: BalanceService,
    private renderer: Renderer2,
    private docxService: TextToWordService,
    private languageService: ProductCategoryService,
    public _transloco: TranslocoService,
    private _translateActive: TranslateActiveService,
    private languageSelectionService: LanguageSelectionService
  ) {}

  ngOnInit() {
    this.balanceService
      .getBalance()
      .subscribe((value) => (this.balance = value));
    if (this.isLoggedIn) {
      this.languageService.getLanguage(url.language).subscribe(
        (response: any) => {
          this.languages = response;
          // Load saved languages after languages are loaded
          const savedSourceLangId = sessionStorage.getItem('imageSelectedSourceLanguage');
          const savedTargetLangId = sessionStorage.getItem('imageSelectedTargetLanguage');
          
          if (savedSourceLangId) {
            const sourceLanguage = this.languages.find(l => l.id.toString() === savedSourceLangId);
            if (sourceLanguage) {
              this.selectSourceLanguage(sourceLanguage, false);
            }
          }
          
          if (savedTargetLangId) {
            const targetLanguage = this.languages.find(l => l.id.toString() === savedTargetLangId);
            if (targetLanguage) {
              this.selectLanguage(targetLanguage, false);
            }
          }
        },
        (error) => {
          console.error('Error fetching languages', error);
        }
      );
    } else {
      this.languageService.getFreeLanguage(url.language).subscribe(
        (response: any) => {
          this.languages = response;
          // Load saved languages after languages are loaded
          const savedSourceLangId = sessionStorage.getItem('imageSelectedSourceLanguage');
          const savedTargetLangId = sessionStorage.getItem('imageSelectedTargetLanguage');
          
          if (savedSourceLangId) {
            const sourceLanguage = this.languages.find(l => l.id.toString() === savedSourceLangId);
            if (sourceLanguage) {
              this.selectSourceLanguage(sourceLanguage, false);
            }
          }
          
          if (savedTargetLangId) {
            const targetLanguage = this.languages.find(l => l.id.toString() === savedTargetLangId);
            if (targetLanguage) {
              this.selectLanguage(targetLanguage, false);
            }
          }
        },
        (error) => {
          console.error('Error fetching languages', error);
        }
      );
    }
    this._transloco.langChanges$.subscribe((lang) => {
      this.setDropText(lang);
    });
    this.setDropText(this._transloco.getActiveLang());
  }

  imageTranslateForm = this.builder.group({
    files: this.builder.control(``, Validators.required),
  });

  sendImages() {
    switch (true) {
      case this.selectedLanguageID === '0' && this.selectedSourceLanguageID === '0':
        this.languageNotSelected = true;
        this.sourceLanguageNotSelected = true;
        return;
      case this.selectedLanguageID === '0':
        this.languageNotSelected = true;
        return;
      case this.selectedSourceLanguageID === '0':
        this.sourceLanguageNotSelected = true;
        return;
      default:
        break;
    }
    if (!this.imageTranslateForm.valid) {
      this.toastr.error(this._transloco.translate('translate.upload-img'));
      return;
    } else if (
      this.apiService.hasExceededFreeRequests() && !this.authService.isAuthenticated()
    ) {
      this.toastr.error(this._transloco.translate('error-toastr.registration'));
      this.router.navigate(['/sign-up']);
      return;
    } else if (this.balance <= 0) {
      this.toastr.error(this._transloco.translate('error-toastr.balance'));
      this.router.navigate(['/services/balance']);
      return;
    } else if (this.isLoading) return;
    this.isLoading = true;
    this.animateProgressBar();
    this.divStyle = 'd-none';

    var formData = new FormData();
    formData.append('description', this.description);
    formData.append('languageId', this.selectedLanguageID);
    formData.append('sourceLanguageId', this.selectedSourceLanguageID);
    [...this.files].forEach((file) => {
      formData.append('files', file, file.name);
    });
    formData.append('isPdf', this.isPdf);

    if (!this.authService.isAuthenticated()) {
      this.apiService.postFreeTranslate(url.fileTranslate, formData).subscribe(
        (response: any) => {
          this.translatedText = response.text;
          this.isLoading = !this.isLoading;
          this.stopProgressBarAnimation();
        },
        (error) => {
          this.toastr.error(`${error.error.errorText}`);
          this.isLoading = !this.isLoading;
          this.stopProgressBarAnimation();
          console.log(error);
        }
      );
    } else {
      this.apiService.postTranslate(url.fileTranslate, formData).subscribe(
        (response: any) => {
          this.translatedText = response.text;
          this.isLoading = !this.isLoading;
          this.stopProgressBarAnimation();

          var user = this.authService.userInfo();
          if (this.isLoggedIn) {
            this.userID = user.UserId;
            this.apiService.get(url.user, this.userID).subscribe(
              (res) => {
                this.userInfoUpdate = JSON.parse(res);
                this.balanceService.setBalance(this.userInfoUpdate.balance);
                this.apiService
                  .updateUserInfo('/api/User', this.userInfoUpdate)
                  .subscribe();
              },
              (err) => {
                console.log(err);
              }
            );
          }
        },
        (error) => {
          this.toastr.error(`${error.error.errorText}`);
          this.isLoading = !this.isLoading;
          this.stopProgressBarAnimation();
          console.log(error);
        }
      );
    }
  }

  getImage(event: any) {
    const fileInput = event.target as HTMLInputElement;
    const file: FileList = event.target.files;
    if (file) {
      this.files = Array.from(file);
      // this.changeBackLeave();
    }
    // this.changeBackLeave();
    fileInput.value = '';
  }

  deleteImage(index: number) {
    if (index > -1 && index < this.files.length) {
      this.files.splice(index, 1);
    }
  }

  downloadAsWord() {
    var textToCopy = this.generatedResponse.nativeElement.innerText;
    this.docxService.createDocument(textToCopy);
  }

  changeBack() {
    this.divStyle = 'dragover';
    this.text = `<span class="text-white">ჩააგდეთ</span><br><br>`;
  }

  changeBackLeave() {
    this.divStyle = '';
    this.text = `Drag and drop or <span class="slk-color c-p">Browse</span>`;
  }

  setDropText(lang: string) {
    if (lang === 'en') {
      this.text =
        'Drag and drop or <span class="slk-color c-p">Browse</span> image(s)';
    } else {
      this.text =
        'ჩააგდეთ ან <span class="slk-color c-p">ატვირთეთ</span> ფოტო/ფოტოები';
    }
  }

  selectLanguage(lang: any, saveToStorage: boolean = true) {
    this.selectedLanguage = lang;
    this.selectedLanguageID = lang.id.toString();
    if (this.selectedLanguageID === '1') {
      this.selectedENG = false;
      this.selectedGEO = true;
      this.selectedOther = false;
    } else if (this.selectedLanguageID === '2') {
      this.selectedENG = true;
      this.selectedGEO = false;
      this.selectedOther = false;
    } else {
      this.selectedENG = false;
      this.selectedGEO = false;
      this.selectedOther = true;
    }
    if (saveToStorage) {
      this.languageSelectionService.setImageTargetLanguage(this.selectedLanguageID);
    }
  }

  chooseGe() {
    this.selectedENG = false;
    this.selectedLanguageID = '1';
    this.selectedGEO = true;
    this.selectedOther = false;
    this.languageSelectionService.setImageTargetLanguage(this.selectedLanguageID);
  }

  chooseEn() {
    this.selectedGEO = false;
    this.selectedLanguageID = '2';
    this.selectedENG = true;
    this.selectedOther = false;
    this.languageSelectionService.setImageTargetLanguage(this.selectedLanguageID);
  }

  selectSourceLanguage(lang: any, saveToStorage: boolean = true) {
    this.selectedSourceLanguage = lang;
    this.selectedSourceLanguageID = lang.id.toString();
    if (this.selectedSourceLanguageID === '1') {
      this.selectedSourceENG = false;
      this.selectedSourceGEO = true;
      this.selectedSourceOther = false;
    } else if (this.selectedSourceLanguageID === '2') {
      this.selectedSourceENG = true;
      this.selectedSourceGEO = false;
      this.selectedSourceOther = false;
    } else {
      this.selectedSourceENG = false;
      this.selectedSourceGEO = false;
      this.selectedSourceOther = true;
    }
    if (saveToStorage) {
      this.languageSelectionService.setImageSourceLanguage(this.selectedSourceLanguageID);
    }
  }

  chooseSourceGe() {
    this.selectedSourceENG = false;
    this.selectedSourceLanguageID = '1';
    this.selectedSourceGEO = true;
    this.selectedSourceOther = false;
    this.languageSelectionService.setImageSourceLanguage(this.selectedSourceLanguageID);
  }

  chooseSourceEn() {
    this.selectedSourceGEO = false;
    this.selectedSourceLanguageID = '2';
    this.selectedSourceENG = true;
    this.selectedSourceOther = false;
    this.languageSelectionService.setImageSourceLanguage(this.selectedSourceLanguageID);
  }

  onImage() {
    this._translateActive.setActiveComponent(ImageComponent);
  }

  onDoc() {
    this._translateActive.setActiveComponent(DocComponent);
  }

  onText() {
    this._translateActive.setActiveComponent(TextComponent);
  }

  copyToClipboard() {
    var textToCopy = this.generatedResponse.nativeElement.innerText;
    const textarea = this.renderer.createElement('textarea');
    this.renderer.setProperty(textarea, 'value', textToCopy);

    this.renderer.appendChild(document.body, textarea);

    textarea.select();
    document.execCommand('copy');

    this.renderer.removeChild(document.body, textarea);
    this.toastr.success('Copied to clipboard');
  }

  animateProgressBar() {
    if (this.isLoading) {
      this.progressBarStates.forEach((state) => {
        let randomTime = Math.floor(Math.random() * 2000);
        const timeoutId = setTimeout(() => {
          gsap.to(this.progressBar.nativeElement, {
            x: `${state}%`,
            duration: 4,
          });
          this.currentPercentage = state;
          this.currentText =
            this.texts[Math.floor((state / 100) * (this.texts.length - 1))];
        }, randomTime + this.time);
        this.timeouts.push(timeoutId);
        this.time += randomTime;
      });
    }
  }

  stopProgressBarAnimation() {
    this.timeouts.forEach((timeoutId) => clearTimeout(timeoutId));
    this.timeouts = [];
    this.time = 0;
  }
}

----------------------------------------


=== File: src/app/dashboard/modules/translate-options/text/text.component.html [HTML] ===
----------------------------------------
<form [formGroup]="chatForm" @fadeIn>
  <!-- <h6 class="mb-5">{{ "translate.text" | transloco }}</h6> -->
  <div class="translate-container row mb-5">
    <div class="col-12 col-lg-6">
      <div class="language-tr-div">
        <p class="l-d auto-language">
          {{ "translate.language-detection" | transloco }}
        </p>
      </div>
      <div class="translate-content d-flex flex-column">
        <textarea
          #textareaElement
          class="form-control shadow-none flex-grow-1"
          [placeholder]="'translate.text-to-be-translated' | transloco"
          [maxlength]="maxChars"
          formControlName="text"
          (input)="updateTextareaContent($event)"
          (input)="adjustTextareaHeight()"
          (input)="onInput($event)"
          id="floatingTextarea2"
        ></textarea>
        <div class="text-end pe-3 pb-2">
          <small class="chars text-muted"
            >{{ textareaContent.length }}/{{ maxChars }}</small
          >
        </div>
      </div>
    </div>

    <div class="col-12 col-lg-6">
      <div class="d-flex align-items-center justify-content-end">
        <div
          class="language-tr-div"
          (click)="chooseGe()"
          [ngClass]="selectedGEO ? 'selected-lanp-active' : ''"
        >
          <p>{{ "languages.ge" | transloco }}</p>
        </div>
        <div
          class="language-tr-div"
          (click)="chooseEn()"
          [ngClass]="selectedENG ? 'selected-lanp-active' : ''"
        >
          <p>{{ "languages.en" | transloco }}</p>
        </div>
        <div
          @fadeIn
          *ngIf="selectedOther"
          class="language-tr-div"
          [ngClass]="selectedOther ? 'selected-lanp-active' : ''"
        >
          <p>
            {{
              this._transloco.getActiveLang() == "ge"
                ? this.selectedLanguage.nameGeo
                : this.selectedLanguage.name
            }}
          </p>
        </div>
        <button
          mat-icon-button
          [matMenuTriggerFor]="menu"
          aria-label="Example icon-button with a menu"
          class="position-relative"
        >
          <mat-icon class="mb-1">expand_more</mat-icon>
        </button>
        <mat-menu class="max-height-6" #menu="matMenu" xPosition="before">
          <button
            mat-menu-item
            *ngFor="let language of languages"
            [value]="language.id"
            (click)="selectLanguage(language)"
          >
            <span>{{
              this._transloco.getActiveLang() == "ge"
                ? language.nameGeo
                : language.name
            }}</span>
          </button>
        </mat-menu>
      </div>
      <div class="translated-content p-2 position-relative">
        <div class="translated-div">
          <div class="check-original lh-1 pb-2" *ngIf="toggleOriginBtn">
            <span class="check-original-text text-uppercase" (click)="toggleTextView()">
              {{ toggleOrigin ? 'Check Enhanced' : 'Check Original' }}
            </span>
          </div>
          <div class="loader" *ngIf="isLoading">
            <span class="bar"></span>
            <span class="bar"></span>
            <span class="bar"></span>
          </div>
          <p
            *ngIf="!isLoading"
            [innerHTML]="translatedText || originalText"
            class="pe-3 text-break"
            #generatedResponse
          ></p>
        </div>
        <i
          *ngIf="copyBtn"
          class="bi bi-copy text-muted"
          (click)="copyToClipboard()"
        ></i>
      </div>
    </div>
  </div>
  <div class="text-center py-5" *ngIf="enhanceBtn">
    <button class="button content-btn" [disabled]="enhanceBtnDisable" [class.disabled_enhance]="enhanceBtnDisable" (click)="enhanceTranslation()">
      <span class="button-content">{{ "translate.enhance" | transloco }}</span>
    </button>
  </div>
</form>

----------------------------------------


=== File: src/app/dashboard/modules/translate-options/text/text.component.scss [STYLE] ===
----------------------------------------
.loader {
  width: 100%;
  display: flex;
  align-items: center;
  margin: 1rem;
}

.bar {
  display: inline-block;
  width: 3px;
  height: 15px;
  background-color: #3b5af380;
  border-radius: 10px;
  animation: scale-up4 1s linear infinite;
}

.bar:nth-child(2) {
  height: 35px;
  margin: 0 5px;
  animation-delay: .25s;
}

.bar:nth-child(3) {
  animation-delay: .5s;
}

@keyframes scale-up4 {
  20% {
    background-color: #3b59f3;
    transform: scaleY(1.5);
  }

  40% {
    transform: scaleY(1);
  }
}

.check-original-text {
  text-decoration: underline;
  cursor: pointer;
  user-select: none;
  color: #3b59f3;
}

.disabled_enhance {
  cursor: not-allowed;
  background-color: #3b5af380;
}

----------------------------------------


=== File: src/app/dashboard/modules/translate-options/text/text.component.ts [COMPONENT] ===
----------------------------------------
import {
  AfterViewInit,
  Component,
  ElementRef,
  OnInit,
  Renderer2,
  ViewChild,
} from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { HttpService } from '../../../../shared/services/http.service';
import { AuthService } from '../../../../shared/services/auth.service';
import { ToastrService } from 'ngx-toastr';
import { BalanceService } from '../../../../shared/services/balance.service';
import { url } from '../../../../shared/data/api';
import { SafeUrl } from '@angular/platform-browser';
import { Language } from '../../../../shared/interfaces/language.interface';
import { ProductCategoryService } from '../../../../shared/services/product-category.service';
import { FreeServiceService } from '../../../../shared/services/free-service.service';
import { debounceTime, Subject, switchMap, timer } from 'rxjs';
import { Router } from '@angular/router';
import { TranslocoService } from '@ngneat/transloco';
import { TranslateActiveService } from '../../../../shared/services/translate-active.service';
import { ImageComponent } from '../image/image.component';
import { DocComponent } from '../doc/doc.component';
import { animate, style, transition, trigger } from '@angular/animations';
import { LanguageSelectionService } from '../../../../shared/services/language-selection.service';

@Component({
  selector: 'app-text',
  templateUrl: './text.component.html',
  animations: [
    trigger('fadeIn', [
      transition(':enter', [
        style({ opacity: 0 }),
        animate('0.2s ease-in', style({ opacity: 1 })),
      ]),
    ]),
  ],
  styleUrl: './text.component.scss',
})
export class TextComponent implements OnInit, AfterViewInit {
  @ViewChild('textareaElement', { static: false }) textareaElement!: ElementRef;
  @ViewChild('generatedResponse', { static: false })
  generatedResponse!: ElementRef;

  private inputSubject = new Subject<string>();

  activeComponent: any = TextComponent;

  maxChars: number = 2500;

  public fakeToken: any;

  initialSelection: string = '';

  isLoggedIn: boolean = false;
  userID: string = '';
  userInfo: any;
  userInfoUpdate: any;
  balance: any;

  copyBtn: boolean = false;
  textareaContent: string = '';
  imageUrl: SafeUrl | null = null;

  enhanceBtn: boolean = false;
  enhanceBtnDisable: boolean = false;
  isEnhanced: boolean = false;
  toggleOrigin: boolean = false;
  toggleOriginBtn: boolean = false;

  isLoading: boolean = false;
  selectedLanguage: any;
  selectedLanguageID = '1';
  selectedSourceLanguage = '-1';

  languageNotSelected = false;
  selectedGEO = false;
  selectedENG = false;
  selectedOther = false;

  translatedText: string = '';
  originalText: string = '';
  enhancedText: string = '';

  languages: Language[] = [];

  constructor(
    private builder: FormBuilder,
    private apiService: HttpService,
    private authService: AuthService,
    private toastr: ToastrService,
    private renderer: Renderer2,
    private balanceService: BalanceService,
    private languageService: ProductCategoryService,
    public _transloco: TranslocoService,
    private freeService: FreeServiceService,
    private _router: Router,
    private _translateActive: TranslateActiveService,
    private languageSelectionService: LanguageSelectionService
  ) {
    this.inputSubject.pipe(debounceTime(1000)).subscribe(() => {
      this.sendText();
    });
  }

  ngOnInit() {
    this.isLoggedIn = this.authService.isAuthenticated();
    this.selectedGEO = true;

    this.freeService.getToken().subscribe((value) => (this.fakeToken = value));
    this.balanceService
      .getBalance()
      .subscribe((value) => (this.balance = value));
    this.adjustTextareaHeight();
    if (this.isLoggedIn) {
      this.languageService.getLanguage(url.language).subscribe(
        (response: any) => {
          this.languages = response;
          // Load saved language after languages are loaded
          const savedLangId = sessionStorage.getItem('textSelectedTargetLanguage');
          if (savedLangId) {
            const language = this.languages.find(l => l.id.toString() === savedLangId);
            if (language) {
              this.selectLanguage(language, false);
            }
          }
        },
        (error) => {
          console.error('Error fetching languages', error);
        }
      );
    }
    this._transloco.langChanges$.subscribe((lang) => {
      this.setTranslatedText(lang);
    });
    this.setTranslatedText(this._transloco.getActiveLang());
  }

  ngAfterViewInit() {
    if (!this.isLoggedIn) {
      timer(500)
        .pipe(
          switchMap(() => this.languageService.getFreeLanguage(url.language))
        )
        .subscribe(
          (response: any) => {
            this.languages = response;
          },
          (error: any) => {
            console.error('Error fetching languages', error);
          }
        );
    }
  }

  chatForm = this.builder.group({
    text: this.builder.control(``, Validators.required),
  });

  onInput(event: any) {
    const inputValue = event.target.value;
    this.inputSubject.next(inputValue);
  }
  isGeorgian(text: string): boolean {
    const georgianRegex = /[\u10A0-\u10FF\u2D00-\u2D2F]/;
    return georgianRegex.test(text);
  }

  sendText() {
    this.copyBtn = false;
    if (this.selectedLanguageID === '0') {
      this.languageNotSelected = true;
      return;
    }
    if (!this.chatForm.valid) {
      return;
    }
    if (
      this.apiService.hasExceededFreeRequests() &&
      !this.authService.isAuthenticated()
    ) {
      this.toastr.error(this._transloco.translate('error-toastr.registration'));
      this._router.navigate(['/sign-up']);
      return;
    }
    if (this.balance <= 0) {
      this.toastr.error(this._transloco.translate('error-toastr.balance'));
      this._router.navigate(['/services/balance']);
      return;
    }
    if (
      this.isGeorgian(this.chatForm.value.text ?? '') &&
      this.selectedLanguageID == '1'
    ) {
      this.selectedLanguageID = '2';
      this.selectedENG = true;
      this.selectedGEO = false;
    }
    this.isLoading = true;

    const userMessageText = this.chatForm.value.text ?? '';
    var formData = new FormData();
    formData.append('description', userMessageText);
    formData.append('languageId', this.selectedLanguageID);
    formData.append('sourceLanguageId', this.selectedSourceLanguage);
    formData.append('files', '[]');
    formData.append('isPdf', 'false');

    if (this.isLoggedIn) {
      this.apiService.postTranslate(url.translate, formData).subscribe(
        (response: any) => {
          this.translatedText = response.text;
          this.originalText = response.text;
          this.isLoading = false;
          this.copyBtn = !this.copyBtn;
          this.enhanceBtn = true;

          var user = this.authService.userInfo();
          if (this.isLoggedIn) {
            this.userID = user.UserId;
            this.apiService.get(url.user, this.userID).subscribe(
              (res) => {
                this.userInfoUpdate = JSON.parse(res);
                this.balanceService.setBalance(this.userInfoUpdate.balance);
                this.apiService
                  .updateUserInfo('/api/User', this.userInfoUpdate)
                  .subscribe();
              },
              (err) => {
                console.log(err);
              }
            );
          }
        },
        (error) => {
          this.toastr.error(
            this._transloco.translate('error-toastr.balance')
          );
          this.isLoading = false;
        }
      );
    } else {
      this.apiService.postFreeTranslate(url.translate, formData).subscribe(
        (response: any) => {
          this.translatedText = response.text;
          this.isLoading = false;
          this.copyBtn = !this.copyBtn;
        },
        (error) => {
          this.toastr.error(
            this._transloco.translate('error-toastr.balance')
          );
          this.isLoading = false;
        }
      );
    }
  }

  enhanceTranslation() {
    this.toggleOriginBtn = false;
    this.isLoading = true;
    this.copyBtn = false;
    var formData = new FormData();
    formData.append('userInput', this.chatForm.value.text ?? '');
    formData.append('translateOutput', this.originalText);
    formData.append('targetLanguageId', this.selectedLanguageID);
    formData.append('sourceLanguageId', this.selectedSourceLanguage);
    console.log(formData);
    this.apiService.enhanceTranslation(url.enhance, formData).subscribe(
      (response: any) => {
        this.translatedText = response.text;
        this.enhancedText = response.text;
        this.isLoading = false;
        this.isEnhanced = true;
        this.copyBtn = true;
        this.toggleOriginBtn = true;
        this.enhanceBtnDisable = true;
      },
      (error) => {
        this.toastr.error(this._transloco.translate('error-toastr.balance'));
        this.isLoading = false;
      }
    );
  }

  toggleTextView() {
    this.toggleOrigin = !this.toggleOrigin;
    this.translatedText = this.isEnhanced
      ? this.originalText
      : this.enhancedText;
    this.isEnhanced = !this.isEnhanced;
  }

  deleteById(id: any): void {
    this.languages = this.languages.filter((item: any) => item.id !== id);
  }

  selectLanguage(lang: any, saveToStorage: boolean = true) {
    this.selectedLanguage = lang;
    this.selectedLanguageID = lang.id.toString();
    if (this.selectedLanguageID === '1') {
      this.selectedENG = false;
      this.selectedGEO = true;
      this.selectedOther = false;
    } else if (this.selectedLanguageID === '2') {
      this.selectedENG = true;
      this.selectedGEO = false;
      this.selectedOther = false;
    } else {
      this.selectedENG = false;
      this.selectedGEO = false;
      this.selectedOther = true;
    }
    if (saveToStorage) {
      this.languageSelectionService.setTextTargetLanguage(this.selectedLanguageID);
    }
    this.sendText();
  }

  chooseGe() {
    this.selectedENG = false;
    this.selectedLanguageID = '1';
    this.selectedGEO = true;
    this.selectedOther = false;
    this.languageSelectionService.setTextTargetLanguage(this.selectedLanguageID);
    this.sendText();
  }

  chooseEn() {
    this.selectedGEO = false;
    this.selectedLanguageID = '2';
    this.selectedENG = true;
    this.selectedOther = false;
    this.languageSelectionService.setTextTargetLanguage(this.selectedLanguageID);
    this.sendText();
  }

  setTranslatedText(lang: string) {
    if (lang === 'en') {
      this.translatedText = 'Translation';
    } else {
      this.translatedText = 'თარგმანი';
    }
  }

  onImage() {
    this._translateActive.setActiveComponent(ImageComponent);
  }

  onDoc() {
    this._translateActive.setActiveComponent(DocComponent);
  }

  copyToClipboard() {
    var textToCopy = this.generatedResponse.nativeElement.innerText;
    const textarea = this.renderer.createElement('textarea');
    this.renderer.setProperty(textarea, 'value', textToCopy);
    this.renderer.appendChild(document.body, textarea);

    textarea.select();
    document.execCommand('copy');

    this.renderer.removeChild(document.body, textarea);
    this.toastr.success('Copied to clipboard');
  }

  adjustTextareaHeight() {
    if (this.textareaElement && this.textareaElement.nativeElement) {
      const textarea = this.textareaElement
        .nativeElement as HTMLTextAreaElement;
      textarea.style.height = '50px';
      let scHeight = textarea.scrollHeight;
      textarea.style.height = scHeight > 10 ? `${scHeight}px` : '100px';
    }
  }

  updateTextareaContent(event: Event): void {
    const inputElement = event.target as HTMLTextAreaElement;
    this.textareaContent = inputElement.value;
  }
}

----------------------------------------


=== File: src/app/dashboard/user/account-delete/account-delete.component.html [HTML] ===
----------------------------------------
<div class="acc-del-container p-4 position-relative" style="max-width: 400px;">
  <p>{{ 'profile.acc-del-popup1' | transloco }} <span class="text-danger fw-bold">{{ 'profile.acc-del-popup2' | transloco }}</span>{{ 'profile.acc-del-popup3' | transloco }}</p>
  <div class="d-flex justify-content-end align-items-end gap-2 mt-5">
    <button type="button" (click)="close()" class="close-dialog-delacc">{{ 'profile.close-btn' | transloco }}</button>
    <button type="button" (click)="deleteAcc()" class="del-acc-btn">{{ 'profile.acc-del-btn' | transloco }}</button>
  </div>
  <i class="bi bi-x-lg c-p" (click)="close()"></i>
</div>

----------------------------------------


=== File: src/app/dashboard/user/account-delete/account-delete.component.scss [STYLE] ===
----------------------------------------

----------------------------------------


=== File: src/app/dashboard/user/account-delete/account-delete.component.spec.ts [TEST] ===
----------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AccountDeleteComponent } from './account-delete.component';

describe('AccountDeleteComponent', () => {
  let component: AccountDeleteComponent;
  let fixture: ComponentFixture<AccountDeleteComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [AccountDeleteComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(AccountDeleteComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------


=== File: src/app/dashboard/user/account-delete/account-delete.component.ts [COMPONENT] ===
----------------------------------------
import { Component } from '@angular/core';
import { MatDialog, MatDialogClose, MatDialogRef } from '@angular/material/dialog';
import { AuthService } from '../../../shared/services/auth.service';
import { HttpService } from '../../../shared/services/http.service';
import { url } from '../../../shared/data/api';
import { response } from 'express';
import { Router } from '@angular/router';
import { TranslocoService } from '@ngneat/transloco';

@Component({
  selector: 'app-account-delete',
  templateUrl: './account-delete.component.html',
  styleUrl: './account-delete.component.scss'
})
export class AccountDeleteComponent {
  userDetails = {
    id: '',
    name: '',
    email: '',
    phone: '',
    role: '',
  };

  constructor(
    private _dialog: MatDialogRef<AccountDeleteComponent>,
    private _auth: AuthService,
    private _http: HttpService,
    private _router: Router,
    public _transloco: TranslocoService
  ) {}

  ngOnInit() {
    if (this._auth.isAuthenticated()) {
      const user = this._auth.userInfo();
      this.userDetails.id = user.UserId;
    }
  }

  deleteAcc() {
    this._http.deleteAcc(`${url.user}/${this.userDetails.id}`, this.userDetails.id).subscribe(
      (response) => {
        this._router.navigate(['/services']);
        // this._auth.ClearSession();
      },
      (error) => {
        console.error(error);
      }
    )
  }

  close() {
    this._dialog.close();
  }
}

----------------------------------------


=== File: src/app/dashboard/user/balance/balance.component.html [HTML] ===
----------------------------------------
<div class="content-component balance-container">
  <div class="balance-cards mt-5">
    <h3 class="mb-5 text-center">{{ 'sidebar.balance' | transloco }}: ₾ {{balance}}</h3>
    <div class="row gap-5 justify-content-center">
      <div class="card-b col-md-4 px-4 py-5 bg-white text-center">
        <h5 class="fw-bold">{{ "balance-sub.sub1" | transloco }}</h5>
        <p>{{ "balance-sub.sub1-p" | transloco }}</p>
        <h1 class="mt-4 fw-bold">₾ 9.50</h1>
        <hr class="my-5" />
        <div>
          <button type="button" class="buy" (click)="buyStandardPackage()">{{ "balance-sub.buy" | transloco }}</button>
        </div>
      </div>
      <div class="card-b col-md-4 px-4 py-5 bg-white text-center">
        <h5 class="fw-bold">{{ "balance-sub.sub2" | transloco }}</h5>
        <p>{{ "balance-sub.sub2-p" | transloco }}</p>
        <h1 class="mt-4 fw-bold">₾ 19.50</h1>
        <hr class="my-5" />
        <div>
          <button type="button" class="buy" (click)="buyPremiumPackage()">{{ "balance-sub.buy" | transloco }}</button>
        </div>
      </div>
      <div class="card-b col-md-4 px-4 py-5 bg-white text-center">
        <h5 class="fw-bold">{{ "balance-sub.sub3" | transloco }}</h5>
        <p style="margin-bottom: 1.4rem">{{ "balance-sub.sub3-p" | transloco }}</p>
        <input
          type="text"
          name="currency-field"
          id="currency-field"
          [(ngModel)]="amount"
          (keyup)="onKeyUp($event)"
          (blur)="onBlur($event)"
          placeholder="₾30.00"
          autocomplete="off"
          class="text-center fw-bold"
        />
        <hr class="my-5" />
        <div>
          <button type="button" (click)="clickToBuy()" class="buy">{{ "balance-sub.buy" | transloco }}</button>
        </div>
      </div>
    </div>
  </div>
</div>
----------------------------------------


=== File: src/app/dashboard/user/balance/balance.component.scss [STYLE] ===
----------------------------------------
.balance-container {
  background-color: #f5f6fa !important;
  .card-b {
    border-radius: 20px;
    max-width: 300px;
    h1,
    .buy,
    input {
      color: #3b59f3;
    }
    .buy {
      border: 2px solid #3b59f3;
      border-radius: 20px;
      width: 70%;
      height: 40px;
      background-color: white;
      &:hover {
        background-color: #3b5af31f;
      }
    }
    input {
      font-size: 40px;
      line-height: 1.25;
      font-weight: 500;
      border: none;
      outline: none;
      max-width: 100%;
      padding: 0;
    }
    hr {
      background-color: #f5f6fa !important;
    }
  }
}

.included {
  background-color: #3b5af31f !important;
  cursor: default;
}

.style-1 {
  del {
    color: rgba(red, 0.5);
    text-decoration: none;
    position: relative;
    &:before {
      content: " ";
      display: block;
      width: 100%;
      border-top: 2px solid rgba(red, 0.8);
      height: 12px;
      position: absolute;
      bottom: 0;
      left: 0;
      transform: rotate(-7deg);
    }
  }
  ins {
    color: #3b59f3;
    font-size: 32px;
    text-decoration: none;
    padding: 1em 1em 1em 0.5em;
  }
}

----------------------------------------


=== File: src/app/dashboard/user/balance/balance.component.spec.ts [TEST] ===
----------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { BalanceComponent } from './balance.component';

describe('BalanceComponent', () => {
  let component: BalanceComponent;
  let fixture: ComponentFixture<BalanceComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [BalanceComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(BalanceComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------


=== File: src/app/dashboard/user/balance/balance.component.ts [COMPONENT] ===
----------------------------------------
import { Component, ElementRef, HostListener, Inject, OnInit, PLATFORM_ID } from '@angular/core';
import { BalanceService } from '../../../shared/services/balance.service';
import { AuthService } from '../../../shared/services/auth.service';
import { HttpService } from '../../../shared/services/http.service';
import { url } from '../../../shared/data/api';
import { isPlatformBrowser } from '@angular/common';
import { MatDialog } from '@angular/material/dialog';
import { PurchaseModalComponent } from '../../../shared/components/purchase-modal/purchase-modal.component';

@Component({
  selector: 'app-balance',
  templateUrl: './balance.component.html',
  styleUrl: './balance.component.scss',
})
export class BalanceComponent implements OnInit {
  amount: string = '';
  balance: any;
  userID: string = '';
  userInfo: any;

  constructor(
    private _balance: BalanceService,
    private _auth: AuthService,
    private _api: HttpService,
    private dialog: MatDialog
  ) {}

  ngOnInit() {
    if (this._auth.isAuthenticated()) {
      const user = this._auth.userInfo();
      this.userID = user.UserId;
      this._api.get(url.user, this.userID).subscribe(
        (res) => {
          this.userInfo = JSON.parse(res);
          this._balance.setBalance(this.userInfo.balance);
          this._balance
            .getBalance()
            .subscribe((value) => (this.balance = value));
        },
        (err) => {
          console.log(err);
        }
      );
    }
  }

  clickToBuy() {
    let packageName = 'Custom';
    let amountValue = this.amount.replace('₾', '').trim();
    
    // If amount is empty, set a default value
    if (!amountValue) {
      amountValue = '30.00';
    }
    
    this.openPurchaseDialog(packageName, amountValue);
  }
  
  buyStandardPackage() {
    this.openPurchaseDialog('Standard', '9.50');
  }
  
  buyPremiumPackage() {
    this.openPurchaseDialog('Premium', '19.50');
  }

  openPurchaseDialog(packageName: string, amount: string) {
    this.dialog.open(PurchaseModalComponent, {
      width: '500px',
      data: {
        packageName: packageName,
        amount: '₾' + amount
      }
    });
  }

  onKeyUp(event: any) {
    this.formatCurrency(event.target);
  }

  onBlur(event: any) {
    this.formatCurrency(event.target, true);
  }

  formatNumber(value: string): string {
    return value.replace(/\D/g, '').replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  }

  formatCurrency(input: HTMLInputElement, blur: boolean = false) {
    let input_val = input.value;
    if (input_val === '') {
      return;
    }
    const original_len = input_val.length;
    let caret_pos = input.selectionStart || 0;

    if (input_val.indexOf('.') >= 0) {
      const decimal_pos = input_val.indexOf('.');
      let left_side = input_val.substring(0, decimal_pos);
      let right_side = input_val.substring(decimal_pos);
      left_side = this.formatNumber(left_side);
      right_side = this.formatNumber(right_side);
      if (blur) {
        right_side += '00';
      }
      right_side = right_side.substring(0, 2);
      input_val = '₾' + left_side + '.' + right_side;
    } else {
      input_val = this.formatNumber(input_val);
      input_val = '₾' + input_val;
      if (blur) {
        input_val += '.00';
      }
    }
    input.value = input_val;
    const updated_len = input_val.length;
    caret_pos = updated_len - original_len + caret_pos;
    input.setSelectionRange(caret_pos, caret_pos);
  }
}
----------------------------------------


=== File: src/app/dashboard/user/history/history.component.html [HTML] ===
----------------------------------------
<div class="content-component">
  <div class="history-container">
    <h2 class="my-5 text-center">{{ 'history.title' | transloco }}</h2>
    <div class="mb-4 mt-3 text-center" *ngIf="isLoading">
      <div class="loader mx-auto"></div>
    </div>
    <div class="requests-container pt-3">
      <div class="container">
        <div *ngFor="let request of requests; let index = index;">
          <div class="request d-flex justify-content-between align-items-center">
            <div class="d-flex gap-3">
              <span>{{index + 1}}</span>
              <span>{{transformRequestType(request.requestType)}}</span>
            </div>
            <div class="d-flex gap-5">
              <span>{{formatDate(request.createTime)}}</span>
              <span class="check" (click)="showResponse(index)">{{ 'history.check' | transloco }}</span>
            </div>
          </div>
          <div class="request-response py-4 px-3" *ngIf="selectedRequestIndex === index">
            <div>
              <h6>{{ 'history.send' | transloco }}</h6>
              <p [innerHTML]="(request.requestType == 1 || request.requestType == 3 || request.requestType == 4 ) ? getProductName(request.requestJson) : request.requestType == 2 ? getDescription(request.requestJson) : request.requestType == 5 ? getEmail(request.requestJson) : ''">
              </p>
            </div>
            <hr>
            <div>
              <h6>{{ 'history.rec' | transloco }}</h6>
              <p [innerHTML]="getResponseText(request.responseJson)">
              </p>
            </div>
          </div>
        </div>
        <div class="text-center mx-auto" *ngIf="requests.length === 0">
          <p>{{ 'history.empty' | transloco }}</p>
        </div>
      </div>
    </div>

    <!-- <div *ngFor="let request of requests; let index;">
      <p>{{request.createTime}}</p>
    </div> -->
  </div>
</div>

----------------------------------------


=== File: src/app/dashboard/user/history/history.component.scss [STYLE] ===
----------------------------------------
.request {
  border: 1px solid rgb(209, 209, 209);
  padding: 1rem;
  margin: 1rem 0;
  border-radius: 5px;
  .check {
    color: #3b59f3;
    cursor: pointer;
    font-weight: 600;
    &:hover {
      text-decoration: underline;
    }
  }
}
.request-response {
  h6 {
    font-weight: 600;
  }
  p {
    text-align: justify;
    word-break: break-all;
  }
}

*::-webkit-scrollbar {
  height: 50%;
  width: 0.2rem !important;
  background-color: #eeeeee !important; /* or add it to the track */
  border-radius: 1rem;
}

*::-webkit-scrollbar-thumb {
  border-radius: 1rem;
  background: #8f8f8f !important;
}


/* HTML: <div class="loader"></div> */
.loader {
  width: 50px;
  aspect-ratio: 1;
  display: grid;
  border: 4px solid #0000;
  border-radius: 50%;
  border-right-color: #3b59f3;
  animation: l15 1s infinite linear;
}
.loader::before,
.loader::after {
  content: "";
  grid-area: 1/1;
  margin: 2px;
  border: inherit;
  border-radius: 50%;
  animation: l15 2s infinite;
}
.loader::after {
  margin: 8px;
  animation-duration: 3s;
}
@keyframes l15{
  100%{transform: rotate(1turn)}
}

----------------------------------------


=== File: src/app/dashboard/user/history/history.component.spec.ts [TEST] ===
----------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HistoryComponent } from './history.component';

describe('HistoryComponent', () => {
  let component: HistoryComponent;
  let fixture: ComponentFixture<HistoryComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [HistoryComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(HistoryComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------


=== File: src/app/dashboard/user/history/history.component.ts [COMPONENT] ===
----------------------------------------
import { Component, Inject, PLATFORM_ID } from '@angular/core';
import { RequestHistory } from '../../../shared/interfaces/request-history.interface';
import { AuthService } from '../../../shared/services/auth.service';
import { ProductCategoryService } from '../../../shared/services/product-category.service';
import { url } from '../../../shared/data/api';
import { isPlatformBrowser } from '@angular/common';
import { TranslocoService } from '@ngneat/transloco';

@Component({
  selector: 'app-history',
  templateUrl: './history.component.html',
  styleUrl: './history.component.scss',
})
export class HistoryComponent {
  isLoggedIn: boolean = false;
  userID: string = '';

  requests: RequestHistory[] = [];
  selectedRequestIndex: number | null = null;

  isLoading: boolean = true;

  constructor(
    private authService: AuthService,
    private historyService: ProductCategoryService,
    private _transloco: TranslocoService
  ) {}

  ngOnInit(): void {

    const user = this.authService.userInfo();
    if (this.isLoggedIn) {
      this.userID = user.UserId;
      this.historyService.getHistory(url.history, this.userID).subscribe(
        (res) => {
          this.isLoading = false;
          this.requests = res;
          this.sortRequestsByDate();
        },
        (error) => {
          console.error(error);
          this.isLoading = false;
        }
      );
    }
  }

  formatDate(isoString: string): string {
    const date = new Date(isoString);

    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();

    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');

    return `${day}/${month}/${year} ${hours}:${minutes}`;
  }

  transformRequestType(value: number): string {
    switch (value) {
      case 1:
        return this._transloco.translate('sidebar.description');
      case 2:
        return this._transloco.translate('sidebar.translate');
      case 3:
        return this._transloco.translate('sidebar.copyright');
      case 4:
        return this._transloco.translate('sidebar.script');
      case 5:
        return this._transloco.translate('sidebar.mail');
      default:
        return 'Unknown';
    }
  }

  sortRequestsByDate() {
    this.requests.sort(
      (a, b) =>
        new Date(b.createTime).getTime() - new Date(a.createTime).getTime()
    );
  }

  showResponse(index: number): void {
    this.selectedRequestIndex =
      this.selectedRequestIndex === index ? null : index; // Toggle visibility
  }

  getProductName(requestJson: string): string {
    try {
      const parsedRequest = JSON.parse(requestJson);
      return parsedRequest.ProductName || 'No Product Name';
    } catch (error) {
      console.error('Error parsing request JSON', error);
      return 'Invalid JSON';
    }
  }

  getDescription(requestJson: string): string {
    try {
      const parsedRequest = JSON.parse(requestJson);
      return parsedRequest.Description || 'No Text For Translation';
    } catch (error) {
      console.error('Error parsing request JSON', error);
      return 'Invalid JSON';
    }
  }

  getEmail(requestJson: string): string {
    try {
      const parsedRequest = JSON.parse(requestJson);
      return parsedRequest.Email || 'No Text For Translation';
    } catch (error) {
      console.error('Error parsing request JSON', error);
      return 'Invalid JSON';
    }
  }

  getResponseText(responseJson: string): string {
    try {
      const parsedRequest = JSON.parse(responseJson);
      return parsedRequest.Text || 'No Text';
    } catch (error) {
      console.error('Error parsing request JSON', error);
      return 'Invalid JSON';
    }
  }
}

----------------------------------------


=== File: src/app/dashboard/user/profile/profile.component.html [HTML] ===
----------------------------------------
<div class="content-component">
  <div class="profile-container">
    <div class="text-end my-4">
      <span class="c-p acc-del" (click)="accDelete()"><i class="bi bi-trash3 me-2"></i>{{ 'profile.acc-del' | transloco }}</span>
    </div>
    <div class="text-center my-5">
      <img
        src="../../../../assets/images/sidebar_icons/profile_photo.svg"
        width="100"
        alt="USER"
      />
      <p class="mt-2 mb-0 pb-0">{{ userDetails.name }}</p>
      <p class="text-capitalize">{{ userDetails.role == "user" ? ("header.user" | transloco) : ("header.admin" | transloco) }}</p>
    </div>
    <div>
      <div class="row mb-3">
        <div class="form-group col-md-6">
          <label for="name">{{ 'profile.name' | transloco }}</label>
          <input
            type="text"
            class="form-control form-control-sm"
            id="name"
            [value]="userDetails.name"
            disabled
          />
        </div>
        <div class="form-group col-md-6">
          <label for="email">{{ 'profile.email' | transloco }}</label>
          <input
            type="text"
            class="form-control form-control-sm"
            id="email"
            [value]="userDetails.email"
            disabled
          />
        </div>
      </div>
      <div class="row mb-3">
        <div class="form-group col-md-6">
          <label for="phone">{{ 'profile.phone' | transloco }}</label>
          <input
            type="text"
            class="form-control form-control-sm"
            id="phone"
            [value]="userDetails.phone"
            disabled
          />
        </div>
        <div class="form-group col-md-6">
          <label for="balance">{{ 'profile.balance' | transloco }}</label>
          <input
            type="text"
            class="form-control form-control-sm"
            id="balance"
            [value]="balance"
            disabled
          />
        </div>
      </div>
    </div>
    <div class="mt-5 d-flex justify-content-center align-items-center gap-2">
      <div>
        <button type="button" class="content-btn" (click)="navigateBalance()">
          {{ 'profile.btn1' | transloco }}
        </button>
      </div>
      <div>
        <button type="button" class="content-btn" (click)="togglePassword()">
          {{ 'profile.btn2' | transloco }}
        </button>
      </div>
    </div>
    <form
      [formGroup]="passwordForm"
      (ngSubmit)="changePassword()"
      *ngIf="passwordChange"
    >
      <div class="row mt-5">
        <div class="form-group col-md-6">
          <label for="password">{{ 'profile.c-pass' | transloco }}</label>
          <input
            type="password"
            class="form-control form-control-sm"
            id="password"
            formControlName="oldPassword"
            minlength="3"
          />
          <small class="text-muted mb-4"
            >{{ 'profile.ch-label' | transloco }}</small
          >
        </div>
        <div class="form-group col-md-6">
          <label for="newpassword">{{ 'profile.n-pass' | transloco }}</label>
          <input
            type="password"
            class="form-control form-control-sm"
            formControlName="newPassword"
            id="newpassword"
            minlength="3"
          />
          <small class="text-muted mb-4"
            >{{ 'profile.ch-label' | transloco }}</small
          >
        </div>
      </div>
      <div class="text-center mt-3">
        <button type="submit" class="content-btn" *ngIf="!isLoading">
          {{ 'profile.btn3' | transloco }}
        </button>
        <button type="button" class="content-btn" *ngIf="isLoading">
          {{ 'profile.btn3' | transloco }}...
        </button>
      </div>
    </form>
  </div>
</div>

----------------------------------------


=== File: src/app/dashboard/user/profile/profile.component.scss [STYLE] ===
----------------------------------------
@media screen and (max-width: 668px) {
  .profile-container {
    width: 100%;
  }
}

@media screen and (min-width: 669px) {
  .profile-container {
    width: 70%;
  }
}

.profile-container {
  margin: auto;
}

----------------------------------------


=== File: src/app/dashboard/user/profile/profile.component.spec.ts [TEST] ===
----------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ProfileComponent } from './profile.component';

describe('ProfileComponent', () => {
  let component: ProfileComponent;
  let fixture: ComponentFixture<ProfileComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ProfileComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(ProfileComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------


=== File: src/app/dashboard/user/profile/profile.component.ts [COMPONENT] ===
----------------------------------------
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from '../../../shared/services/auth.service';
import { FreeServiceService } from '../../../shared/services/free-service.service';
import { BalanceService } from '../../../shared/services/balance.service';
import { HttpService } from '../../../shared/services/http.service';
import { url } from '../../../shared/data/api';
import { FormBuilder, Validators } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { MatDialog } from '@angular/material/dialog';
import { AccountDeleteComponent } from '../account-delete/account-delete.component';

@Component({
  selector: 'app-profile',
  templateUrl: './profile.component.html',
  styleUrl: './profile.component.scss',
})
export class ProfileComponent implements OnInit {
  isLoggedIn: boolean = false;
  isLoading: boolean = false;

  balance: any;
  userInfo: any;

  userDetails = {
    id: '',
    name: '',
    email: '',
    phone: '',
    role: '',
  };

  passwordChange: boolean = false;

  constructor(
    private _router: Router,
    private _auth: AuthService,
    private _api: HttpService,
    private _balance: BalanceService,
    private builder: FormBuilder,
    private toastr: ToastrService,
    private _dialog: MatDialog
  ) {}

  ngOnInit() {
    this.isLoggedIn = this._auth.isAuthenticated();
    if (this.isLoggedIn) {
      const user = this._auth.userInfo();
      this.userDetails.id = user.UserId;
      this._api.get(url.user, this.userDetails.id).subscribe(
        (res) => {
          this.userInfo = JSON.parse(res);
          this.userDetails.name = `${
            this.userInfo.firstName + ' ' + this.userInfo.lastName
          }`;
          this.userDetails.role = this.userInfo.roleName;
          this.userDetails.email = this.userInfo.email;
          this.userDetails.phone = this.userInfo.phoneNUmber;
          this._balance.setBalance(this.userInfo.balance);
          this._balance
            .getBalance()
            .subscribe((value) => (this.balance = value));
        },
        (err) => {
          console.log(err);
        }
      );
    }
  }

  passwordForm = this.builder.group({
    oldPassword: this.builder.control('', Validators.required),
    newPassword: this.builder.control('', Validators.required),
  });

  changePassword() {
    if (this.isLoggedIn) {
      if (this.passwordForm.invalid) {
        this.toastr.error('შეავსეთ ყველა ველი', 'Error');
      }
      this.isLoading = !this.isLoading;
      const data = {
        id: this.userDetails.id,
        currentPassword: this.passwordForm.value.oldPassword,
        newPassword: this.passwordForm.value.newPassword,
      };
      this._api.patchChangePassword(url.user, data).subscribe(
        (response) => {
          this.togglePassword();
          this.passwordForm.reset();
          this.isLoading = !this.isLoading;
          this.toastr.success('პაროლი წარმატებით შეიცვალა!');
        },
        (error) => {
          console.error(error.error);
          if (
            !this.passwordForm.invalid &&
            error.error ==
              'Changing password has failed. Current Password is not correct'
          ) {
            this.toastr.error(`ძველი პაროლი არასწორია!`);
          }
          this.isLoading = !this.isLoading;
        }
      );
    }
  }

  accDelete() {
    this._dialog.open(AccountDeleteComponent);
  }

  togglePassword() {
    this.passwordChange = !this.passwordChange;
  }

  navigateBalance() {
    this._router.navigate(['/services/balance']);
  }
}

----------------------------------------


=== File: src/app/guard/auth.guard.ts [TS] ===
----------------------------------------
import { inject } from '@angular/core';
import { CanActivateFn, Router } from '@angular/router';
import { AuthService } from '../shared/services/auth.service';

export const authGuard: CanActivateFn = (route, state) => {
  const authService = inject(AuthService);
  const router = inject(Router);

  if (authService.isAuthenticated()) {
    router.navigate(['/services']);
    return false;
  }
  return true;
};

----------------------------------------


=== File: src/app/guard/confirm-exit.guard.ts [TS] ===
----------------------------------------
import { CanActivateFn } from '@angular/router';

export const confirmExitGuard: CanActivateFn = (route, state) => {
  return true;
};

----------------------------------------


=== File: src/app/guard/user.guard.ts [TS] ===
----------------------------------------
import { inject } from '@angular/core';
import { CanActivateFn, Router } from '@angular/router';
import { AuthService } from '../shared/services/auth.service';

export const userGuard: CanActivateFn = (route, state) => {
  const authService = inject(AuthService);
  const router = inject(Router);

  if (!authService.isAuthenticated()) {
    router.navigate(['/services']);
    return false;
  }
  return true;
};

----------------------------------------


=== File: src/app/home/blog/blog.component.html [HTML] ===
----------------------------------------
<p>blog works!</p>

----------------------------------------


=== File: src/app/home/blog/blog.component.scss [STYLE] ===
----------------------------------------

----------------------------------------


=== File: src/app/home/blog/blog.component.spec.ts [TEST] ===
----------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { BlogComponent } from './blog.component';

describe('BlogComponent', () => {
  let component: BlogComponent;
  let fixture: ComponentFixture<BlogComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [BlogComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(BlogComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------


=== File: src/app/home/blog/blog.component.ts [COMPONENT] ===
----------------------------------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-blog',
  templateUrl: './blog.component.html',
  styleUrl: './blog.component.scss'
})
export class BlogComponent {

}

----------------------------------------


=== File: src/app/home/home.component.html [HTML] ===
----------------------------------------
<canvas id="particleCanvas"></canvas>
<div class="home-component">
  <div class="container">
    <nav class="navbar navbar-expand-lg home-nav">
      <a class="navbar-brand">
        <img
          src="../../../assets/images/SLK/FullLogo.svg"
          width="120"
          class="c-p"
          routerLink="/home"
          alt="SULIKO"
        />
      </a>
      <button
        class="navbar-toggler"
        type="button"
        data-bs-toggle="collapse"
        data-bs-target="#navbarSupportedContent"
        aria-controls="navbarSupportedContent"
        aria-expanded="false"
        aria-label="Toggle navigation"
      >
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav ms-auto mb-2 mb-lg-0 me-3">
          <li class="nav-item">
            <a class="nav-link">{{ 'home.navbar.blog' | transloco }}</a>
          </li>
        </ul>
        <div>
          <button
            class="content-btn"
            (click)="!isLoggedIn ? goToSignIn() : goToServices()"
          >
          <span *ngIf="isLoggedIn; else signIn">
            {{ 'home.navbar.dashboard' | transloco }}
          </span>
          <ng-template #signIn>
            {{ 'home.navbar.sign-in' | transloco }}
          </ng-template>
          </button>
        </div>
      </div>
    </nav>
  </div>
  <div>
    <router-outlet></router-outlet>
  </div>
  <footer>
    <div class="container py-5 position-relative">
      <div class="row">
        <div class="col-lg-4 col-md-6 mb-4 mb-lg-0">
          <img
            src="../../assets/images/SLK/FullLogo.svg"
            alt=""
            width="180"
            class="mb-3"
          />
          <p class="font-italic text-muted">
            {{ 'home.footer.title' | transloco }}
          </p>
          <ul class="list-inline mt-4">
            <li class="list-inline-item">
              <a href="https://www.facebook.com/profile.php?id=61564358761003" target="_blank" title="facebook"
                ><i class="bi bi-facebook"></i
              ></a>
            </li>
          </ul>
        </div>
        <div class="col-lg-2 col-md-6 mb-4 mb-lg-0">
          <h6 class="text-uppercase font-weight-bold mb-4">{{ 'home.count.s' | transloco }}</h6>
          <ul class="list-unstyled mb-0">
            <li class="mb-2"><a href="#" class="text-muted">{{
              "sidebar.translate" | transloco
            }}</a></li>
            <li class="mb-2">
              <a href="#" class="text-muted">{{
                "sidebar.description" | transloco
              }}</a>
            </li>
            <li class="mb-2">
              <a href="#" class="text-muted">{{
                "sidebar.copyright" | transloco
              }}</a>
            </li>
            <li class="mb-2"><a href="#" class="text-muted">{{
              "sidebar.mail" | transloco
            }}</a></li>
          </ul>
        </div>
        <div class="col-lg-2 col-md-6 mb-4 mb-lg-0">
          <h6 class="text-uppercase font-weight-bold mb-4">{{
            "header.user" | transloco
          }}</h6>
          <ul class="list-unstyled mb-0">
            <li class="mb-2"><a routerLink="/home/privacy" class="text-muted">Privacy</a></li>
            <li class="mb-2"><a routerLink="/home/terms" class="text-muted">Terms</a></li>
          </ul>
        </div>
        <div class="col-lg-4 col-md-6 mb-lg-0">
          <h6 class="text-uppercase font-weight-bold mb-4">{{ 'home.footer.contact.title' | transloco }}</h6>
          <p class="text-muted mb-2">{{ 'home.footer.contact.p' | transloco }}</p>
          <p class="text-muted mb-2">{{ 'home.footer.contact.address' | transloco }}</p>
          <p class="text-muted mb-2">579 73 77 37</p>
          <p class="text-muted mb-4">misha&#64;api24.ge</p>
          <h6></h6>
        </div>
      </div>
    </div>

    <!-- Copyrights -->
    <div class="py-3">
      <div class="container text-center">
        <p class="text-muted mb-0 py-2">&#169; {{ 'home.footer.copyright' | transloco }}</p>
      </div>
    </div>
  </footer>
</div>

----------------------------------------


=== File: src/app/home/home.component.scss [STYLE] ===
----------------------------------------

----------------------------------------


=== File: src/app/home/home.component.ts [COMPONENT] ===
----------------------------------------
import {
  AfterViewInit,
  Component,
  HostListener,
  Inject,
  OnInit,
  PLATFORM_ID,
} from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from '../shared/services/auth.service';
import { HttpService } from '../shared/services/http.service';
import { isPlatformBrowser } from '@angular/common';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrl: './home.component.scss',
})
export class HomeComponent implements AfterViewInit, OnInit {
  private canvas!: HTMLCanvasElement;
  private ctx!: CanvasRenderingContext2D;
  private w = window.innerWidth;
  private h = window.innerHeight;
  private rate = 60;
  private arc = 100;
  private time = 0;
  private count = 0;
  private size = 7;
  private speed = 4;
  private parts: any[] = [];
  private colors = ['#0000FF', '#ADD8E6', '#D3D3D3'];
  private mouse = { x: 0, y: 0 };

  isLoggedIn: boolean = false;

  constructor(
    private _router: Router,
    private _auth: AuthService,
    private _api: HttpService
  ) {}

  ngOnInit() {
    this.w = window.innerWidth;
    this.h = window.innerHeight;

    if (this._auth.isAuthenticated()) {
      this.isLoggedIn = this._auth.isAuthenticated();
    }
  }

  goToServices() {
    this._router.navigate(['/services']);
  }

  goToSignIn() {
    this._router.navigate(['/sign-in']);
  }

  ngAfterViewInit() {
    this.canvas = document.getElementById(
      'particleCanvas'
    ) as HTMLCanvasElement;
    this.ctx = this.canvas.getContext('2d')!;

    this.canvas.width = this.w;
    this.canvas.height = this.h;

    this.createParticles();
    this.animateParticles();

    this.canvas.addEventListener('mousemove', this.mouseMove.bind(this), false);
  }

  createParticles() {
    this.parts = [];
    for (let i = 0; i < this.arc; i++) {
      this.parts.push({
        x: Math.ceil(Math.random() * this.w),
        y: Math.ceil(Math.random() * this.h),
        toX: Math.random() * 5 - 1,
        toY: Math.random() * 2 - 1,
        c: this.colors[Math.floor(Math.random() * this.colors.length)],
        size: Math.random() * this.size,
      });
    }
  }

  animateParticles() {
    this.ctx.clearRect(0, 0, this.w, this.h);
    for (let i = 0; i < this.arc; i++) {
      const part = this.parts[i];
      const distanceFactor = Math.max(
        Math.min(15 - this.distanceBetween(this.mouse, part) / 10, 10),
        1
      );

      this.ctx.beginPath();
      this.ctx.arc(
        part.x,
        part.y,
        part.size * distanceFactor,
        0,
        Math.PI * 2,
        false
      );
      this.ctx.fillStyle = part.c;
      this.ctx.strokeStyle = part.c;

      if (i % 2 === 0) {
        this.ctx.stroke();
      } else {
        this.ctx.fill();
      }

      part.x = part.x + part.toX * (this.time * 0.05);
      part.y = part.y + part.toY * (this.time * 0.05);

      if (part.x > this.w) part.x = 0;
      if (part.y > this.h) part.y = 0;
      if (part.x < 0) part.x = this.w;
      if (part.y < 0) part.y = this.h;
    }

    if (this.time < this.speed) {
      this.time++;
    }

    setTimeout(() => this.animateParticles(), 1000 / this.rate);
  }

  mouseMove(event: MouseEvent) {
    this.mouse.x = event.offsetX;
    this.mouse.y = event.offsetY;
  }

  distanceBetween(p1: any, p2: any): number {
    const dx = p2.x - p1.x;
    const dy = p2.y - p1.y;
    return Math.sqrt(dx * dx + dy * dy);
  }

  @HostListener('window:resize')
  onResize() {
    this.w = window.innerWidth;
    this.h = window.innerHeight;
    this.canvas.width = this.w;
    this.canvas.height = this.h;
    this.createParticles();
  }
}

----------------------------------------


=== File: src/app/home/home.module.ts [MODULE] ===
----------------------------------------
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { TranslocoRootModule } from '../transloco-root.module';
import { HomeComponent } from './home.component';
import { MainComponent } from './main/main.component';
import { BlogComponent } from './blog/blog.component';
import { PrivacyPolicyComponent } from './privacy-policy/privacy-policy.component';
import { TermsComponent } from './terms/terms.component';

@NgModule({
  declarations: [
    HomeComponent,
    MainComponent,
    BlogComponent,
    PrivacyPolicyComponent,
    TermsComponent,
  ],
  imports: [
    ReactiveFormsModule,
    CommonModule,
    FormsModule,
    RouterModule,
    TranslocoRootModule,
  ],
})
export class HomeModule {}

----------------------------------------


=== File: src/app/home/main/main.component.html [HTML] ===
----------------------------------------
<div class="container">
  <div class="st-page">
    <h1 class="z-999">{{ "home.start.h1" | transloco }}</h1>
    <p class="z-999">
      {{ "home.start.p" | transloco }}
    </p>
    <div class="z-999">
      <button type="button" class="content-btn" (click)="goToServices()">
        {{ "home.start.d-m" | transloco }}
      </button>
    </div>
  </div>
  <div class="service-container-hm mb-5">
    <div class="services-title text-center position-relative">
      <small class="fw-bold">SULIKO AI</small>
      <h3>{{ "home.services.h1" | transloco }}</h3>
      <p>
        {{ "home.services.p" | transloco }}
      </p>
    </div>
    <div
      class="services-card d-flex justify-content-center flex-wrap mt-4 mb-5"
    >
      <div class="cardContainer inactive">
        <div
          class="card"
          [ngClass]="{ active: card1Active }"
          (click)="toggleCard(1)"
        >
          <div class="side front">
            <div class="img img1"></div>
            <div class="info">
              <h2>{{ "sidebar.translate" | transloco }}</h2>
              <p>
                {{ "home.services.s1.p" | transloco }}
              </p>
            </div>
          </div>
          <div class="side back">
            <div class="info">
              <h2>{{ "sidebar.translate" | transloco }}</h2>
              <ul>
                <li>
                  <strong> {{ "home.services.s1.b1-title" | transloco }}</strong
                  >{{ "home.services.s1.b1" | transloco }}
                </li>
                <li>
                  <strong>{{ "home.services.s1.b2-title" | transloco }}</strong
                  >{{ "home.services.s1.b2" | transloco }}
                </li>

                <li>
                  <strong>{{ "home.services.s1.b3-title" | transloco }}</strong
                  >{{ "home.services.s1.b3" | transloco }}
                </li>
              </ul>
              <div class="btn" (click)="goToTranslate()">
                <h4>{{ "home.services.try" | transloco }}</h4>
                <svg
                  fill="#333"
                  height="24"
                  viewBox="0 0 24 24"
                  width="24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z" />
                  <path d="M0-.25h24v24H0z" fill="none" />
                </svg>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="cardContainer inactive">
        <div
          class="card"
          [ngClass]="{ active: card2Active }"
          (click)="toggleCard(2)"
        >
          <div class="side front">
            <div class="img img2"></div>
            <div class="info">
              <h2>{{ "sidebar.description" | transloco }}</h2>
              <p>{{ "home.services.s2.p" | transloco }}</p>
            </div>
          </div>
          <div class="side back">
            <div class="info">
              <h2>{{ "sidebar.description" | transloco }}</h2>
              <ul>
                <li>
                  <strong>{{ "home.services.s2.b1-title" | transloco }}</strong
                  >{{ "home.services.s2.b1" | transloco }}
                </li>
              </ul>
              <div class="btn" (click)="goToDesc()">
                <h4>{{ "home.services.try" | transloco }}</h4>
                <svg
                  fill="#333"
                  height="24"
                  viewBox="0 0 24 24"
                  width="24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z" />
                  <path d="M0-.25h24v24H0z" fill="none" />
                </svg>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="cardContainer inactive">
        <div
          class="card"
          [ngClass]="{ active: card3Active }"
          (click)="toggleCard(3)"
        >
          <div class="side front">
            <div class="img img3"></div>
            <div class="info">
              <h2>{{ "sidebar.copyright" | transloco }}</h2>
              <p>
                {{ "home.services.s3.p" | transloco }}
              </p>
            </div>
          </div>
          <div class="side back">
            <div class="info">
              <h2>{{ "sidebar.copyright" | transloco }}</h2>
              <ul>
                <li>
                  <strong>{{ "home.services.s3.b1-title" | transloco }}</strong
                  >{{ "home.services.s3.b1" | transloco }}
                </li>
                <li>
                  <strong>{{ "home.services.s3.b2-title" | transloco }}</strong
                  >{{ "home.services.s3.b2" | transloco }}
                </li>
              </ul>
              <div class="btn" (click)="goToAds()">
                <h4>{{ "home.services.try" | transloco }}</h4>
                <svg
                  fill="#333"
                  height="24"
                  viewBox="0 0 24 24"
                  width="24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z" />
                  <path d="M0-.25h24v24H0z" fill="none" />
                </svg>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="text-center">
      <button type="button" class="content-btn" (click)="goToServices()">
        {{ "home.l-m" | transloco }}
      </button>
      <span
        class="c-p slk-color ms-3"
        (click)="goToSignUp()"
        *ngIf="!isLoggedIn"
        >{{ "sign-up.sign-up-btn" | transloco }} &#10095;</span
      >
    </div>
  </div>
</div>
<div class="info-main-container my-5 py-5">
  <div class="container">
    <div
      class="d-flex gap-4 justify-content-center align-items-center flex-xl-nowrap flex-wrap"
    >
      <div class="flex-shrink">
        <img
          src="../../../assets/images/home/translate.gif"
          alt="Translate GIF"
        />
      </div>
      <div class="flex-grow-1 text-xl-end text-center text-white">
        <h1>{{ "home.about-us" | transloco }}</h1>
        <p>
          {{ "home.about-text-1" | transloco }}
        </p>
        <p>
          {{ "home.about-text-2" | transloco }}
        </p>
      </div>
    </div>
  </div>
</div>
<div class="container">
  <div class="slider-main-container my-5">
    <div class="services-title text-center">
      <small class="fw-bold">SULIKO AI</small>
      <h3>{{ "home.our-blogs" | transloco }}</h3>
      <p>{{ "home.our-blogs-p" | transloco }}</p>
    </div>
    <!-- <div class="my-5 pb-5">
      <div id="carouselExampleCaptions" class="carousel slide w-50 mx-auto">
        <div class="carousel-indicators">
          <button
            type="button"
            data-bs-target="#carouselExampleCaptions"
            data-bs-slide-to="0"
            class="active"
            aria-current="true"
            aria-label="Slide 1"
          ></button>
          <button
            type="button"
            data-bs-target="#carouselExampleCaptions"
            data-bs-slide-to="1"
            aria-label="Slide 2"
          ></button>
          <button
            type="button"
            data-bs-target="#carouselExampleCaptions"
            data-bs-slide-to="2"
            aria-label="Slide 3"
          ></button>
        </div>
        <div class="carousel-inner bg-light">
          <div class="carousel-item active">
            <img
              src="../../../assets/images/error.webp"
              class="d-block w-100"
              alt="../../../assets/images/error.webp"
            />
            <div class="carousel-caption d-none d-md-block">
              <h5>First slide label</h5>
              <p>
                Some representative placeholder content for the first slide.
              </p>
            </div>
          </div>
          <div class="carousel-item">
            <img
              src="../../../assets/images/error.webp"
              class="d-block w-100"
              alt="../../../assets/images/error.webp"
            />
            <div class="carousel-caption d-none d-md-block">
              <h5>Second slide label</h5>
              <p>
                Some representative placeholder content for the second slide.
              </p>
            </div>
          </div>
          <div class="carousel-item">
            <img
              src="../../../assets/images/error.webp"
              class="d-block w-100"
              alt="../../../assets/images/error.webp"
            />
            <div class="carousel-caption d-none d-md-block">
              <h5>Third slide label</h5>
              <p>
                Some representative placeholder content for the third slide.
              </p>
            </div>
          </div>
        </div>
        <button
          class="carousel-control-prev"
          type="button"
          data-bs-target="#carouselExampleCaptions"
          data-bs-slide="prev"
        >
          <span class="carousel-control-prev-icon" aria-hidden="true"></span>
          <span class="visually-hidden">Previous</span>
        </button>
        <button
          class="carousel-control-next"
          type="button"
          data-bs-target="#carouselExampleCaptions"
          data-bs-slide="next"
        >
          <span class="carousel-control-next-icon" aria-hidden="true"></span>
          <span class="visually-hidden">Next</span>
        </button>
      </div>
    </div> -->
  </div>
</div>
<div class="counter-container py-3" id="counter-section">
  <div class="container text-center">
    <div class="row justify-content-center">
      <div class="col-md-3 col-sm-4 col-12">
        <div
          class="d-flex align-items-center justify-content-center gap-3 mb-2"
        >
          <svg
            width="40px"
            height="40px"
            viewBox="0 0 48 48"
            xmlns="http://www.w3.org/2000/svg"
            fill="#000000"
          >
            <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
            <g
              id="SVGRepo_tracerCarrier"
              stroke-linecap="round"
              stroke-linejoin="round"
            ></g>
            <g id="SVGRepo_iconCarrier">
              <defs>
                <style>
                  .a {
                    fill: none;
                    stroke: #ffffff;
                    stroke-linecap: round;
                    stroke-linejoin: round;
                  }
                </style>
              </defs>
              <rect
                class="a"
                x="5.5"
                y="5.5"
                width="15.8571"
                height="15.8571"
              ></rect>
              <rect
                class="a"
                x="27.5004"
                y="6.3575"
                width="14.1421"
                height="14.1421"
                transform="translate(0.6303 28.3788) rotate(-45)"
              ></rect>
              <rect
                class="a"
                x="5.5"
                y="26.6429"
                width="15.8571"
                height="15.8571"
              ></rect>
              <rect
                class="a"
                x="26.6429"
                y="26.6429"
                width="15.8571"
                height="15.8571"
              ></rect>
            </g>
          </svg>
          <h3 class="m-0 p-0">{{ servicesCount }}</h3>
        </div>

        <p class="fw-bolder fs-6 p-0 m-0">{{ "home.count.s" | transloco }}</p>
      </div>
      <div class="col-md-3 col-sm-4 col-12">
        <div
          class="d-flex align-items-center justify-content-center gap-3 mb-2"
        >
          <svg
            fill="#ffffff"
            xmlns="http://www.w3.org/2000/svg"
            width="40px"
            height="40px"
            viewBox="0 0 100 100"
            enable-background="new 0 0 100 100"
            xml:space="preserve"
            stroke="#ffffff"
          >
            <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
            <g
              id="SVGRepo_tracerCarrier"
              stroke-linecap="round"
              stroke-linejoin="round"
            ></g>
            <g id="SVGRepo_iconCarrier">
              <g>
                <path
                  d="M77,31.7h-6c-1.3,0-2.6-0.6-3.6-1.5l-4.8-4.1c-1-0.8-2.3-1.4-3.6-1.4H47.3c-1.5,0-2.9,0.6-4,1.7l-6.2,5.1 c-0.5,0.4-0.5,1.2-0.1,1.7l1.9,1.8c1.3,1,3,1.2,4.3,0.3l5.5-3.3c0.7-0.5,1.7-0.3,2.3,0.3l17.3,16.8c0.4,0.4,0.7,1,0.7,1.6v4.5 c0,1.2,0.9,2.5,2,2.5h6c1.1,0,2-0.9,2-2.1V33.7C79,32.5,78.1,31.7,77,31.7z M60,49.7L49.2,39.2l-3,1.8c-1.5,0.9-3.2,1.4-4.9,1.4 c-2.1,0-4.3-0.8-6-2.2L31.4,37c-0.9-0.7-1.4-1.5-1.5-2.6c-0.2-1.1-1-1.7-2-1.7H21c-1.1,0-2,0.6-2,1.8v18.2c0,1.2,0.9,2,2,2h4 c0.3,0,0.7-1.1,1.1-1.6c1.5-2,3.7-3.1,6.1-3.4c2.4-0.2,4.7,0.6,6.6,2.3l12.5,11.4c1.1,1,1.9,2.1,2.4,3.5c0.3,0.7,1.1,0.9,1.6,0.4 l4.7-4.7c2.4-2.4,4.2-8,2-10.6L60,49.7z M34.9,57.1c-1.3-1.2-3.2-1-4.2,0.4c-1.1,1.4-0.9,3.4,0.4,4.6l12.5,11.3 c0.6,0.6,1.4,0.8,2.2,0.7c0.8-0.1,1.5-0.5,2-1.2c1.1-1.4,0.9-3.4-0.4-4.6L34.9,57.1z"
                ></path>
              </g>
              <path d="M78.9,75.3"></path>
            </g>
          </svg>
          <h3 class="m-0 p-0">{{ partnersCount }}</h3>
        </div>

        <p class="fw-bolder fs-6 p-0 m-0">{{ "home.count.p" | transloco }}</p>
      </div>
      <div class="col-md-3 col-sm-4 col-12">
        <div
          class="d-flex align-items-center justify-content-center gap-3 mb-2"
        >
          <svg
            width="40px"
            height="40px"
            viewBox="-2 0 32 32"
            version="1.1"
            xmlns="http://www.w3.org/2000/svg"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            fill="#000000"
          >
            <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
            <g
              id="SVGRepo_tracerCarrier"
              stroke-linecap="round"
              stroke-linejoin="round"
            ></g>
            <g id="SVGRepo_iconCarrier">
              <g id="icomoon-ignore"></g>
              <path
                d="M0 21.997c0 0.459 0 1.82 0 2.12s0.178 0.813 0.822 0.813c0.494 0 4.438 0 6.245 0 0.547 0 0.9 0 0.9 0h0.155c0 0 0.104 0 0.271 0 0 0.484 0 0.924 0 1.093 0 0.371 0.22 1.006 1.017 1.006 0.612 0 5.509 0 7.746 0 0.677 0 1.116 0 1.116 0h0.192c0 0 0.43 0 1.097 0 2.229 0 7.134 0 7.747 0 0.796 0 1.017-0.634 1.017-1.006s0-2.055 0-2.623-0.201-1.198-1.017-1.548c-1.032-0.452-3.799-1.452-5.537-1.965-0.134-0.043-0.157-0.050-0.157-0.646 0-0.642 0.074-1.097 0.23-1.431 0.215-0.456 0.469-1.224 0.559-1.912 0.256-0.296 0.603-0.88 0.826-1.993 0.197-0.981 0.105-1.338-0.025-1.673-0.014-0.035-0.029-0.070-0.039-0.11-0.048-0.225 0.018-1.42 0.188-2.348 0.116-0.636-0.030-1.988-0.906-3.108-0.553-0.707-1.612-1.576-3.513-1.695l-1.060-0.001c-1.933 0.121-2.991 0.989-3.544 1.696-0.876 1.119-1.021 2.472-0.905 3.108 0.168 0.927 0.236 2.122 0.186 2.352-0.010 0.035-0.025 0.070-0.038 0.105-0.13 0.335-0.221 0.692-0.026 1.673 0.223 1.113 0.571 1.697 0.826 1.993 0.091 0.688 0.345 1.456 0.559 1.912 0.198 0.42 0.4 0.916 0.4 1.409 0 0.597-0.023 0.604-0.166 0.649-0.358 0.105-0.763 0.232-1.189 0.368-1.004-0.373-2.267-0.809-3.183-1.080-0.109-0.034-0.127-0.040-0.127-0.522 0-0.519 0.060-0.887 0.186-1.157 0.174-0.369 0.379-0.989 0.453-1.546 0.206-0.239 0.487-0.711 0.667-1.611 0.159-0.793 0.084-1.081-0.021-1.352-0.011-0.029-0.023-0.057-0.031-0.089-0.039-0.182 0.014-1.148 0.15-1.898 0.093-0.514-0.023-1.607-0.731-2.513-0.447-0.571-1.303-1.273-2.838-1.371h-0.856c-1.562 0.097-2.417 0.8-2.864 1.371-0.708 0.906-0.826 1.999-0.731 2.513 0.135 0.75 0.191 1.716 0.151 1.902-0.008 0.028-0.021 0.056-0.031 0.085-0.106 0.271-0.179 0.559-0.021 1.352 0.18 0.9 0.461 1.372 0.667 1.611 0.074 0.557 0.279 1.176 0.452 1.546 0.16 0.34 0.324 0.741 0.324 1.139 0 0.483-0.018 0.488-0.134 0.525-1.358 0.401-3.553 1.163-4.482 1.552-0.66 0.283-0.976 0.845-0.976 1.304zM9.441 23.401c0-0.156 0.156-0.47 0.574-0.649 1.103-0.461 3.806-1.393 5.448-1.877 0.918-0.288 0.918-1.078 0.918-1.655 0-0.699-0.253-1.33-0.501-1.856-0.171-0.366-0.391-1.025-0.468-1.603l-0.041-0.31-0.205-0.237c-0.113-0.131-0.397-0.541-0.591-1.515-0.152-0.761-0.085-0.934-0.026-1.087l0.001-0.002 0.009-0.026c0.022-0.054 0.041-0.108 0.056-0.161l0.011-0.038 0.008-0.039c0.107-0.501-0.033-1.945-0.18-2.758-0.067-0.366 0.017-1.402 0.7-2.275 0.607-0.776 1.533-1.211 2.752-1.294l0.993 0.001c1.493 0.102 2.303 0.758 2.721 1.293 0.683 0.873 0.766 1.909 0.7 2.273-0.144 0.793-0.287 2.26-0.181 2.755l0.005 0.022 0.006 0.022c0.022 0.085 0.049 0.161 0.080 0.237 0.054 0.141 0.122 0.317-0.030 1.076-0.195 0.975-0.478 1.383-0.591 1.513l-0.206 0.238-0.040 0.312c-0.077 0.579-0.296 1.235-0.469 1.601-0.225 0.481-0.33 1.077-0.33 1.878 0 0.576 0 1.364 0.888 1.646 1.692 0.5 4.44 1.491 5.434 1.926 0.296 0.127 0.389 0.269 0.389 0.587v2.579h-17.828l-0.005-2.579zM1.049 21.997c0.002-0.041 0.067-0.222 0.341-0.34 0.899-0.377 3.066-1.126 4.365-1.51 0.886-0.282 0.886-1.064 0.886-1.531 0-0.603-0.214-1.14-0.424-1.586-0.136-0.291-0.304-0.811-0.361-1.237l-0.041-0.31-0.204-0.237c-0.064-0.073-0.281-0.372-0.433-1.133-0.112-0.557-0.067-0.673-0.031-0.766l0.006-0.014 0.004-0.014c0.022-0.054 0.036-0.097 0.048-0.14l0.012-0.039 0.008-0.039c0.103-0.484-0.045-1.763-0.144-2.309-0.046-0.257 0.022-1.034 0.527-1.68 0.453-0.578 1.149-0.904 2.071-0.968h0.788c1.127 0.080 1.734 0.569 2.046 0.968 0.504 0.645 0.573 1.424 0.527 1.68-0.106 0.577-0.244 1.841-0.146 2.304l0.005 0.022 0.005 0.022c0.020 0.074 0.043 0.14 0.069 0.207 0.036 0.092 0.081 0.21-0.030 0.766-0.153 0.762-0.37 1.059-0.433 1.132l-0.204 0.237-0.041 0.31c-0.057 0.428-0.225 0.947-0.363 1.238-0.195 0.417-0.286 0.926-0.286 1.603 0 0.468 0 1.251 0.859 1.523 0.543 0.161 1.219 0.383 1.887 0.616-1.103 0.378-2.155 0.761-2.763 1.015-0.818 0.351-1.209 1.045-1.209 1.613 0 0.118 0 0.287 0 0.481h-7.343v-1.884z"
                fill="#ffffff"
              ></path>
            </g>
          </svg>
          <h3 class="m-0 p-0">{{ activeUsersCount }}</h3>
        </div>

        <p class="fw-bolder fs-6 p-0 m-0">{{ "home.count.au" | transloco }}</p>
      </div>
    </div>
  </div>
</div>

----------------------------------------


=== File: src/app/home/main/main.component.scss [STYLE] ===
----------------------------------------
.st-page {
  display: flex;
  justify-content: center;
  flex-direction: column;
  min-height: 80vh;
  h1 {
    font-size: calc(3vw + 1rem);
    max-width: 1000px;
  }
  p {
    max-width: 800px;
    font-size: calc(1vw + 0.25rem);
  }
}

.service-container-hm {
  .services-title {
    h3 {
      font-size: calc(2vw + 0.5rem);
    }
    p {
      max-width: 700px;
      margin: auto;
    }
  }
  .cardContainer {
    position: relative;
    width: 350px;
    height: 400px;
    min-width: 300px;
    min-height: 400px;
    margin: 4px;
    perspective: 1000px;
  }

  .active {
    transform: translateZ(0px) rotateY(180deg) !important;

    &:after {
      display: none;
    }
  }

  .card {
    display: inline-block;
    width: 100%;
    height: 100%;
    cursor: pointer;
    -moz-backface-visibility: hidden;
    transform-style: preserve-3d;
    transform: translateZ(-100px);
    transition: all 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);

    &:after {
      content: "";
      position: absolute;
      z-index: -1;
      width: 100%;
      height: 100%;
      border-radius: 5px;
      box-shadow: 0 14px 50px -4px hsla(0, 0%, 0%, 0.15);
      opacity: 0;
      transition: all 0.6s cubic-bezier(0.165, 0.84, 0.44, 1.4);
    }

    &:hover {
      transform: translateZ(0px);
    }

    &:hover:after {
      opacity: 1;
    }

    .side {
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      position: absolute;
      width: 100%;
      height: 100%;
      border-radius: 5px;
      background-color: hsla(0, 0%, 100%, 1);
    }

    .front {
      z-index: 2;
    }

    .back {
      transform: rotateY(180deg);
    }

    .info {
      padding: 16px;
    }
  }

  // Front of card
  .front {
    .img {
      background-color: hsla(223, 13%, 87%, 1);
      background-position: center;
      background-size: cover;
      border-radius: 5px 5px 0 0;
      width: 100%;
      height: 250px;
    }

    .img1 {
      background-image: url('../../../assets/images/home/translate-photo.png');
    }

    .img2 {
      background-image: url('../../../assets/images/home/pr-des.png');
    }

    .img3 {
      background-image: url('../../../assets/images/home/ads.png');
    }
  }

  // Back of card
  .back {
    position: relative;

    h2 {
      margin-top: 6px;
      margin-bottom: 18px;
    }

    .reviews {
      display: flex;
      align-items: center;
      margin-bottom: 12px;
      cursor: pointer;

      p {
        color: hsla(0, 0%, 77%, 1);
        font-weight: 300;
        margin: 1px 0 0 6px;
        transition: 0.3s ease-in-out;
      }

      &:hover p {
        color: #555;
      }
    }

    li {
      line-height: 22px;
      margin: 2px 0 6px 0;
    }

    .btn {
      // positioning
      position: absolute;
      bottom: 16px;
      width: calc(100% - 32px);
      height: 56px;
      display: flex;
      align-items: center;
      justify-content: center;
      // style
      background-color: #ffc324;
      background-image: linear-gradient(-90deg, #ffb714, #ffe579);
      border-radius: 5px;
      cursor: pointer;

      &:hover {
        h4 {
          transform: translateX(0px);
        }

        svg {
          transform: translateX(0px);
          opacity: 1;
        }
      }

      h4 {
        transform: translateX(12px);
        transition: transform 0.3s ease-out;
      }

      svg {
        margin: 1px 0 0 4px;
        transform: translateX(-8px);
        opacity: 0;
        transition: all 0.3s ease-out;
      }
    }
  }
}

.info-main-container {
  background-color: #3b59f3;
  img {
    max-width: 600px;
    min-width: 100%;
    margin: auto;
    border-radius: 5px;
  }
}

----------------------------------------


=== File: src/app/home/main/main.component.spec.ts [TEST] ===
----------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { MainComponent } from './main.component';

describe('MainComponent', () => {
  let component: MainComponent;
  let fixture: ComponentFixture<MainComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [MainComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(MainComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------


=== File: src/app/home/main/main.component.ts [COMPONENT] ===
----------------------------------------
import { isPlatformBrowser } from '@angular/common';
import { Component, HostListener, Inject, PLATFORM_ID } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from '../../shared/services/auth.service';

@Component({
  selector: 'app-main',
  templateUrl: './main.component.html',
  styleUrl: './main.component.scss',
})
export class MainComponent {
  isLoggedIn!: boolean;
  card1Active = false;
  card2Active = false;
  card3Active = false;

  servicesCount = 0;
  activeUsersCount = 0;
  partnersCount = 0;

  private servicesTarget = 6;
  private activeUsersTarget = 48;
  private partnersTarget = 9;
  private hasAnimated = false;

  constructor(
    private _router: Router,
    private _auth: AuthService
  ) {}

  ngOnInit() {
    this.isLoggedIn = this._auth.isAuthenticated();
  }

  toggleCard(cardNumber: number) {
    switch (cardNumber) {
      case 1:
        this.card1Active = !this.card1Active;
        break;
      case 2:
        this.card2Active = !this.card2Active;
        break;
      case 3:
        this.card3Active = !this.card3Active;
        break;
      default:
        break;
    }
  }

  @HostListener('window:scroll', [])
  onScroll(): void {
    const element = document.getElementById('counter-section');
    if (element) {
      const rect = element.getBoundingClientRect();
      const inView = rect.top >= 0 && rect.bottom <= window.innerHeight;

      if (inView && !this.hasAnimated) {
        this.startCounter();
        this.hasAnimated = true;
      }
    }
  }

  startCounter(): void {
    this.animateCounter('servicesCount', this.servicesTarget);
    this.animateCounter('activeUsersCount', this.activeUsersTarget);
    this.animateCounter('partnersCount', this.partnersTarget);
  }

  animateCounter(
    property: 'servicesCount' | 'activeUsersCount' | 'partnersCount',
    target: number
  ): void {
    const interval = setInterval(() => {
      if (this[property] < target) {
        this[property]++;
      } else {
        clearInterval(interval);
      }
    }, 20);
  }

  goToServices() {
    this._router.navigate(['/services']);
  }

  goToSignUp() {
    this._router.navigate(['/sign-up']);
  }

  goToTranslate() {
    this._router.navigate(['/services/translate']);
  }

  goToDesc() {
    this._router.navigate(['/services/description']);
  }

  goToAds() {
    this._router.navigate(['/services/copyright']);
  }
}

----------------------------------------


=== File: src/app/home/privacy-policy/privacy-policy.component.html [HTML] ===
----------------------------------------
<div class="container position-relative mb-5">
  <h1 class="my-5">Suliko AI-ის კონფიდენციალურობის პოლიტიკა</h1>
  <p>
    ეს კონფიდენციალურობის პოლიტიკა განმარტავს, თუ როგორ აგროვებს, იყენებს და
    იცავს Suliko AI თქვენს პერსონალურ ინფორმაციას ჩვენი ვებ-გვერდის
    გამოყენებისას.
  </p>

  <h6>1. შეგროვებული ინფორმაცია</h6>
  <ul>
    <p>ჩვენ ვაგროვებთ შემდეგ პერსონალურ ინფორმაციას:</p>
    <li>სახელი და გვარი</li>
    <li>ელექტრონული ფოსტის მისამართი</li>
    <li>ტელეფონის ნომერი</li>
    <p class="mt-3">
      გარდა ამისა, ჩვენ ვინახავთ თქვენ მიერ გენერირებულ კონტენტს "ისტორიის"
      სექციაში.
    </p>
  </ul>

  <h6>2. ინფორმაციის გამოყენება</h6>

  <p>
    თქვენს მიერ მოწოდებულ ინფორმაციას ვიყენებთ მხოლოდ მომსახურების გასაწევად და
    თქვენთან კომუნიკაციისთვის. ჩვენ არ ვიყენებთ თქვენს მიერ გენერირებულ კონტენტს
    რაიმე სხვა მიზნით.
  </p>

  <h6>3. ქუქი-ფაილები</h6>
  <p>ჩვენი ვებ-გვერდი არ იყენებს ქუქი-ფაილებს.</p>

  <h6>4. მონაცემთა შენახვა და დაცვა</h6>
  <p>
    თქვენი პერსონალური ინფორმაცია ინახება დაშიფრული სახით სერვერზე, რომელიც
    მდებარეობს ევროკავშირის ტერიტორიაზე. ჩვენ ვიღებთ ყველა საჭირო ზომას თქვენი
    მონაცემების დასაცავად არაავტორიზებული წვდომის, გამჟღავნების, შეცვლის ან
    განადგურებისგან.
  </p>

  <h6>5. ინფორმაციის გაზიარება</h6>
  <p>ჩვენ არ ვუზიარებთ თქვენს პერსონალურ ინფორმაციას მესამე მხარეებს.</p>

  <h6>6. მომხმარებლის უფლებები</h6>

  <p>
    GDPR-ის შესაბამისად, თქვენ გაქვთ უფლება მოითხოვოთ წვდომა, შესწორება ან წაშლა
    თქვენი პერსონალური ინფორმაციისა. ასევე, შეგიძლიათ მოითხოვოთ თქვენი
    მონაცემების დამუშავების შეზღუდვა ან წინააღმდეგობა გაუწიოთ მათ დამუშავებას.
  </p>

  <h6>7. კონტაქტი</h6>

  <p>
    თუ გაქვთ კითხვები ან შენიშვნები ჩვენს კონფიდენციალურობის პოლიტიკასთან
    დაკავშირებით, გთხოვთ დაგვიკავშირდეთ:
  </p>

  <ul>
    <li>ელ-ფოსტა: misha&#64;api24.ge</li>
    <li>ტელეფონი: +995 579 737 737</li>
  </ul>

  <h6>8. ასაკობრივი შეზღუდვა</h6>

  <p>ჩვენს სერვისს არ აქვს ასაკობრივი შეზღუდვა.</p>

  <h6>9. ცვლილებები კონფიდენციალურობის პოლიტიკაში</h6>
  <p>
    ჩვენ პერიოდულად ვანახლებთ ამ კონფიდენციალურობის პოლიტიკას. განახლება ხდება
    ყოველ 4-6 თვეში ერთხელ. გთხოვთ, რეგულარულად შეამოწმოთ ეს გვერდი
    ცვლილებებისთვის.
  </p>
  <p>ბოლო განახლება: [02/10/2024]</p>

  <p>
    თქვენი Suliko AI-ის სერვისის გამოყენებით, თქვენ ეთანხმებით ამ
    კონფიდენციალურობის პოლიტიკას.
  </p>
</div>

----------------------------------------


=== File: src/app/home/privacy-policy/privacy-policy.component.scss [STYLE] ===
----------------------------------------
h6 {
  font-weight: 600;
}

----------------------------------------


=== File: src/app/home/privacy-policy/privacy-policy.component.spec.ts [TEST] ===
----------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { PrivacyPolicyComponent } from './privacy-policy.component';

describe('PrivacyPolicyComponent', () => {
  let component: PrivacyPolicyComponent;
  let fixture: ComponentFixture<PrivacyPolicyComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [PrivacyPolicyComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(PrivacyPolicyComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------


=== File: src/app/home/privacy-policy/privacy-policy.component.ts [COMPONENT] ===
----------------------------------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-privacy-policy',
  templateUrl: './privacy-policy.component.html',
  styleUrl: './privacy-policy.component.scss'
})
export class PrivacyPolicyComponent {

}

----------------------------------------


=== File: src/app/home/terms/terms.component.html [HTML] ===
----------------------------------------
<div class="container position-relative mb-5">
  <h1 class="my-5">Suliko AI-ის მომსახურების პირობები</h1>
  <p>
    ეს მომსახურების პირობები ("პირობები") არეგულირებს Suliko AI-ის ვებ-გვერდისა
    და სერვისების გამოყენებას. ამ ვებ-გვერდის გამოყენებით, თქვენ ეთანხმებით ამ
    პირობებს. გთხოვთ, ყურადღებით წაიკითხოთ ისინი.
  </p>
  <h6>1. სერვისის აღწერა</h6>
  <p>
    Suliko AI არის ონლაინ პლატფორმა, რომელიც უზრუნველყოფს პროდუქტის
    აღწერილობების გენერირებას, მათ თარგმნას სხვადასხვა ენებზე და სოციალური
    მედიის პოსტების შექმნას და სხვა.
  </p>
  <h6>2. რეგისტრაცია და ანგარიში</h6>
  <ul>
    <li>
      2.1. სერვისის გამოყენებისთვის შეიძლება საჭირო იყოს რეგისტრაცია. თქვენ
      პასუხისმგებელი ხართ თქვენი ანგარიშის უსაფრთხოებაზე და ყველა აქტივობაზე,
      რომელიც ხორციელდება თქვენი ანგარიშის მეშვეობით.
    </li>
    <li>
      2.2. თქვენ გარანტიას იძლევით, რომ რეგისტრაციისას მოწოდებული ინფორმაცია
      არის ზუსტი, სრული და განახლებული.
    </li>
  </ul>
  <h6>3. მომსახურების გამოყენება</h6>
  <ul>
    <li>
      3.1. თქვენ თანახმა ხართ გამოიყენოთ სერვისი მხოლოდ კანონიერი მიზნებისთვის
      და ამ პირობების შესაბამისად.
    </li>
    <li>3.2. თქვენ არ შეგიძლიათ:</li>
    <ul>
      <li>სერვისის გამოყენება უკანონო ან არაეთიკური მიზნებისთვის.</li>
      <li>სისტემაში შეღწევის ან მისი უსაფრთხოების დარღვევის მცდელობა.</li>
      <li>
        სერვისის გამოყენება სპამის ან არასასურველი მასალის გასავრცელებლად.
      </li>
    </ul>
  </ul>
  <h6>4. ინტელექტუალური საკუთრება</h6>
  <ul>
    <li>
      4.1. Suliko AI-ის სერვისი და მასთან დაკავშირებული ყველა მასალა არის Suliko
      AI-ის საკუთრება და დაცულია საავტორო უფლებებით და სხვა ინტელექტუალური
      საკუთრების კანონებით.
    </li>
    <li>
      4.2. თქვენ გეძლევათ შეზღუდული, არაექსკლუზიური, არაგადაცემადი ლიცენზია
      სერვისის გამოსაყენებლად პირადი ან ბიზნეს მიზნებისთვის.
    </li>
  </ul>
  <h6>5. მომხმარებლის კონტენტი</h6>
  <ul>
    <li>
      5.1. თქვენ ინარჩუნებთ საკუთრების უფლებას თქვენს მიერ სერვისში შეყვანილ ან
      გენერირებულ კონტენტზე.
    </li>
    <li>
      5.2. თქვენ გვაძლევთ გლობალურ, უფასო ლიცენზიას თქვენი კონტენტის
      გამოყენებაზე, რეპროდუცირებაზე და გავრცელებაზე სერვისის მიწოდების მიზნით.
    </li>
  </ul>
  <h6>6. პასუხისმგებლობის შეზღუდვა</h6>
  <ul>
    <li>
      6.1. Suliko AI არ იძლევა გარანტიას სერვისის უწყვეტობაზე, უშეცდომობაზე ან
      კონკრეტული შედეგების მიღწევაზე.
    </li>
    <li>
      6.2. Suliko AI არ არის პასუხისმგებელი რაიმე არაპირდაპირ, შემთხვევით,
      სპეციალურ ან შედეგობრივ ზიანზე, რომელიც გამოწვეულია სერვისის გამოყენებით.
    </li>
  </ul>
  <h6>7. ცვლილებები სერვისში და პირობებში</h6>
  <p>
    Suliko AI იტოვებს უფლებას, ნებისმიერ დროს შეიტანოს ცვლილებები სერვისში ან ამ
    პირობებში. მნიშვნელოვანი ცვლილებების შესახებ შეგატყობინებთ ელექტრონული
    ფოსტით ან სერვისში შეტყობინების განთავსებით.
  </p>
  <h6>8. მოქმედი კანონმდებლობა</h6>
  <p>
    ეს პირობები რეგულირდება და განიმარტება საქართველოს კანონმდებლობის
    შესაბამისად.
  </p>
  <h6>9. კონტაქტი</h6>
  <p>თუ გაქვთ კითხვები ამ პირობებთან დაკავშირებით, გთხოვთ დაგვიკავშირდეთ:</p>
  <ul>
    <li>- ელ-ფოსტა: misha&#64;api24.ge</li>
    <li>- ტელეფონი: +995 579 737 737</li>
  </ul>
  <p>
    ამ პირობების გამოყენებით თქვენ ადასტურებთ, რომ წაიკითხეთ, გაიგეთ და
    ეთანხმებით მათ.
  </p>
  <p>ბოლო განახლება: [02/10/2024]</p>
</div>

----------------------------------------


=== File: src/app/home/terms/terms.component.scss [STYLE] ===
----------------------------------------
ul li {
  list-style: none;
}
h6 {
  font-weight: 600;
}

----------------------------------------


=== File: src/app/home/terms/terms.component.spec.ts [TEST] ===
----------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TermsComponent } from './terms.component';

describe('TermsComponent', () => {
  let component: TermsComponent;
  let fixture: ComponentFixture<TermsComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [TermsComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(TermsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------


=== File: src/app/home/terms/terms.component.ts [COMPONENT] ===
----------------------------------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-terms',
  templateUrl: './terms.component.html',
  styleUrl: './terms.component.scss'
})
export class TermsComponent {

}

----------------------------------------


=== File: src/app/shared/components/auth-require/auth-require.component.html [HTML] ===
----------------------------------------
<div class="p-4 text-center" style="max-width: 400px;">
  <p class="py-3">{{ 'auth-require' | transloco }}</p>
  <div class="text-center">
    <button class="content-btn mx-1" (click)="goToSignIn()">{{ 'header.signin' | transloco }}</button>
    <button class="content-btn mx-1" (click)="goToSignUp()">{{ 'sign-up.sign-up-btn' | transloco }}</button>
  </div>
</div>

----------------------------------------


=== File: src/app/shared/components/auth-require/auth-require.component.scss [STYLE] ===
----------------------------------------

----------------------------------------


=== File: src/app/shared/components/auth-require/auth-require.component.ts [COMPONENT] ===
----------------------------------------
import { Component } from '@angular/core';
import { MatDialogClose, MatDialogRef } from '@angular/material/dialog';
import { Router } from '@angular/router';

@Component({
  selector: 'app-auth-require',
  templateUrl: './auth-require.component.html',
  styleUrl: './auth-require.component.scss'
})
export class AuthRequireComponent {
  constructor(
    private router: Router,
    private dialog: MatDialogRef<AuthRequireComponent>
  ) {}

  goToSignIn() {
    this.dialog.close();
    this.router.navigate(['/sign-in']);
  }

  goToSignUp() {
    this.dialog.close();
    this.router.navigate(['/sign-up']);
  }
}

----------------------------------------


=== File: src/app/shared/components/error/error.component.html [HTML] ===
----------------------------------------
<div class="error-container">
  <div
    class="message-box text-center d-flex align-items-center justify-content-around flex-column"
  >
    <img src="../../../../assets/images/error.webp" alt="ERROR 404" />
    <p class="m-0 mt-4 fw-bold fs-5">{{ 'error.err1' | transloco }}</p>
    <button class="error-btn mt-4 px-3 py-2" (click)="navigateToMain()">
      {{ 'error.err2' | transloco }}
    </button>
  </div>
</div>

----------------------------------------


=== File: src/app/shared/components/error/error.component.scss [STYLE] ===
----------------------------------------
@media screen and (max-width: 668px) {
  .message-box {
    padding: 30px;
    width: 95vw;
    img {
      max-width: 300px;
    }
  }
}

@media screen and (min-width: 669px) {
  .message-box {
    padding: 50px;
    width: 35vw;
    max-width: 400px;
  }
}

.error-container {
  position: relative;
  overflow: hidden;
  width: 100vw;
  height: 100vh;
  background-image: radial-gradient(
    circle,
    #2d355a,
    #2e3f7f,
    #2f49a5,
    #3251cc,
    #3b59f3
  );
  user-select: none;
  .message-box {
    background-color: white;
    min-height: 50vh;
    position: absolute;
    border-radius: 20px;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    img {
      width: 100%;
    }
    .error-btn {
      width: 100%;
      border: none;
      border-radius: 10px;
      background-color: #3b59f3;
      color: white;
      box-shadow: rgba(255, 255, 255, 0.4) 0px 7px 29px 0px;
      transition: 0.25s all ease-in-out;
      &:hover {
        box-shadow: rgba(58, 51, 51, 0.4) 0px 7px 29px 0px;
      }
    }
  }
}

----------------------------------------


=== File: src/app/shared/components/error/error.component.spec.ts [TEST] ===
----------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ErrorComponent } from './error.component';

describe('ErrorComponent', () => {
  let component: ErrorComponent;
  let fixture: ComponentFixture<ErrorComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ErrorComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(ErrorComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------


=== File: src/app/shared/components/error/error.component.ts [COMPONENT] ===
----------------------------------------
import { Component } from '@angular/core';
import { Router } from '@angular/router';

@Component({
  selector: 'app-error',
  templateUrl: './error.component.html',
  styleUrl: './error.component.scss',
})
export class ErrorComponent {
  constructor(private _router: Router) {}

  navigateToMain() {
    this._router.navigate(['/services']);
  }
}

----------------------------------------


=== File: src/app/shared/components/greeting/greeting.component.html [HTML] ===
----------------------------------------
<div class="text-start container py-5">
  <!-- <img src="../../../../assets/images/SLK/Logo.svg" width="40" alt="SULIKO" /> -->
  <h3 class="my-2">{{ title }}</h3>
  <p class="text-muted">{{ description1 }}</p>
  <p class="text-muted fw-bold">
    {{ description2 }}
  </p>
</div>

----------------------------------------


=== File: src/app/shared/components/greeting/greeting.component.scss [STYLE] ===
----------------------------------------

----------------------------------------


=== File: src/app/shared/components/greeting/greeting.component.spec.ts [TEST] ===
----------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { GreetingComponent } from './greeting.component';

describe('GreetingComponent', () => {
  let component: GreetingComponent;
  let fixture: ComponentFixture<GreetingComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [GreetingComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(GreetingComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------


=== File: src/app/shared/components/greeting/greeting.component.ts [COMPONENT] ===
----------------------------------------
import { Component, HostListener, Input, OnInit } from '@angular/core';

@Component({
  selector: 'app-greeting',
  templateUrl: './greeting.component.html',
  styleUrl: './greeting.component.scss'
})
export class GreetingComponent {
  isSmallScreen: boolean = false;

  @Input() title!: string;
  @Input() description1!: string;
  @Input() description2!: string;
}

----------------------------------------


=== File: src/app/shared/components/purchase-modal/purchase-modal.component.ts [COMPONENT] ===
----------------------------------------
import { Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { TranslocoService } from '@ngneat/transloco';

export interface PurchaseDialogData {
  amount: string;
  packageName: string;
}

@Component({
  selector: 'app-purchase-modal',
  template: `
    <div class="purchase-modal-container p-4">
      <div class="text-center mb-4">
        <div class="credit-card-icon"></div>
        <h2>{{ purchaseTitle }}</h2>
      </div>
      
      <div class="package-row mb-4">
        <span class="package-badge">{{ data.packageName }}</span>
        <span class="amount">{{ data.amount }}</span>
      </div>
      
      <div class="bank-section">
        <p class="bank-info-title">
          <span class="bank-icon"></span> {{ bankInfoLabel }}
        </p>
        
        <p class="bank-detail">
          <span class="building-icon"></span> {{ bankNameLabel }}: Bank of Georgia
        </p>
        
        <p class="bank-detail">
          <span class="card-icon"></span> {{ accountNumberLabel }}: GE123456789012345678
        </p>
        
        <p class="bank-detail mb-4">
          <span class="person-icon"></span> {{ recipientLabel }}: Suliko AI
        </p>
        
        <p class="mt-3">{{ contactInfoLabel }}</p>
        
        <p class="contact-detail">
          <span class="email-icon"></span> misha&#64;api24.ge
        </p>
        
        <p class="contact-detail mb-4">
          <span class="phone-icon"></span> +995 579 737 737
        </p>
      </div>

      <div class="text-center">
        <button type="button" class="close-button" (click)="closeDialog()">
          {{ closeLabel }}
        </button>
      </div>
    </div>
  `,
  styles: [`
    .purchase-modal-container {
      max-width: 500px;
    }
    
    .credit-card-icon {
      width: 30px;
      height: 20px;
      margin: 0 auto 10px;
      background-color: #3b59f3;
      border-radius: 3px;
      position: relative;
    }
    
    .credit-card-icon:after {
      content: "";
      position: absolute;
      left: 5px;
      top: 12px;
      width: 20px;
      height: 2px;
      background-color: white;
      box-shadow: 0 -4px 0 white, 0 -8px 0 white;
    }
    
    .package-row {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin: 20px 0;
    }
    
    .package-badge {
      padding: 8px 20px;
      background: #3b59f3;
      border-radius: 20px;
      color: white;
      font-weight: bold;
    }
    
    .amount {
      font-size: 1.5rem;
      font-weight: bold;
      color: #3b59f3;
    }
    
    .bank-section {
      background-color: #f8f9fa;
      padding: 15px;
      border-radius: 5px;
    }
    
    .bank-info-title {
      color: #3b59f3;
      font-weight: bold;
      display: flex;
      align-items: center;
      margin-bottom: 10px;
    }
    
    .bank-detail, .contact-detail {
      display: flex;
      align-items: center;
      margin-bottom: 8px;
      margin-left: 15px;
    }
    
    .bank-icon, .building-icon, .card-icon, .person-icon, .email-icon, .phone-icon {
      display: inline-block;
      width: 20px;
      height: 20px;
      margin-right: 10px;
      background-color: #3b59f3;
      -webkit-mask-size: contain;
      mask-size: contain;
      -webkit-mask-repeat: no-repeat;
      mask-repeat: no-repeat;
      -webkit-mask-position: center;
      mask-position: center;
    }
    
    .bank-icon {
      -webkit-mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M11.5,1L2,6V8H21V6L11.5,1M16,10V17H19V10H16M2,22H21V19H2V22M10,10V17H13V10H10M4,10V17H7V10H4Z'/%3E%3C/svg%3E");
      mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M11.5,1L2,6V8H21V6L11.5,1M16,10V17H19V10H16M2,22H21V19H2V22M10,10V17H13V10H10M4,10V17H7V10H4Z'/%3E%3C/svg%3E");
    }
    
    .building-icon {
      -webkit-mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M19,2H9V1H7V2H5C3.9,2,3,2.9,3,4V20C3,21.1,3.9,22,5,22H19C20.1,22,21,21.1,21,20V4C21,2.9,20.1,2,19,2M9,4H11V6H9V4M13,4H15V6H13V4M9,8H11V10H9V8M13,8H15V10H13V8M9,12H11V14H9V12M13,12H15V14H13V12Z'/%3E%3C/svg%3E");
      mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M19,2H9V1H7V2H5C3.9,2,3,2.9,3,4V20C3,21.1,3.9,22,5,22H19C20.1,22,21,21.1,21,20V4C21,2.9,20.1,2,19,2M9,4H11V6H9V4M13,4H15V6H13V4M9,8H11V10H9V8M13,8H15V10H13V8M9,12H11V14H9V12M13,12H15V14H13V12Z'/%3E%3C/svg%3E");
    }
    
    .card-icon {
      -webkit-mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M20,8H4V6H20M20,18H4V12H20M20,4H4C2.9,4,2,4.9,2,6V18C2,19.1,2.9,20,4,20H20C21.1,20,22,19.1,22,18V6C22,4.9,21.1,4,20,4Z'/%3E%3C/svg%3E");
      mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M20,8H4V6H20M20,18H4V12H20M20,4H4C2.9,4,2,4.9,2,6V18C2,19.1,2.9,20,4,20H20C21.1,20,22,19.1,22,18V6C22,4.9,21.1,4,20,4Z'/%3E%3C/svg%3E");
    }
    
    .person-icon {
      -webkit-mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,14C16.42,14 20,15.79 20,18V20H4V18C4,15.79 7.58,14 12,14Z'/%3E%3C/svg%3E");
      mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,14C16.42,14 20,15.79 20,18V20H4V18C4,15.79 7.58,14 12,14Z'/%3E%3C/svg%3E");
    }
    
    .email-icon {
      -webkit-mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M20,4H4C2.9,4,2,4.9,2,6V18C2,19.1,2.9,20,4,20H20C21.1,20,22,19.1,22,18V6C22,4.9,21.1,4,20,4M20,8L12,13L4,8V6L12,11L20,6V8Z'/%3E%3C/svg%3E");
      mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M20,4H4C2.9,4,2,4.9,2,6V18C2,19.1,2.9,20,4,20H20C21.1,20,22,19.1,22,18V6C22,4.9,21.1,4,20,4M20,8L12,13L4,8V6L12,11L20,6V8Z'/%3E%3C/svg%3E");
    }
    
    .phone-icon {
      -webkit-mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M6.62,10.79C8.06,13.62 10.38,15.94 13.21,17.38L15.41,15.18C15.69,14.9 16.08,14.82 16.43,14.93C17.55,15.3 18.75,15.5 20,15.5A1,1 0 0,1 21,16.5V20A1,1 0 0,1 20,21A17,17 0 0,1 3,4A1,1 0 0,1 4,3H7.5A1,1 0 0,1 8.5,4C8.5,5.25 8.7,6.45 9.07,7.57C9.18,7.92 9.1,8.31 8.82,8.59L6.62,10.79Z'/%3E%3C/svg%3E");
      mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M6.62,10.79C8.06,13.62 10.38,15.94 13.21,17.38L15.41,15.18C15.69,14.9 16.08,14.82 16.43,14.93C17.55,15.3 18.75,15.5 20,15.5A1,1 0 0,1 21,16.5V20A1,1 0 0,1 20,21A17,17 0 0,1 3,4A1,1 0 0,1 4,3H7.5A1,1 0 0,1 8.5,4C8.5,5.25 8.7,6.45 9.07,7.57C9.18,7.92 9.1,8.31 8.82,8.59L6.62,10.79Z'/%3E%3C/svg%3E");
    }
    
    .close-button {
      background: #3b59f3;
      color: white;
      padding: 10px 30px;
      border: none;
      border-radius: 20px;
      font-weight: bold;
    }
  `]
})
export class PurchaseModalComponent implements OnInit {
  // Pre-loaded translation labels
  purchaseTitle = 'Payment Information';
  bankInfoLabel = 'Bank Details';
  bankNameLabel = 'Bank';
  accountNumberLabel = 'Account';
  recipientLabel = 'Recipient';
  contactInfoLabel = 'Contact us:';
  closeLabel = 'Close';

  constructor(
    public dialogRef: MatDialogRef<PurchaseModalComponent>,
    @Inject(MAT_DIALOG_DATA) public data: PurchaseDialogData,
    private transloco: TranslocoService
  ) {}

  ngOnInit(): void {
    // Load translations
    this.loadTranslations();
  }

  loadTranslations(): void {
    const lang = this.transloco.getActiveLang();
    
    if (lang === 'ge') {
      // Georgian translations
      this.purchaseTitle = 'გადახდის ინფორმაცია';
      this.bankInfoLabel = 'საბანკო რეკვიზიტები';
      this.bankNameLabel = 'ბანკი';
      this.accountNumberLabel = 'ანგარიში';
      this.recipientLabel = 'მიმღები';
      this.contactInfoLabel = 'დაგვიკავშირდით:';
      this.closeLabel = 'დახურვა';
    } else {
      // English translations (default)
      this.purchaseTitle = 'Payment Information';
      this.bankInfoLabel = 'Bank Details';
      this.bankNameLabel = 'Bank';
      this.accountNumberLabel = 'Account';
      this.recipientLabel = 'Recipient';
      this.contactInfoLabel = 'Contact us:';
      this.closeLabel = 'Close';
    }
  }

  closeDialog(): void {
    this.dialogRef.close();
  }
}
----------------------------------------


=== File: src/app/shared/data/api.ts [TS] ===
----------------------------------------
export const url = {
  content: '/api/UserContent',
  translate: '/api/UserContent/translate',
  copyright: '/api/UserContent/copyright',
  videoScript: '/api/UserContent/video-script',
  productCategory: '/api/ProductCategory',
  login: '/api/auth/login',
  loginFB: '/api/Auth/login-with-fb',
  register: '/api/Auth/register',
  refresh: '/api/Auth/refresh-token',
  user: '/api/User',
  fileTranslate: '/api/UserContent/translate',
  email: '/api/UserContent/email',
  language: '/api/Language',
  history: '/api/UserRequestLog/by-user/',
  lawyer: '/api/Content/prompt',
  enhance: '/api/UserContent/enhance-translate'
};

----------------------------------------


=== File: src/app/shared/data/language.ts [TS] ===
----------------------------------------
export const language = [
    {
      path: '../../../assets/images/sidebar_icons/geo.svg',
      key: 'ge',
    },
    {
      path: `../../../assets/images/sidebar_icons/uk.svg`,
      key: 'en',
    },
];

export const form = [
  { value: 1, viewValue: 'ფორმალური' },
  { value: 2, viewValue: 'მეგობრული' },
  { value: 3, viewValue: 'ნეიტრალური' },
];

----------------------------------------


=== File: src/app/shared/interfaces/category.interface.ts [TS] ===
----------------------------------------
export interface Category {
  id: string,
  name: string,
  nameEng: string,
  api24Id: string
}

----------------------------------------


=== File: src/app/shared/interfaces/language.interface.ts [TS] ===
----------------------------------------
export interface Language {
  id: number;
  name: string;
  nameGeo: string
}

----------------------------------------


=== File: src/app/shared/interfaces/registerUser.interface.ts [TS] ===
----------------------------------------
export interface RegisterUser {
  firstName: string;
  lastName: string;
  email: string;
  phoneNumber: string;
  password: string;
}

----------------------------------------


=== File: src/app/shared/interfaces/request-history.interface.ts [TS] ===
----------------------------------------
export interface RequestHistory {
    id: string,
    userId: string,
    userName: string,
    requestJson: string,
    responseJson: string,
    createTime: string,
    requestType: number
}

----------------------------------------


=== File: src/app/shared/interfaces/signInUser.interface.ts [TS] ===
----------------------------------------
export interface MetaData {
  username: string;
  password: string;
}

----------------------------------------


=== File: src/app/shared/interfaces/userInfo.inteface.ts [TS] ===
----------------------------------------
export interface UserInfo {
  id: string;
  userName: string;
  email: string;
  phoneNUmber: string;
  firstName: string;
  lastName: string;
  roleId: string;
  balance: number;
}

----------------------------------------


=== File: src/app/shared/models/chat-with-photo.model.ts [TS] ===
----------------------------------------
export class ChatWithPhotoModel {
  constructor(
    public isUser: boolean,
    public text: string,
    public photo: string,
    public copied: boolean
  ) {}
}

----------------------------------------


=== File: src/app/shared/models/chat.model.ts [TS] ===
----------------------------------------
export class ChatModel {
  constructor(
    public isUser: boolean,
    public text: string,
    public copied: boolean
  ) {}
}

----------------------------------------


=== File: src/app/shared/models/content.model.ts [TS] ===
----------------------------------------
import { KeyValueModel } from './key-value.model';

export class ContentModel {
  constructor(
    public productName: string,
    public languageId: number,
    public productCategoryId: string,
    public attributes: KeyValueModel[]
  ) {}
}

----------------------------------------


=== File: src/app/shared/models/copyright.model.ts [TS] ===
----------------------------------------
export class CopyrightModel {
  constructor(
    public uniqueKey: string,
    public productName: string,
    public languageId: number,
    public file: string
  ) {}
}

----------------------------------------


=== File: src/app/shared/models/email.model.ts [TS] ===
----------------------------------------
export class EmailModel {
  constructor(
    public email: string,
    public languageId: number,
    public form: number
  ) {}
}

----------------------------------------


=== File: src/app/shared/models/image-translate.model.ts [TS] ===
----------------------------------------
export class FileTranslateModel {
  constructor(
    public description: string,
    public languageId: number,
    public sourceLanguageId: number,
    public files: any,
    public isPdf: boolean
  ) {}
}

----------------------------------------


=== File: src/app/shared/models/key-value.model.ts [TS] ===
----------------------------------------
export class KeyValueModel {
  constructor(public key: string, public value: string) {}
}

----------------------------------------


=== File: src/app/shared/models/translate.model.ts [TS] ===
----------------------------------------
export class TranslateModel {
  constructor(
    public description: string,
    public languageId: number,
    public sourceLanguageId: string
  ) {}
}

----------------------------------------


=== File: src/app/shared/models/video-script.model.ts [TS] ===
----------------------------------------
export class VideoScriptModel {
  constructor(
    public uniqueKey: string,
    public productName: string,
    public languageId: number,
    public file: string
  ) {}
}

----------------------------------------


=== File: src/app/shared/services/auth-interceptor.interceptor.ts [TS] ===
----------------------------------------
import { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { AuthService } from './auth.service';
import { BehaviorSubject, catchError, concatMap, filter, finalize, from, Observable, switchMap, take, throwError } from 'rxjs';
import { Router } from '@angular/router';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  private isRefreshing = false;
  private refreshTokenSubject: BehaviorSubject<string | null> = new BehaviorSubject<string | null>(null);
  private cachedRequests: HttpRequest<any>[] = [];

  constructor(
    private _authService: AuthService,
    private _router: Router
  ) {}

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    const token = this._authService.accessToken();
    let authReq = req;

    if(token) {
      authReq = this.addTokenHeader(req, token);
    }

    return next.handle(authReq).pipe(
      catchError((err) => {
        if (err.status === 401 && err instanceof HttpErrorResponse && !req.url.includes('refresh-token')) {
          return this.handle401Error(authReq, next);
        } else {
          return throwError(() => err);
        }
      })
    )
  }

  private addTokenHeader(request: HttpRequest<any>, token: string) {
    return request.clone({headers: request.headers.set('Authorization', 'Bearer ' + token)})
  }

  private handle401Error(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    if(!this.isRefreshing) {
      this.isRefreshing = true;
      this.refreshTokenSubject.next(null);
      this.cachedRequests.push(req);
      return this._authService.refreshAccessToken().pipe(
        switchMap((response: any) => {
          this.isRefreshing = false;
          const newToken = response.token;
          const newRefreshToken = response.refreshToken;
          if(newToken) {
            this._authService.setTokens(newToken, newRefreshToken);
            this.refreshTokenSubject.next(newToken);
            return from(this.cachedRequests).pipe(
              concatMap((request) => next.handle(this.addTokenHeader(request, newToken))),
              finalize(() => {this.cachedRequests = []})
            )
          } else {
            this._authService.logOut();
            this._router.navigate(['/services']);
            return throwError(() => new Error('No token returned.'))
          }
        }),
        catchError((err) => {
          this.isRefreshing = false;
          if(err.status === 401 || err.status === 400) {
            this._authService.logOut();
            this._router.navigate(['/services']);
          }
          return throwError(() => err)
        }),
        finalize(() => {this.isRefreshing = false;})
      )
    } else {
      this.cachedRequests.push(req)
      return this.refreshTokenSubject.pipe(
        filter((token) => token !== null),
        take(1),
        switchMap((token) => {
          return next.handle(this.addTokenHeader(req, token as string));
        })
      )
    }
  }
}

----------------------------------------


=== File: src/app/shared/services/auth.service.ts [SERVICE] ===
----------------------------------------
import { HttpClient } from '@angular/common/http';
import { computed, Injectable, signal } from '@angular/core';
import { JwtDecodeService } from './jwt-decode.service';
import { Observable, of, tap, throwError } from 'rxjs';
import { url } from '../data/api';
import { environment } from '../../../environments/environment';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private host: string;
  public accessToken = signal<string>('');
  public refreshToken = signal<string>('');
  public userInfo = computed(() => this.jwt_decode.decodeToken(this.accessToken()));

  public isAuthenticated = computed(() => this.accessToken()?.length > 0);
  public readonly localStorageAccessTokenName = 'accessToken';
  public readonly localStorageRefreshTokenName = 'refreshToken';

  constructor(
    private http: HttpClient,
    private jwt_decode: JwtDecodeService
  ) {
    this.host = environment.apiUrl;
    const localAccessToken = localStorage.getItem(this.localStorageAccessTokenName);
    if(localAccessToken) {
      this.accessToken.set(localAccessToken);
    }
    const localRefreshToken = localStorage.getItem(this.localStorageRefreshTokenName);
    if(localRefreshToken) {
      this.refreshToken.set(localRefreshToken);
    }
  }

  signIn(email: string, password: string): Observable<any> {
    if(this.isAuthenticated()) return throwError(() => new Error('User Already Authenticated'));

    return this.http.post(`${this.host}${url.login}`, {userName: email, password: password})
        .pipe(
          tap((x: any) => {
            this.setTokens(x.token, x.refreshToken);
          })
        );
  }

  refreshAccessToken(): Observable<any> {
    return this.http.post(`${this.host}${url.refresh}`, {accessToken: this.accessToken(), refreshToken: this.refreshToken()})
        .pipe(
          tap((x: any) => {
            this.setTokens(x.token, x.refreshToken);
          })
        );
  }

  logOut(): Observable<any> {
    localStorage.removeItem(this.localStorageAccessTokenName);
    localStorage.removeItem(this.localStorageRefreshTokenName);
    this.accessToken.set('');
    this.refreshToken.set('');
    return of(true);
  }

  setTokens(accessToken: string, refreshToken: string) {
    localStorage.setItem(this.localStorageAccessTokenName, accessToken);
    localStorage.setItem(this.localStorageRefreshTokenName, refreshToken);
    this.accessToken.set(accessToken);
    this.refreshToken.set(refreshToken);
  }
}

----------------------------------------


=== File: src/app/shared/services/balance.service.ts [SERVICE] ===
----------------------------------------
import { EventEmitter, Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class BalanceService {

  private balance = new BehaviorSubject<number | undefined>(undefined);

  setBalance(name: any) {
    this.balance.next(name);
  }

  getBalance(): Observable<number | undefined> {
    return this.balance.asObservable();
  }
}

----------------------------------------


=== File: src/app/shared/services/component/sidebar.service.ts [SERVICE] ===
----------------------------------------
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';

@Injectable({
  providedIn: 'root'
})
export class SidebarService {
  private sidebarShownSubject = new BehaviorSubject<boolean>(true);
  sidebarShown$ = this.sidebarShownSubject.asObservable();

  toggleSidebar() {
    this.sidebarShownSubject.next(!this.sidebarShownSubject.value);
  }

  setSidebarShown(shown: boolean) {
    this.sidebarShownSubject.next(shown);
  }
}

----------------------------------------


=== File: src/app/shared/services/free-service.service.ts [SERVICE] ===
----------------------------------------
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class FreeServiceService {
  private fakeToken = new BehaviorSubject<string | undefined>(undefined);

  setToken(name: any) {
    this.fakeToken.next(name);
  }

  getToken(): Observable<string | undefined> {
    return this.fakeToken.asObservable();
  }
}

----------------------------------------


=== File: src/app/shared/services/http.service.ts [SERVICE] ===
----------------------------------------
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { environment } from '../../../environments/environment';
import { catchError, Observable, of, Subject, tap, throwError } from 'rxjs';
import { FreeServiceService } from './free-service.service';
import { url } from '../data/api';
import { JwtDecodeService } from './jwt-decode.service';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root',
})
export class HttpService {
  private host: string;
  private requestCount = 0;
  private maxFreeRequests = 1;

  public fakeToken: any;

  public $refreshToken = new Subject<boolean>();
  public refreshInProgress = false;

  constructor(
    private _http: HttpClient,
    private freeService: FreeServiceService,
  ) {
    this.host = environment.apiUrl;
  }

  loginWithFacebook(apiurl: any, data: any) {
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
    });
    return this._http.post(`${this.host}${apiurl}`, data, { headers, withCredentials: true })
  }

  get(apiUrl: string, user_id: string) {
    return this._http.get(`${this.host}${apiUrl}/${user_id}`, {
      responseType: 'text',
    });
  }

  updateUserInfo(apiUrl: string, data: any) {
    return this._http.put(`${this.host}${apiUrl}`, data);
  }

  postAuth(apiUrl: string, data: any) {
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
    });
    return this._http.post(`${this.host}${apiUrl}`, JSON.stringify(data), {
      headers,
    });
  }

  deleteAcc(apiurl: string, data: any) {
    return this._http.delete(`${this.host}${apiurl}`, {
      params: data,
    });
  }

  patchChangePassword(apiUrl: string, data: any) {
    return this._http.patch(`${this.host}${apiUrl}`, JSON.stringify(data));
  }

  postTranslate(apiUrl: string, data: any) {
    this.requestCount++;
    sessionStorage.setItem('requestCount', this.requestCount.toString());
    return this._http.post(`${this.host}${apiUrl}`, data);
  }

  postFreeTranslate(apiUrl: string, data: any) {
    this.freeService.getToken().subscribe((value) => (this.fakeToken = value));
    const headers = new HttpHeaders({
      Authorization: `Bearer ${this.fakeToken}`,
    });
    this.requestCount++;
    sessionStorage.setItem('requestCount', this.requestCount.toString());
    return this._http.post(`${this.host}${apiUrl}`, data, { headers });
  }

  postFreeContent(apiUrl: string, data: any) {
    this.freeService.getToken().subscribe((value) => (this.fakeToken = value));
    const headers = new HttpHeaders({
      Authorization: `Bearer ${this.fakeToken}`,
      'Content-Type': 'application/json',
    });
    this.requestCount++;
    sessionStorage.setItem('requestCount', this.requestCount.toString());
    return this._http.post(`${this.host}${apiUrl}`, data, {
      headers,
    });
  }

  postContent(apiUrl: string, data: any) {
    this.requestCount++;
    sessionStorage.setItem('requestCount', this.requestCount.toString());
    return this._http.post(`${this.host}${apiUrl}`, data);
  }

  postFreeWriter(apiUrl: string, data: any) {
    this.freeService.getToken().subscribe((value) => (this.fakeToken = value));

    const headers = new HttpHeaders({
      Authorization: `Bearer ${this.fakeToken}`,
    });
    this.requestCount++;
    sessionStorage.setItem('requestCount', this.requestCount.toString());
    return this._http.post(`${this.host}${apiUrl}`, data, { headers });
  }

  postWriter(apiUrl: string, data: any) {
    this.requestCount++;
    sessionStorage.setItem('requestCount', this.requestCount.toString());
    return this._http.post(`${this.host}${apiUrl}`, data);
  }

  postEmail(apiUrl: string, data: any) {
    this.requestCount++;
    sessionStorage.setItem('requestCount', this.requestCount.toString());
    return this._http.post(`${this.host}${apiUrl}`, JSON.stringify(data));
  }

  postFreeEmail(apiUrl: string, data: any) {
    this.freeService.getToken().subscribe((value) => (this.fakeToken = value));
    const headers = new HttpHeaders({
      Authorization: `Bearer ${this.fakeToken}`,
      'Content-Type': 'application/json',
    });
    this.requestCount++;
    sessionStorage.setItem('requestCount', this.requestCount.toString());
    return this._http.post(`${this.host}${apiUrl}`, JSON.stringify(data), {
      headers,
    });
  }

  postLawyer(apiUrl: string, data: any) {
    this.requestCount++;
    sessionStorage.setItem('requestCount', this.requestCount.toString());
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
    });
    return this._http.post(`${this.host}${apiUrl}`, JSON.stringify(data), {
      headers,
    });
  }

  enhanceTranslation(apiUrl: string, data: any) {
    return this._http.post(`${this.host}${apiUrl}`, data);
  }

  hasExceededFreeRequests(): boolean {
    const requested = Number(sessionStorage.getItem('requestCount'));
    return requested >= this.maxFreeRequests;
  }
}

----------------------------------------


=== File: src/app/shared/services/jwt-decode.service.ts [SERVICE] ===
----------------------------------------
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class JwtDecodeService {
  constructor() { }

  public decodeToken(token: string) {
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const jsonPayload = decodeURIComponent(
      atob(base64).split('').map((c) => {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
      }).join('')
    )
    return JSON.parse(jsonPayload);
  }
}

----------------------------------------


=== File: src/app/shared/services/language-selection.service.ts [SERVICE] ===
----------------------------------------
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class LanguageSelectionService {
  // Service-specific keys
  private readonly TEXT_SOURCE_LANGUAGE_KEY = 'textSelectedSourceLanguage';
  private readonly TEXT_TARGET_LANGUAGE_KEY = 'textSelectedTargetLanguage';
  
  private readonly DOC_SOURCE_LANGUAGE_KEY = 'docSelectedSourceLanguage';
  private readonly DOC_TARGET_LANGUAGE_KEY = 'docSelectedTargetLanguage';
  
  private readonly IMAGE_SOURCE_LANGUAGE_KEY = 'imageSelectedSourceLanguage';
  private readonly IMAGE_TARGET_LANGUAGE_KEY = 'imageSelectedTargetLanguage';
  
  // Service-specific subjects
  private textSourceLanguageSubject = new BehaviorSubject<string>('');
  private textTargetLanguageSubject = new BehaviorSubject<string>('');
  
  private docSourceLanguageSubject = new BehaviorSubject<string>('');
  private docTargetLanguageSubject = new BehaviorSubject<string>('');
  
  private imageSourceLanguageSubject = new BehaviorSubject<string>('');
  private imageTargetLanguageSubject = new BehaviorSubject<string>('');

  constructor() {
    // Initialize from session storage if available
    this.loadSavedLanguages();
  }

  private loadSavedLanguages() {
    // Text service
    const savedTextSourceLang = sessionStorage.getItem(this.TEXT_SOURCE_LANGUAGE_KEY);
    const savedTextTargetLang = sessionStorage.getItem(this.TEXT_TARGET_LANGUAGE_KEY);
    
    if (savedTextSourceLang) {
      this.textSourceLanguageSubject.next(savedTextSourceLang);
    }
    if (savedTextTargetLang) {
      this.textTargetLanguageSubject.next(savedTextTargetLang);
    }
    
    // Doc service
    const savedDocSourceLang = sessionStorage.getItem(this.DOC_SOURCE_LANGUAGE_KEY);
    const savedDocTargetLang = sessionStorage.getItem(this.DOC_TARGET_LANGUAGE_KEY);
    
    if (savedDocSourceLang) {
      this.docSourceLanguageSubject.next(savedDocSourceLang);
    }
    if (savedDocTargetLang) {
      this.docTargetLanguageSubject.next(savedDocTargetLang);
    }
    
    // Image service
    const savedImageSourceLang = sessionStorage.getItem(this.IMAGE_SOURCE_LANGUAGE_KEY);
    const savedImageTargetLang = sessionStorage.getItem(this.IMAGE_TARGET_LANGUAGE_KEY);
    
    if (savedImageSourceLang) {
      this.imageSourceLanguageSubject.next(savedImageSourceLang);
    }
    if (savedImageTargetLang) {
      this.imageTargetLanguageSubject.next(savedImageTargetLang);
    }
  }

  // Text service methods
  setTextSourceLanguage(languageId: string) {
    sessionStorage.setItem(this.TEXT_SOURCE_LANGUAGE_KEY, languageId);
    this.textSourceLanguageSubject.next(languageId);
  }

  setTextTargetLanguage(languageId: string) {
    sessionStorage.setItem(this.TEXT_TARGET_LANGUAGE_KEY, languageId);
    this.textTargetLanguageSubject.next(languageId);
  }

  getTextSourceLanguage() {
    return this.textSourceLanguageSubject.asObservable();
  }

  getTextTargetLanguage() {
    return this.textTargetLanguageSubject.asObservable();
  }

  // Doc service methods
  setDocSourceLanguage(languageId: string) {
    sessionStorage.setItem(this.DOC_SOURCE_LANGUAGE_KEY, languageId);
    this.docSourceLanguageSubject.next(languageId);
  }

  setDocTargetLanguage(languageId: string) {
    sessionStorage.setItem(this.DOC_TARGET_LANGUAGE_KEY, languageId);
    this.docTargetLanguageSubject.next(languageId);
  }

  getDocSourceLanguage() {
    return this.docSourceLanguageSubject.asObservable();
  }

  getDocTargetLanguage() {
    return this.docTargetLanguageSubject.asObservable();
  }

  // Image service methods
  setImageSourceLanguage(languageId: string) {
    sessionStorage.setItem(this.IMAGE_SOURCE_LANGUAGE_KEY, languageId);
    this.imageSourceLanguageSubject.next(languageId);
  }

  setImageTargetLanguage(languageId: string) {
    sessionStorage.setItem(this.IMAGE_TARGET_LANGUAGE_KEY, languageId);
    this.imageTargetLanguageSubject.next(languageId);
  }

  getImageSourceLanguage() {
    return this.imageSourceLanguageSubject.asObservable();
  }

  getImageTargetLanguage() {
    return this.imageTargetLanguageSubject.asObservable();
  }

  clearLanguages() {
    // Clear text service languages
    sessionStorage.removeItem(this.TEXT_SOURCE_LANGUAGE_KEY);
    sessionStorage.removeItem(this.TEXT_TARGET_LANGUAGE_KEY);
    this.textSourceLanguageSubject.next('');
    this.textTargetLanguageSubject.next('');
    
    // Clear doc service languages
    sessionStorage.removeItem(this.DOC_SOURCE_LANGUAGE_KEY);
    sessionStorage.removeItem(this.DOC_TARGET_LANGUAGE_KEY);
    this.docSourceLanguageSubject.next('');
    this.docTargetLanguageSubject.next('');
    
    // Clear image service languages
    sessionStorage.removeItem(this.IMAGE_SOURCE_LANGUAGE_KEY);
    sessionStorage.removeItem(this.IMAGE_TARGET_LANGUAGE_KEY);
    this.imageSourceLanguageSubject.next('');
    this.imageTargetLanguageSubject.next('');
  }
} 
----------------------------------------


=== File: src/app/shared/services/product-category.service.ts [SERVICE] ===
----------------------------------------
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { environment } from '../../../environments/environment';
import { Observable } from 'rxjs';
import { Category } from '../interfaces/category.interface';
import { FreeServiceService } from './free-service.service';
import { Language } from '../interfaces/language.interface';
import { RequestHistory } from '../interfaces/request-history.interface';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root',
})
export class ProductCategoryService {
  private host: string;
  fakeToken: any;

  constructor(
    private http: HttpClient,
    private freeService: FreeServiceService,
  ) {
    this.host = environment.apiUrl;
  }

  getProductCategory(apiUrl: string): Observable<Category[]> {
    return this.http.get<Category[]>(`${this.host}${apiUrl}`);
  }

  getFreeProductCategory(apiUrl: string): Observable<Category[]> {
    this.freeService.getToken().subscribe((value) => (this.fakeToken = value));
    const headers = new HttpHeaders({
      Authorization: `Bearer ${this.fakeToken}`,
    });
    return this.http.get<Category[]>(`${this.host}${apiUrl}`, {headers});
  }

  getLanguage(apiUrl: string): Observable<Language[]> {
    return this.http.get<Language[]>(`${this.host}${apiUrl}`);
  }

  getFreeLanguage(apiUrl: string): Observable<Language[]> {
    this.freeService.getToken().subscribe((value) => (this.fakeToken = value));
    const headers = new HttpHeaders({
      Authorization: `Bearer ${this.fakeToken}`,
    });
    return this.http.get<Language[]>(`${this.host}${apiUrl}`, {headers});
  }

  getHistory(apiUrl: string, userId: string): Observable<RequestHistory[]> {
    return this.http.get<RequestHistory[]>(`${this.host}${apiUrl}${userId}`);
  }
}

----------------------------------------


=== File: src/app/shared/services/text-to-word.service.ts [SERVICE] ===
----------------------------------------
import { Injectable } from '@angular/core';
import { Document, Packer, Paragraph, TextRun } from 'docx';
import { saveAs } from 'file-saver';

@Injectable({
  providedIn: 'root',
})
export class TextToWordService {
  constructor() {}

  public createDocument(text: string): void {
    const doc = new Document({
      sections: [
        {
          properties: {},
          children: [
            new Paragraph({
              children: [new TextRun(text)],
            }),
          ],
        },
      ],
    });

    Packer.toBlob(doc).then((blob) => {
      saveAs(blob, 'document.docx');
    });
  }
}

----------------------------------------


=== File: src/app/shared/services/translate-active.service.ts [SERVICE] ===
----------------------------------------
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { TextComponent } from '../../dashboard/modules/translate-options/text/text.component';

@Injectable({
  providedIn: 'root'
})
export class TranslateActiveService {
  private activeComponentSource = new BehaviorSubject<any>(TextComponent);
  activeComponent$ = this.activeComponentSource.asObservable();

  setActiveComponent(component: any) {
    this.activeComponentSource.next(component);
  }
}

----------------------------------------


=== File: src/app/transloco-loader.ts [TS] ===
----------------------------------------
import { inject, Injectable } from '@angular/core';
import { Translation, TranslocoLoader } from '@ngneat/transloco';
import { HttpClient } from '@angular/common/http';
import { environment } from '../environments/environment';

@Injectable({ providedIn: 'root' })
export class TranslocoHttpLoader implements TranslocoLoader {
  private http = inject(HttpClient);

  getTranslation(lang: string) {
    return this.http.get<Translation>(
      `${environment.baseUrl}/assets/i18n/${lang}.json`
    );
  }
}

----------------------------------------


=== File: src/app/transloco-root.module.ts [MODULE] ===
----------------------------------------
import {
  provideTransloco,
  TranslocoModule
} from '@ngneat/transloco';
import { NgModule } from '@angular/core';
import { TranslocoHttpLoader } from './transloco-loader';
import { environment } from '../environments/environment.development';

@NgModule({
  exports: [ TranslocoModule ],
  providers: [
      provideTransloco({
        config: {
          availableLangs: ['en', 'ge'],
          defaultLang: 'ge',
          reRenderOnLangChange: true,
          prodMode: environment.production,
        },
        loader: TranslocoHttpLoader
      }),
  ],
})
export class TranslocoRootModule {}

----------------------------------------


=== File: src/assets/i18n/en.json [CONFIG] ===
----------------------------------------
{
  "auth-require": "Please log in or create your account before receiving the translation",
  "back": "Back",
  "header": {
    "user": "User",
    "admin": "Admin",
    "signin": "Sign in",
    "language": "Language"
  },
  "sidebar": {
    "translate": "Translate",
    "description": "Description",
    "copyright": "Copywriter",
    "script": "Scriptwriter",
    "mail": "Mailman",
    "chats": {
      "finance": "Economist",
      "lawyer": "Lawyer"
    },
    "balance": "Balance",
    "history": "History",
    "profile": "Profile",
    "logout": "Log out"
  },
  "sign-in": {
    "h3": "Login to Account",
    "p": "Please enter your email and password to continue",
    "email": "Email",
    "password": "Password",
    "sign-in-btn": "Sign in",
    "account": "Don’t have an account?",
    "create-account": "Create Account"
  },
  "sign-up": {
    "h3": "Create an Account",
    "p": "Please enter your information",
    "name": "First Name",
    "surname": "Last Name",
    "email": "Email",
    "phone": "Phone",
    "password": "Password",
    "sign-up-btn": "Sign up",
    "account": "Already have an account?",
    "login": "Login"
  },
  "send": "Send",
  "productname": "Product Name",
  "search": "Search",
  "test-title1": "The site is working in test mode",
  "test-title2": "Test mode",
  "attach-file": "Attach File",
  "tr-text-btn": "Text Translate",
  "translate": {
    "price": "1 Page - 10 Tetri",
    "title": "Translate",
    "description": "Translate any complexity text from photo/document in 1 minute",
    "text": "Text",
    "text-title": "Text - Translate every 45 words and/or 250 characters for 10 tetri",
    "photo": "Photo",
    "document": "Document",
    "language-detection": "Language detection",
    "language-main": "Original language",
    "language-options": "Target language",
    "text-to-be-translated": "Text to be translated",
    "translation": "Translation",
    "translate": "Translate",
    "format-img": "Supported image types: .JPEG, .PNG, .GIF, .WEBP",
    "format-doc": "Supported file type: .PDF",
    "empty-file": "No file chosen",
    "empty-photo": "No image chosen",
    "upload-img": "Upload a photo(s)!",
    "upload-file": "Upload a file(s)!",
    "enhance": "Enhance",
    "enhanced-translation": "Enhanced Translation",
    "standard-translation": "Standard Translation",
    "enhanced": "Enhanced",
    "original": "Original",
    "copy-to-clipboard": "Copy to clipboard",
    "enhance-description": "AI will refine this translation to make it sound more natural and context-aware"
  },
  "mailman": {
    "title": "Mailman",
    "p": "Drop us the email you received and Suliko will help you with the response",
    "f1": "Formal",
    "f2": "Friendly",
    "f3": "Neutral",
    "language-options": "Target language",
    "email": "Received email",
    "reply": "Our advice",
    "receiver": "Generate"
  },
  "screenwriter": {
    "title": "Screenwriter",
    "des1": "Upload a photo, write the product name, and generate a video description.",
    "des2": "The photo must be in one of the following formats: JPEG, PNG, GIF, WEBP!",
    "device": "Laptop"
  },
  "advertiser": {
    "title": "Advertiser",
    "des1": "Upload a photo, write the product name, and generate its full description.",
    "des2": "The photo must be in one of the following formats: JPEG, PNG, GIF, WEBP!",
    "device": "Laptop"
  },
  "description": {
    "title": "Description guru",
    "des": "Generate any product description by specifying only the title and category",
    "device": "Laptop",
    "category": "Category"
  },
  "lawyer": {
    "title": "Lawyer",
    "des": "The system may make errors",
    "prod-name": "Write a question"
  },
  "profile": {
    "name": "Full name",
    "email": "Email",
    "phone": "Phone number",
    "balance": "Balance",
    "btn1": "Add balance",
    "btn2": "Change password",
    "c-pass": "Current Password",
    "n-pass": "New Password",
    "ch-label": "Password length must be at least 3",
    "btn3": "Update",
    "acc-del": "Account deactivation",
    "acc-del-popup1": "Are you sure that you want to",
    "acc-del-popup2": "deactivate ",
    "acc-del-popup3": "your account?",
    "acc-del-btn": "Deactivate",
    "close-btn": "Cancel"
  },
  "history": {
    "title": "Your history",
    "check": "Check",
    "send": "Request text:",
    "rec": "Response text:",
    "empty": "Your history is empty"
  },
  "balance-sub": {
    "buy": "Buy",
    "sub1": "Standard",
    "sub1-p": "Subscription",
    "sub2": "Premium",
    "sub2-p": "₾30 Subscription",
    "sub3": "Write your price",
    "sub3-p": "Individual subscription"
  },
  "error": {
    "err1": "Looks like you’ve got lost...",
    "err2": "Back to Dashboard"
  },
  "error-toastr": {
    "translate-text": "Write the text to be translated!",
    "email-text": "Write a received mail!",
    "balance": "Due to insufficient balance, you can no longer use the services. Please top up!",
    "registration": "Registration is required!",
    "valid-word": "Please write a valid word!"
  },
  "languages": {
    "en": "English",
    "ge": "Georgian"
  },
  "home": {
    "navbar": {
      "blog": "Blog",
      "dashboard": "Dashboard",
      "sign-in": "Sign in"
    },
    "start": {
      "h1": "Unlock the Power of Language with Suliko AI",
      "p": "Welcome to Suliko AI, where we provide high-quality language services to help you communicate effectively.",
      "d-m": "Discover More"
    },
    "services": {
      "h1": "Our Services",
      "p": "It provides several services aimed at enhancing efficiency, such as text and document translation, automated email response generation, creation of advertisement and video scripts, and generation of product descriptions.",
      "s1": {
        "p": "Quickly translate text, images, and documents in just seconds.",
        "b1-title": "Text: ",
        "b1": "Translate written content quickly and accurately across multiple languages.",
        "b2-title": "Image: ",
        "b2": "Extract and translate text from images using advanced OCR technology.",
        "b3-title": "Document: ",
        "b3": "Convert and translate entire documents, including PDFs, while preserving formatting."
      },
      "s2": {
        "p": "Automates the creation of product descriptions.",
        "b1-title": "Product Descriptions: ",
        "b1": "Automatically generate detailed and engaging descriptions for products."
      },
      "s3": {
        "p": "Creates effective ad text that grabs attention and helps promote products.",
        "b1-title": "Video Scripts: ",
        "b1": "Create compelling scripts for videos, customized to fit different formats and themes.",
        "b2-title": "Advertisements: ",
        "b2": "Develop persuasive and relevant ad copy for various marketing channels and product promotions."
      },
      "try": "Try"
    },
    "l-m": "Learn More",
    "about-us": "About Us",
    "about-text-1": "SULIKO is a productivity tool designed to assist office workers with various tasks, helping streamline and simplify their daily workflows. It provides several services aimed at enhancing efficiency, such as text and document translation, automated email response generation, creation of advertisement and video scripts, and generation of product descriptions.",
    "about-text-2": "The platform is designed to cater to a range of professional needs, allowing users to quickly accomplish tasks that would otherwise be time-consuming.",
    "our-blogs": "Our Blogs",
    "our-blogs-p": "Stay tuned! Our latest blogs will be available soon.",
    "count": {
      "s": "Services",
      "p": "Partners",
      "au": "Active Users"
    },
    "footer": {
      "title": "Please review our social media page.",
      "contact": {
        "title": "Contact Us",
        "p": "Contact us for detailed information",
        "address": "Chubinashvili 50, Tbilisi, Georgia"
      },
      "copyright": "Copyright 2024 Suliko AI. All rights reserved."
    },
    "balance-sub": {
      "buy": "Buy",
      "sub1": "Standard",
      "sub1-p": "Subscription",
      "sub2": "Premium",
      "sub2-p": "₾30 Subscription",
      "sub3": "Write your price",
      "sub3-p": "Individual subscription",
      "purchase-title": "Purchase Information",
      "package": "Package",
      "amount": "Amount",
      "bank-info": "Bank Information",
      "bank-name": "Bank Name",
      "account-number": "Account Number",
      "recipient": "Recipient",
      "contact-info": "For any questions or to confirm your payment, please contact us at:",
      "email": "Email",
      "phone": "Phone",
      "close": "Close"
    }
  }
}
----------------------------------------


=== File: src/assets/i18n/ge.json [CONFIG] ===
----------------------------------------
{
  "auth-require": "თარგმნის მიღებამდე გაიარეთ ავტორიზაცია ან შექმენით თქვენი ექაუნთი",
  "back": "უკან",
  "header": {
    "user": "მომხმარებელი",
    "admin": "ადმინი",
    "signin": "შესვლა",
    "language": "ენა"
  },
  "sidebar": {
    "translate": "თარჯიმანი",
    "description": "აღწერების გურუ",
    "copyright": "ედვერთაიზერი",
    "script": "სცენარისტი",
    "mail": "მეილი",
    "chats": {
      "finance": "ფინანსისტი",
      "lawyer": "იურისტი"
    },
    "balance": "ბალანსი",
    "history": "ისტორია",
    "profile": "პროფილი",
    "logout": "გამოსვლა"
  },
  "sign-in": {
    "h3": "ავტორიზაცია",
    "p": "გთხოვთ შეიყვანეთ თქვენი იმეილი და პაროლი",
    "email": "იმეილი",
    "password": "პაროლი",
    "sign-in-btn": "შესვლა",
    "account": "არ გაქვთ ექაუნთი?",
    "create-account": "შექმნა"
  },
  "sign-up": {
    "h3": "შექმენით ექაუნთი",
    "p": "გთხოვთ შეიყვანეთ თქვენი მონაცემები",
    "name": "სახელი",
    "surname": "გვარი",
    "email": "მეილი",
    "phone": "ტელეფონი",
    "password": "პაროლი",
    "sign-up-btn": "რეგისტრაცია",
    "account": "უკვე გაქვთ ექაუნთი?",
    "login": "შესვლა"
  },
  "send": "გაგზავნა",
  "productname": "პროდუქტის სახელი",
  "search": "ძიება",
  "test-title1": "საიტი მუშაობს სატესტო რეჟიმში",
  "test-title2": "სატესტო",
  "attach-file": "მიაბით ფაილი",
  "tr-text-btn": "ტექსტის თარგმნა",
  "translate": {
    "price": "1 გვერდი - 10 თეთრი",
    "title": "თარგმნა",
    "description": "გადათარგმნე ფოტოდან/დოკუმენტიდან ნებისმიერი სირთულის ტექსტი 1 წუთში",
    "text": "ტექსტი",
    "text-title": "ტექსტი - გადათარგმნე ყოველი 45 სიტყვა და/ან 250 სიმბოლო 10 თეთრად",
    "photo": "ფოტო",
    "document": "დოკუმენტი",
    "language-detection": "ენის ამოცნობა",
    "language-main": "დედანის ენა",
    "language-options": "სამიზნე ენა",
    "text-to-be-translated": "სათარგმნი ტექსტი",
    "translation": "თარგმანი",
    "translate": "თარგმნა",
    "format-img": "ფოტოს დასაშვები ფორმატები: .JPEG, .PNG, .GIF, .WEBP",
    "format-doc": "ფაილის დასაშვები ფორმატი: .PDF",
    "empty-file": "არ არის არჩეული ფაილი",
    "empty-photo": "არ არის არჩეული ფოტო",
    "upload-img": "ატვირთეთ ფოტო/ფოტოები!",
    "upload-file": "ატვირთეთ ფაილი/ფაილები!",
    "enhance": "გაუმჯობესება",
    "enhanced-translation": "გაუმჯობესებული თარგმანი",
    "standard-translation": "სტანდარტული თარგმანი",
    "enhanced": "გაუმჯობესებული",
    "original": "ორიგინალი",
    "copy-to-clipboard": "დაკოპირება",
    "enhance-description": "AI გააუმჯობესებს ამ თარგმანს, რათა ის უფრო ბუნებრივად და კონტექსტის შესაბამისად ჟღერდეს"
  },
  "mailman": {
    "title": "ფოსტალიონი",
    "p": "ჩაგვიგდე მიღებული მეილი და სულიკო პასუხის გაცემაში დაგეხმარება",
    "f1": "ფორმალური",
    "f2": "მეგობრული",
    "f3": "ნეიტრალური",
    "language-options": "სამიზნე ენა",
    "email": "მიღებული მეილი",
    "reply": "ჩვენი რჩევა",
    "receiver": "პასუხის მიღება"
  },
  "screenwriter": {
    "title": "სცენარისტი",
    "des1": "ატვირთე ფოტო, დაწერე პროდუქტის სახელი და დააგენერირე მისი ვიდეო აღწერა.",
    "des2": "ფოტო უნდა იყოს შემდეგი ფორმატებიდან: JPEG, PNG, GIF, WEBP!",
    "device": "ლეპტოპი"
  },
  "advertiser": {
    "title": "ედვერთაიზერი",
    "des1": "ატვირთე ფოტო, დაწერე პროდუქტის სახელი და დააგენერირე მისი სრული აღწერა.",
    "des2": "ფოტო უნდა იყოს შემდეგი ფორმატებიდან: JPEG, PNG, GIF, WEBP!",
    "device": "ლეპტოპი"
  },
  "description": {
    "title": "აღწერების გურუ",
    "des": "დააგენერირე ნებისმიერი პროდუქტის აღწერა მხოლოდ სათაურისა და კატეგორიის მითითებით",
    "device": "ლეპტოპი",
    "category": "კატეგორია"
  },
  "lawyer": {
    "title": "იურისტი",
    "des": "სისტემამ შეიძლება დაუშვას შეცდომები",
    "prod-name": "დაწერეთ შეკითხვა"
  },
  "profile": {
    "name": "სახელი და გვარი",
    "email": "იმეილი",
    "phone": "მობილურის ნომერი",
    "balance": "ბალანსი",
    "btn1": "ბალანსის შევსება",
    "btn2": "პაროლის შეცვლა",
    "c-pass": "ახლანდელი პაროლი",
    "n-pass": "ახალი პაროლი",
    "ch-label": "პაროლის სიგრძე მინიმუმ უნდა იყოს 3",
    "btn3": "განახლება",
    "acc-del": "ანგარიშის დეაქტივაცია",
    "acc-del-popup1": "დარწმუნებული ხართ რომ გინდათ ",
    "acc-del-popup2": "ანგარიშის გაუქმება",
    "acc-del-popup3": "?",
    "acc-del-btn": "წაშლა",
    "close-btn": "გაუქმება"
  },
  "history": {
    "title": "თქვენი ისტორია",
    "check": "ნახვა",
    "send": "გაგზავნილი მოთხოვნა:",
    "rec": "მიღებული ტექსტი:",
    "empty": "შენი ისტორია ცარიალია."
  },
  "balance-sub": {
    "buy": "ყიდვა",
    "sub1": "სტანდარტული",
    "sub1-p": "პაკეტი",
    "sub2": "პრემიუმი",
    "sub2-p": "30 ლარიანი პაკეტი",
    "sub3": "ჩაწერეთ თანხა",
    "sub3-p": "ინდივიდუალური პაკეტი"
  },
  "error": {
    "err1": "როგორც ჩანს დაიკარგე...",
    "err2": "დაბრუნება მთავარ გვერდზე"
  },
  "error-toastr": {
    "translate-text": "ჩაწერეთ სათარგმნი ტექსტი!",
    "email-text": "ჩაწერეთ მიღებული მეილი!",
    "balance": "არასაკმარისი ბალანსის გამო ვეღარ ისარგებლებთ სერვისებით, შეავსეთ!",
    "registration": "აუცილებელია რეგისტრაცია!",
    "valid-word": "გთხოვთ, ჩაწერეთ ვალიდური სიტყვა!"
  },
  "languages": {
    "en": "ინგლისური",
    "ge": "ქართული"
  },
  "home": {
    "navbar": {
      "blog": "ბლოგი",
      "dashboard": "მთავარი",
      "sign-in": "შესვლა"
    },
    "start": {
      "h1": "აღმოაჩინე ენის ძალა სულიკო AI-სთან ერთად",
      "p": "კეთილი იყოს თქვენი მობრძანება Suliko AI-ში, სადაც ჩვენ გთავაზობთ მაღალი ხარისხის ენის სერვისებს, რათა დაგეხმაროთ ეფექტურ კომუნიკაციაში.",
      "d-m": "გაიგე მეტი"
    },
    "services": {
      "h1": "ჩვენი სერვისები",
      "p": "ის უზრუნველყოფს რამდენიმე სერვისს, რომლებიც მიზნად ისახავს ეფექტურობის გაზრდას, როგორიცაა ტექსტისა და დოკუმენტების თარგმნა, ავტომატიზირებული ელ-ფოსტის პასუხების გენერირება, სარეკლამო და ვიდეო სცენარების შექმნა და პროდუქტების აღწერილობების გენერირება.",
      "s1": {
        "p": "თარგმნეთ ტექსტი, სურათები და დოკუმენტები რამდენიმე წამში.",
        "b1-title": "ტექსტი: ",
        "b1": "სწრაფად და ზუსტად თარგმნეთ წერილობითი შინაარსი მრავალ ენაზე.",
        "b2-title": "ფოტო: ",
        "b2": "შეგიძლიათ სურათებიდან ტექსტის ამოსაღება და თარგმნა.",
        "b3-title": "დოკუმენტი: ",
        "b3": "ფორმატირების შენარჩუნებით შეგიძლიათ თარგმნოთ დოკუმენტი ან დოკუმენტები."
      },
      "s2": {
        "p": "ავტომატიზებს პროდუქტის აღწერილობების შექმნას.",
        "b1-title": "პროდუქტის აღწერა: ",
        "b1": "ავტომატურად შექმენით დეტალური და მიმზიდველი აღწერილობები პროდუქტებისთვის."
      },
      "s3": {
        "p": "ქმნის ეფექტურ სარეკლამო ტექსტს, რომელიც ხელს უწყობს პროდუქტების პოპულარიზაციას.",
        "b1-title": "ვიდეო სცენარები: ",
        "b1": "შექმენით დამაჯერებელი სცენარები ვიდეოებისთვის, მორგებული სხვადასხვა ფორმატებსა და თემებზე.",
        "b2-title": "რეკლამები: ",
        "b2": "შეიმუშავეთ სარეკლამო ტექსტები სხვადასხვა პროდუქტისთვის."
      },
      "try": "სცადე"
    },
    "l-m": "გაიგე მეტი",
    "about-us": "ჩვენ შესახებ",
    "about-text-1": "SULIKO არის პროდუქტიულობის ინსტრუმენტი, რომელიც შექმნილია ოფისის თანამშრომლების დასახმარებლად სხვადასხვა დავალებაში, რაც ხელს უწყობს მათი ყოველდღიური სამუშაო პროცესების გამარტივებასა და ოპტიმიზაციას. ის უზრუნველყოფს რამდენიმე სერვისს, რომლებიც მიზნად ისახავს ეფექტურობის გაზრდას, როგორიცაა ტექსტისა და დოკუმენტების თარგმნა, ელექტრონული ფოსტის ავტომატური პასუხის გენერირება, სარეკლამო და ვიდეო სცენარების შექმნა და პროდუქტის აღწერილობების გენერირება.",
    "about-text-2": "პლატფორმა შექმნილია პროფესიული საჭიროებების ფართო სპექტრის დასაკმაყოფილებლად, რაც მომხმარებლებს საშუალებას აძლევს სწრაფად შეასრულონ ისეთი დავალებები, რომლებიც სხვა შემთხვევაში დროის მომცმელი იქნებოდა.",
    "our-blogs": "ჩვენი ბლოგები",
    "our-blogs-p": "ყურადღებით იყავით! ჩვენი უახლესი ბლოგები მალე იქნება ხელმისაწვდომი.",
    "count": {
      "s": "სერვისები",
      "p": "პარტნიორები",
      "au": "აქტიური მომხმარებლები"
    },
    "footer": {
      "title": "გთხოვთ, გადახედოთ ჩვენს სოციალური მედიის გვერდს.",
      "contact": {
        "title": "კონტაქტი",
        "p": "დაგვიკავშირდით დეტალური ინფორმაციისთვის",
        "address": "ჩუბინაშვილის ქ. 50, თბილისი, საქართველო"
      },
      "copyright": "Copyright 2024 Suliko AI. ყველა უფლება დაცულია."
    },
    "balance-sub": {
      "buy": "ყიდვა",
      "sub1": "სტანდარტული",
      "sub1-p": "პაკეტი",
      "sub2": "პრემიუმი",
      "sub2-p": "30 ლარიანი პაკეტი",
      "sub3": "ჩაწერეთ თანხა",
      "sub3-p": "ინდივიდუალური პაკეტი",
      "purchase-title": "გადახდის ინფორმაცია",
      "package": "პაკეტი",
      "amount": "თანხა",
      "bank-info": "საბანკო რეკვიზიტები",
      "bank-name": "ბანკის დასახელება",
      "account-number": "ანგარიშის ნომერი",
      "recipient": "მიმღები",
      "contact-info": "თუ გაქვთ შეკითხვები ან გადახდის დასადასტურებლად, დაგვიკავშირდით:",
      "email": "ელ-ფოსტა",
      "phone": "ტელეფონი",
      "close": "დახურვა"
    }
  }
}
----------------------------------------


=== File: src/environments/environment.development.ts [TS] ===
----------------------------------------
export const environment = {
  baseUrl: 'http://localhost:4200',
  production: true,
  apiUrl: 'https://content.api24.ge',
};

----------------------------------------


=== File: src/environments/environment.ts [TS] ===
----------------------------------------
export const environment = {
  baseUrl: '',
  production: false,
  apiUrl: 'https://content.api24.ge',
};

----------------------------------------


=== File: src/index.html [HTML] ===
----------------------------------------
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>შენი პირადი ასისტენტი</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="verify-paysera" content="721377f22d833010bfe006025ff10ad4">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
  <script async defer crossorigin="anonymous" src="https://connect.facebook.net/ka_GE/sdk.js#xfbml=1&version=v20.0&appId=8771838599541345&autoLogAppEvents=1"></script>
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
</head>
<body>
  <app-root></app-root>
</body>
</html>

----------------------------------------


=== File: src/main.server.ts [TS] ===
----------------------------------------
export { AppServerModule as default } from './app/app.module.server';

----------------------------------------


=== File: src/main.ts [TS] ===
----------------------------------------
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';


platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));

----------------------------------------


=== File: src/styles.scss [STYLE] ===
----------------------------------------
@use "@angular/material" as mat;

@import "https://fonts.googleapis.com/css2?family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap";
@import "https://fonts.googleapis.com/css2?family=Nunito+Sans:ital,opsz,wght@0,6..12,200..1000;1,6..12,200..1000&display=swap";

@font-face {
  font-family: ROBOTOGEO;
  src: url("./assets/fonts/ROBOTO_GEO_NUS.TTF");
}

.content-component {
  background-color: white;
  margin: 10px;
  height: calc(100vh - 4.75rem);
  border-radius: 15px;
  overflow-y: auto;
  overflow-x: hidden;
}

.dahsboard-main-bg {
  background-color: #f5f6fa;
}

/////////// MEDIA QUERIES ///////////

@media screen and (max-width: 427px) {
  .btn-mt-div {
    margin-top: 1rem;
  }
}

@media screen and (max-width: 777px) {
  app-sidebar {
    position: fixed;
    left: 0;
    background-color: white;
    width: 230px;
    height: 100%;
    box-shadow: 5px 16px 8px 3px rgba(0, 0, 0, 0.3);
    z-index: 111;
  }
  .sidenav-container::after {
    content: "";
    position: absolute;
    right: 0;
    width: 100vw;
    background-color: rgba(0, 0, 0, 0.363);
    height: 100vh;
    transform: translateX(100%);
    z-index: 11;
  }
  .nav {
    width: 100% !important;
  }
  .chatting-container .question-div,
  .chatting-container .answer-chat-text {
    max-width: 80%;
  }
}

@media screen and (min-width: 779px) {
  .bi-arrow-bar-left {
    display: none;
  }
  .chatting-container .question-div,
  .chatting-container .answer-chat-text {
    max-width: 60%;
  }
}

@media screen and (max-width: 888px) {
  .responsed-text {
    display: block;
  }
}

@media screen and (min-width: 889px) {
  .responsed-text {
    display: flex;
  }
}

@media screen and (max-width: 668px) {
  .profile-container {
    padding-left: 10px;
    padding-right: 10px;
  }
  .auth-sign-up {
    width: 95vw;
  }
  .auth-sign-in {
    width: 95vw;
  }
}
@media screen and (max-width: 1079px) and (min-width: 669px) {
  .auth-sign-up {
    width: 60vw;
  }
}
@media screen and (min-width: 1080px) {
  .auth-sign-up {
    width: 40vw;
  }
  .tr-c {
    padding-left: 4rem !important;
    padding-right: 4rem !important;
  }
}
@media screen and (max-width: 998px) {
  .translate-container {
    flex-direction: column;
  }
}

/////////// MEDIA QUERIES ///////////

*,
::after,
::before {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}
html,
body {
  overflow-x: hidden;
  font-family: ROBOTOGEO, "Nunito Sans", sans-serif !important;
  // background-color: #f5f6fa !important;
}

/////////// GENERAL CLASSES - REUSED ///////////

.mx-w-15 {
  max-width: 13rem;
  min-width: 11rem !important;
}

.fs-14px {
  font-size: 14px;
}
.fs-12px {
  font-size: 12px;
}
.slk-color {
  color: #3b59f3;
}
.c-p {
  cursor: pointer;
}
.gen-btn {
  background-color: #3b59f3;
  transition: 0.15s all ease-in-out;
}
.gen-btn:hover {
  background-color: #0e33ed;
}
.dis {
  width: fit-content;
  border: 1px solid #dee2e6;
  padding: 0.375rem 0.75rem;
  border-radius: 0.375rem;
  line-height: 1.5;
  background-color: rgb(240, 240, 240);
}
.hidden {
  display: none;
}
.content-btn {
  border: none;
  outline: none;
  padding: 0.5rem 2rem;
  border-radius: 25px;
  background-color: #3b59f3;
  color: white;
  transition: all 0.15s ease-in-out;
  svg {
    width: 16px;
    fill: white;
  }
  &:hover {
    box-shadow: rgba(0, 0, 0, 0.1) 0px 10px 15px -3px,
      rgba(0, 0, 0, 0.05) 0px 4px 6px -2px;
  }
}

.content-btn.translate {
  padding: 0.5rem 2rem;
}

.bi-copy {
  cursor: pointer;
  font-size: 1rem;
  color: #182fa1;
}

.sidenav-container {
  overflow-x: hidden;
  transition: all 500ms ease-in-out !important;
}

.nav-link span {
  white-space: nowrap;
}

.loggedin-link {
  height: 37px;
}

/////////// GENERAL CLASSES - REUSED ///////////

/////////// AUTH ///////////

.auth-bg {
  display: flex;
  justify-content: center;
  width: 100vw;
  min-height: 100vh;
  background-image: radial-gradient(
    circle,
    #2d355a,
    #2e3f7f,
    #2f49a5,
    #3251cc,
    #3b59f3
  );
}
.auth-bg .auth-container {
  background-color: white;
  padding: 40px;
  border-radius: 10px;
}
.auth-bg .auth-container .input-field label {
  display: block;
  margin-top: 20px;
}
.auth-bg .auth-container .input-field input {
  width: 100%;
  padding: 0 10px;
  height: 40px;
  border-radius: 10px;
  border: 1px solid rgb(201, 201, 201);
  outline: none;
}
.auth-bg .auth-container p {
  cursor: default;
}
.auth-bg .auth-container p span {
  cursor: pointer;
}
.auth-bg .auth-sign-up {
  margin: 6rem 0;
}

/////////// AUTH ///////////

/////////// SIDEBAR ///////////
.nav .nav-link {
  display: flex;
  align-items: center;
  margin-bottom: 7px;
  color: black;
  svg {
    fill: #2c3035;
    width: 18px;
    margin: 4px 2px;
    height: 20px;
  }
}
.nav .nav-link:hover {
  background-color: #3b59f3 !important;
  color: white !important;
  svg {
    fill: white;
  }
}
.nav p {
  font-size: 14px;
  margin-bottom: 0;
  cursor: pointer;
}
.nav .active {
  background-color: #3b59f3 !important;
  color: white !important;
  svg {
    fill: white;
  }
}
/////////// SIDEBAR ///////////

/// translate component ///

.translate-container {
  height: 100%;
  .translate-content,
  .translated-content {
    border-radius: 10px;
    background-color: white;
    box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px,
      rgba(60, 64, 67, 0.15) 0px 2px 6px 2px;
  }
  .translate-content {
    height: 100%;
    position: relative;
    textarea {
      min-height: 200px;
      width: 100%;
      overflow: hidden;
      resize: none;
      outline: none;
      border: none;
      border-radius: 10px;
    }
  }
  .translated-content {
    height: 100%;
    min-height: 232px;
    position: relative;
    .bi-copy {
      position: absolute;
      top: 2px;
      right: 6px;
      border-radius: 50%;
      cursor: pointer;
      padding: 6px 10px;
      &:hover {
        background-color: rgba(128, 128, 128, 0.25);
      }
    }
  }
}

.file-div {
  max-width: 30rem;
  width: 90%;
  margin: 0.2rem 0;
  background-color: #f1f1f1;
  padding: 0.7rem 3rem 0.7rem 1rem;
  border-radius: 7px;
  text-align: left;
  .file-name-text {
    width: 100%;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    padding: 0;
    margin: 0;
    font-size: 14px;
    color: black;
  }
  .bi-x-octagon {
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    &:hover {
      color: red;
    }
  }
}

// LOADING BAR //
.pr-container {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  .progress-bar__container {
    width: 80%;
    padding: 5px;
    height: 1rem;
    border-radius: 2rem;
    position: relative;
    overflow: hidden;
    transition: all 0.5s;
    will-change: transform;
    box-shadow: 0 0 5px #3b59f3;
    background-color: white;
    .progress-bar {
      position: absolute;
      height: 100%;
      width: 100%;
      content: "";
      background-color: #14c2cc;
      background-image: radial-gradient(
          circle farthest-side at top right,
          transparent,
          #0d64ff
        ),
        radial-gradient(
          ellipse farthest-corner at 0% 100%,
          transparent,
          #ff00a0
        );
      animation: bg-change 10s infinite;
      top: 0;
      bottom: 0;
      left: -100%;
      border-radius: inherit;
      display: flex;
      justify-content: center;
      align-items: center;
      color: white;
      z-index: 111;
    }
  }
}

@keyframes bg-change {
  0%,
  100% {
    filter: hue-rotate(0deg);
  }
  50% {
    filter: hue-rotate(-45deg);
  }
}
// LOADING BAR //

/////////// DESCRIPTION, SCRIPT-COPY ///////////

.search-text-ctg {
  width: 100%;
  border: 1px solid rgb(210, 210, 210);
  border-radius: 100px;
  input {
    padding: 0.8rem 1rem;
    border: none;
    border-right: 1px solid rgb(210, 210, 210);
    outline: none;
    border-radius: 100px 0 0 100px;
  }
}

.copyright-input {
  border: 1px solid rgb(210, 210, 210);
  border-radius: 100px;
  input {
    outline: none;
    padding: 0.8rem 1rem;
    border-left: 1px solid rgb(210, 210, 210) !important;
    border-radius: 0 100px 100px 0;
    border: none;
  }
}

.response-border-div {
  padding: 1rem;
  border: 1px solid #cfcfcf;
  border-radius: 10px;
}

#file-upload {
  display: none;
}

.upload-photo-container {
  width: fit-content;
  max-width: 150px;
  position: relative;
  img {
    max-width: 100px;
  }
  .dlt-div {
    background-color: white;
    position: absolute;
    top: -0.5rem;
    right: 0;
    cursor: pointer;
    border-radius: 0 0 0 50%;
    &:hover .bi {
      color: red;
    }
    .bi {
      font-size: 12px;
      padding: 0 0.2rem;
    }
  }
  h5 {
    word-wrap: break-word;
  }
}

.photo-upload {
  // position: absolute;
  // top: 12px;
  // left: 0;
  .custom-file-upload {
    display: inline-block;
    cursor: pointer;
    svg {
      width: 16px;
      fill: rgb(73, 73, 73);
      margin-bottom: 2px;
    }
    i {
      color: rgb(73, 73, 73);
    }
  }
}

/////////// DESCRIPTION, SCRIPT-COPY ///////////

.generator-loader-container {
  margin: 8rem 0;
  .loader-generator {
    width: 50px;
    aspect-ratio: 1;
    display: grid;
    border: 4px solid #0000;
    border-radius: 50%;
    border-right-color: #3b59f3;
    animation: l15 1s infinite linear;
  }
  .loader-generator::before,
  .loader-generator::after {
    content: "";
    grid-area: 1/1;
    margin: 2px;
    border: inherit;
    border-radius: 50%;
    animation: l15 2s infinite;
  }
  .loader-generator::after {
    margin: 8px;
    animation-duration: 3s;
  }
}

@keyframes l15 {
  100% {
    transform: rotate(1turn);
  }
}

.attach-file-text {
  color: rgba(33, 37, 41, 0.75);
}

/////////// ERRORs /////////////
.select-error {
  border: rgba(255, 0, 0, 0.4) 1px solid !important;
  box-shadow: rgba(255, 0, 0, 0.2) 0px 2px 8px 0px !important;
}

.error-text {
  color: red !important;
}

.error-place::placeholder {
  color: red !important;
}

.ctg {
  .mat-mdc-select-placeholder.mat-mdc-select-min-line {
    color: red !important;
  }
}
/////////// ERRORs /////////////

.language-tr-div {
  p {
    margin: 0;
    padding: 0.75rem 1rem;
    display: inline-block;
    cursor: pointer;
    &:hover {
      background-color: rgb(248, 248, 248);
      border-color: blue;
    }
  }
  p.l-d {
    margin-left: 10px;
  }
}

#languageSelect,
#languageSourceSelect {
  padding: 0.75rem 1rem;
  margin-right: 10px;
  border-bottom: 2px solid rgb(255, 255, 255);
  border: none;
  border-radius: 0;
  cursor: pointer;
}

.selected-lanp-active,
.auto-language {
  background-color: rgb(248, 248, 248);
  border-bottom: 2px solid blue !important;
}

.selected-language-active {
  border-bottom: 2px solid blue !important;
  background-color: rgb(248, 248, 248) !important;
}

// HOME COMPONENT //
.home-nav,
.z-999 {
  z-index: 999 !important;
}

canvas {
  display: block;
  position: absolute;
  // z-index: 0;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.out-bg {
  padding: 0.25rem 1rem;
  background-color: white;
  border: 1px solid #0d64ff;
  color: #0e33ed;
  box-sizing: border-box;
}

.counter-container {
  background-color: #3b59f3;
  color: white;
}
// HOME COMPONENT //

.mat-mdc-menu-content {
  max-height: 300px !important;
}

.acc-del-container {
  .bi-x-lg {
    position: absolute;
    top: 1rem;
    right: 1rem;
    color: red;
  }
}

.acc-del {
  padding: 5px 15px;
  border-radius: 1rem;
  transition: all 0.25s ease-in-out;
  color: red;
  &:hover {
    background-color: rgba(255, 0, 0, 0.5);
    color: white;
  }
}

.del-acc-btn,
.close-dialog-delacc {
  padding: 5px 15px;
  border-radius: 1rem;
  transition: all 0.25s ease-in-out;
  border: none;
  outline: none;
}

.del-acc-btn {
  background-color: transparent;
  color: red;
  &:hover {
    background-color: rgba(255, 0, 0, 1);
    color: white;
  }
}

.close-dialog-delacc {
  background-color: transparent;
  &:hover {
    background-color: #3b59f3;
    color: white;
  }
}

----------------------------------------



=== Project Summary ===
----------------------------------------
Components: 29
Services: 11
Modules: 5
HTML Templates: 29
Style Files: 0
